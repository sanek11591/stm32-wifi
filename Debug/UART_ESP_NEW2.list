
UART_ESP_NEW2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08004534  08004534  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004534  08004534  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800453c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200000b4  080045f0  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  080045f0  00020810  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001359d  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ea  00000000  00000000  00033679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00035f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a04a  00000000  00000000  00037d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013818  00000000  00000000  00051d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961fa  00000000  00000000  00065592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb78c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  000fb7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b4 	.word	0x200000b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004460 	.word	0x08004460

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b8 	.word	0x200000b8
 8000104:	08004460 	.word	0x08004460

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <AT_com>:

PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */

void AT_com(uint8_t *command, int size){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	flag = 1;
 800022a:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <AT_com+0xc8>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]

	if (flagf == 0){
 8000230:	4b2e      	ldr	r3, [pc, #184]	; (80002ec <AT_com+0xcc>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d108      	bne.n	800024a <AT_com+0x2a>
		buffera[0] = command[size];
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	18d3      	adds	r3, r2, r3
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <AT_com+0xd0>)
 8000242:	701a      	strb	r2, [r3, #0]
		flagf = 1;
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <AT_com+0xcc>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
	}
	buffera[counter] = command[0];
 800024a:	4b2a      	ldr	r3, [pc, #168]	; (80002f4 <AT_com+0xd4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	001a      	movs	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7819      	ldrb	r1, [r3, #0]
 8000254:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <AT_com+0xd0>)
 8000256:	5499      	strb	r1, [r3, r2]
	counter++;
 8000258:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <AT_com+0xd4>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <AT_com+0xd4>)
 8000262:	701a      	strb	r2, [r3, #0]
	if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 8000264:	4924      	ldr	r1, [pc, #144]	; (80002f8 <AT_com+0xd8>)
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <AT_com+0xd0>)
 8000268:	2209      	movs	r2, #9
 800026a:	0018      	movs	r0, r3
 800026c:	f004 f8e6 	bl	800443c <strncmp>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d116      	bne.n	80002a2 <AT_com+0x82>
		flag = 0;
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <AT_com+0xc8>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
		flagf = 0;
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <AT_com+0xcc>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000280:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <AT_com+0xd4>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
		memset(buffera, 0, sizeof(buffera));
 8000286:	23af      	movs	r3, #175	; 0xaf
 8000288:	009a      	lsls	r2, r3, #2
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <AT_com+0xd0>)
 800028c:	2100      	movs	r1, #0
 800028e:	0018      	movs	r0, r3
 8000290:	f004 f8cc 	bl	800442c <memset>
		HAL_UART_Transmit_IT(&huart1, AT_CIPMUX, sizeof(AT_CIPMUX));
 8000294:	4919      	ldr	r1, [pc, #100]	; (80002fc <AT_com+0xdc>)
 8000296:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <AT_com+0xe0>)
 8000298:	220d      	movs	r2, #13
 800029a:	0018      	movs	r0, r3
 800029c:	f002 fdc6 	bl	8002e2c <HAL_UART_Transmit_IT>
		memset(buffera, 0, sizeof(buffera));
		HAL_UART_Transmit_IT(&huart1, AT, sizeof(AT));
	}


}
 80002a0:	e01d      	b.n	80002de <AT_com+0xbe>
	}else if(strncmp(buffera,"\r\r\n\r\nERROR\r\n",8) == 0){
 80002a2:	4918      	ldr	r1, [pc, #96]	; (8000304 <AT_com+0xe4>)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <AT_com+0xd0>)
 80002a6:	2208      	movs	r2, #8
 80002a8:	0018      	movs	r0, r3
 80002aa:	f004 f8c7 	bl	800443c <strncmp>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d115      	bne.n	80002de <AT_com+0xbe>
		flag = 0;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <AT_com+0xc8>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		flagf = 0;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <AT_com+0xcc>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <AT_com+0xd4>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
		memset(buffera, 0, sizeof(buffera));
 80002c4:	23af      	movs	r3, #175	; 0xaf
 80002c6:	009a      	lsls	r2, r3, #2
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <AT_com+0xd0>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f004 f8ad 	bl	800442c <memset>
		HAL_UART_Transmit_IT(&huart1, AT, sizeof(AT));
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <AT_com+0xe8>)
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <AT_com+0xe0>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	0018      	movs	r0, r3
 80002da:	f002 fda7 	bl	8002e2c <HAL_UART_Transmit_IT>
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000391 	.word	0x20000391
 80002ec:	20000392 	.word	0x20000392
 80002f0:	200000d4 	.word	0x200000d4
 80002f4:	20000390 	.word	0x20000390
 80002f8:	08004478 	.word	0x08004478
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000494 	.word	0x20000494
 8000304:	08004484 	.word	0x08004484
 8000308:	20000000 	.word	0x20000000

0800030c <AT_CIPMUX_com>:
void AT_CIPMUX_com(uint8_t *command, uint8_t size){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	000a      	movs	r2, r1
 8000316:	1cfb      	adds	r3, r7, #3
 8000318:	701a      	strb	r2, [r3, #0]
	flag = 2;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <AT_CIPMUX_com+0xc0>)
 800031c:	2202      	movs	r2, #2
 800031e:	701a      	strb	r2, [r3, #0]
		if (flagf == 0){
 8000320:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d109      	bne.n	800033c <AT_CIPMUX_com+0x30>
			buffera[0] = command[size];
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	18d3      	adds	r3, r2, r3
 8000330:	781a      	ldrb	r2, [r3, #0]
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 8000334:	701a      	strb	r2, [r3, #0]
			flagf = 1;
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
		}
		buffera[counter] = command[0];
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	001a      	movs	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7819      	ldrb	r1, [r3, #0]
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 8000348:	5499      	strb	r1, [r3, r2]
		counter++;
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 8000354:	701a      	strb	r2, [r3, #0]
		if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 8000356:	4921      	ldr	r1, [pc, #132]	; (80003dc <AT_CIPMUX_com+0xd0>)
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 800035a:	2209      	movs	r2, #9
 800035c:	0018      	movs	r0, r3
 800035e:	f004 f86d 	bl	800443c <strncmp>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d116      	bne.n	8000394 <AT_CIPMUX_com+0x88>
			flag = 0;
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <AT_CIPMUX_com+0xc0>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 8000378:	23af      	movs	r3, #175	; 0xaf
 800037a:	009a      	lsls	r2, r3, #2
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 800037e:	2100      	movs	r1, #0
 8000380:	0018      	movs	r0, r3
 8000382:	f004 f853 	bl	800442c <memset>
			HAL_UART_Transmit_IT(&huart1, AT_CIPSERVER, sizeof(AT_CIPSERVER));
 8000386:	4916      	ldr	r1, [pc, #88]	; (80003e0 <AT_CIPMUX_com+0xd4>)
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <AT_CIPMUX_com+0xd8>)
 800038a:	2213      	movs	r2, #19
 800038c:	0018      	movs	r0, r3
 800038e:	f002 fd4d 	bl	8002e2c <HAL_UART_Transmit_IT>
			flagf = 0;
			counter = 0;
			memset(buffera, 0, sizeof(buffera));
		}

}
 8000392:	e017      	b.n	80003c4 <AT_CIPMUX_com+0xb8>
		}else if(strncmp(buffera,"\r\r\nERROR\r\n",8) == 0){
 8000394:	4914      	ldr	r1, [pc, #80]	; (80003e8 <AT_CIPMUX_com+0xdc>)
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 8000398:	2208      	movs	r2, #8
 800039a:	0018      	movs	r0, r3
 800039c:	f004 f84e 	bl	800443c <strncmp>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d10f      	bne.n	80003c4 <AT_CIPMUX_com+0xb8>
			flag = 0;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <AT_CIPMUX_com+0xc0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 80003b6:	23af      	movs	r3, #175	; 0xaf
 80003b8:	009a      	lsls	r2, r3, #2
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 80003bc:	2100      	movs	r1, #0
 80003be:	0018      	movs	r0, r3
 80003c0:	f004 f834 	bl	800442c <memset>
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b002      	add	sp, #8
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000391 	.word	0x20000391
 80003d0:	20000392 	.word	0x20000392
 80003d4:	200000d4 	.word	0x200000d4
 80003d8:	20000390 	.word	0x20000390
 80003dc:	08004478 	.word	0x08004478
 80003e0:	20000014 	.word	0x20000014
 80003e4:	20000494 	.word	0x20000494
 80003e8:	08004494 	.word	0x08004494

080003ec <AT_CIPSERVER_com>:

void AT_CIPSERVER_com(uint8_t *command, uint8_t size){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cfb      	adds	r3, r7, #3
 80003f8:	701a      	strb	r2, [r3, #0]
	flag = 3;
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	701a      	strb	r2, [r3, #0]
		if (flagf == 0){
 8000400:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d109      	bne.n	800041c <AT_CIPSERVER_com+0x30>
			buffera[0] = command[size];
 8000408:	1cfb      	adds	r3, r7, #3
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	18d3      	adds	r3, r2, r3
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	4b32      	ldr	r3, [pc, #200]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 8000414:	701a      	strb	r2, [r3, #0]
			flagf = 1;
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
		}
		buffera[counter] = command[0];
 800041c:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	001a      	movs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7819      	ldrb	r1, [r3, #0]
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 8000428:	5499      	strb	r1, [r3, r2]
		counter++;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 8000434:	701a      	strb	r2, [r3, #0]
		if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 8000436:	492b      	ldr	r1, [pc, #172]	; (80004e4 <AT_CIPSERVER_com+0xf8>)
 8000438:	4b28      	ldr	r3, [pc, #160]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800043a:	2209      	movs	r2, #9
 800043c:	0018      	movs	r0, r3
 800043e:	f003 fffd 	bl	800443c <strncmp>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d110      	bne.n	8000468 <AT_CIPSERVER_com+0x7c>
			flag = 0;
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 8000458:	23af      	movs	r3, #175	; 0xaf
 800045a:	009a      	lsls	r2, r3, #2
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800045e:	2100      	movs	r1, #0
 8000460:	0018      	movs	r0, r3
 8000462:	f003 ffe3 	bl	800442c <memset>
			memset(buffera, 0, sizeof(buffera));
		}



}
 8000466:	e030      	b.n	80004ca <AT_CIPSERVER_com+0xde>
		}else if(strncmp(buffera,"\r\r\nERROR\r\n",8) == 0){
 8000468:	491f      	ldr	r1, [pc, #124]	; (80004e8 <AT_CIPSERVER_com+0xfc>)
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800046c:	2208      	movs	r2, #8
 800046e:	0018      	movs	r0, r3
 8000470:	f003 ffe4 	bl	800443c <strncmp>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d110      	bne.n	800049a <AT_CIPSERVER_com+0xae>
			flag = 0;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 800048a:	23af      	movs	r3, #175	; 0xaf
 800048c:	009a      	lsls	r2, r3, #2
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 8000490:	2100      	movs	r1, #0
 8000492:	0018      	movs	r0, r3
 8000494:	f003 ffca 	bl	800442c <memset>
}
 8000498:	e017      	b.n	80004ca <AT_CIPSERVER_com+0xde>
		}else if(strncmp(buffera,"\r\r\nno change\r\n\r\nOK\r\n",20) == 0){
 800049a:	4914      	ldr	r1, [pc, #80]	; (80004ec <AT_CIPSERVER_com+0x100>)
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800049e:	2214      	movs	r2, #20
 80004a0:	0018      	movs	r0, r3
 80004a2:	f003 ffcb 	bl	800443c <strncmp>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d10f      	bne.n	80004ca <AT_CIPSERVER_com+0xde>
			flag = 0;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 80004bc:	23af      	movs	r3, #175	; 0xaf
 80004be:	009a      	lsls	r2, r3, #2
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 ffb1 	bl	800442c <memset>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	20000391 	.word	0x20000391
 80004d8:	20000392 	.word	0x20000392
 80004dc:	200000d4 	.word	0x200000d4
 80004e0:	20000390 	.word	0x20000390
 80004e4:	08004478 	.word	0x08004478
 80004e8:	08004494 	.word	0x08004494
 80004ec:	080044a0 	.word	0x080044a0

080004f0 <Connect>:

void Connect(uint8_t *command, int size){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	flag = 4;
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <Connect+0x98>)
 80004fc:	2204      	movs	r2, #4
 80004fe:	701a      	strb	r2, [r3, #0]
	if (flagf == 0){
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <Connect+0x9c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d108      	bne.n	800051a <Connect+0x2a>
		buffera[0] = command[size];
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	18d3      	adds	r3, r2, r3
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <Connect+0xa0>)
 8000512:	701a      	strb	r2, [r3, #0]
		flagf = 1;
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <Connect+0x9c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
	}
	buffera[counter] = command[0];
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <Connect+0xa4>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	001a      	movs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7819      	ldrb	r1, [r3, #0]
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <Connect+0xa0>)
 8000526:	5499      	strb	r1, [r3, r2]
	counter++;
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <Connect+0xa4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <Connect+0xa4>)
 8000532:	701a      	strb	r2, [r3, #0]
	int indicator = rncoun(counter, command);
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <Connect+0xa4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	001a      	movs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f000 f8ba 	bl	80006b8 <rncoun>
 8000544:	0003      	movs	r3, r0
 8000546:	60fb      	str	r3, [r7, #12]
	if (indicator == 2){
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d118      	bne.n	8000580 <Connect+0x90>
		HAL_UART_Transmit_IT(&huart1, "AT+CIPSEND=0,126\r\n", 18);
 800054e:	4912      	ldr	r1, [pc, #72]	; (8000598 <Connect+0xa8>)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <Connect+0xac>)
 8000552:	2212      	movs	r2, #18
 8000554:	0018      	movs	r0, r3
 8000556:	f002 fc69 	bl	8002e2c <HAL_UART_Transmit_IT>
		flag = 0;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <Connect+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
		flagf = 0;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <Connect+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <Connect+0xa4>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
		counternn = 0;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <Connect+0xb0>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
		memset(buffera, 0, sizeof(buffera));
 8000572:	23af      	movs	r3, #175	; 0xaf
 8000574:	009a      	lsls	r2, r3, #2
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <Connect+0xa0>)
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f003 ff56 	bl	800442c <memset>
	}
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b004      	add	sp, #16
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000391 	.word	0x20000391
 800058c:	20000392 	.word	0x20000392
 8000590:	200000d4 	.word	0x200000d4
 8000594:	20000390 	.word	0x20000390
 8000598:	080044b8 	.word	0x080044b8
 800059c:	20000494 	.word	0x20000494
 80005a0:	20000394 	.word	0x20000394

080005a4 <AT_send>:
void AT_send(uint8_t *command, int size){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	flag = 5;
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <AT_send+0xf0>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	701a      	strb	r2, [r3, #0]
			if (flagf == 0){
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <AT_send+0xf4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d108      	bne.n	80005ce <AT_send+0x2a>
				buffera[0] = command[size];
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	18d3      	adds	r3, r2, r3
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <AT_send+0xf8>)
 80005c6:	701a      	strb	r2, [r3, #0]
				flagf = 1;
 80005c8:	4b33      	ldr	r3, [pc, #204]	; (8000698 <AT_send+0xf4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
			}
			buffera[counter] = command[0];
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <AT_send+0xfc>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	001a      	movs	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7819      	ldrb	r1, [r3, #0]
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <AT_send+0xf8>)
 80005da:	5499      	strb	r1, [r3, r2]
			counter++;
 80005dc:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <AT_send+0xfc>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <AT_send+0xfc>)
 80005e6:	701a      	strb	r2, [r3, #0]
			if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 80005e8:	492e      	ldr	r1, [pc, #184]	; (80006a4 <AT_send+0x100>)
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <AT_send+0xf8>)
 80005ec:	2209      	movs	r2, #9
 80005ee:	0018      	movs	r0, r3
 80005f0:	f003 ff24 	bl	800443c <strncmp>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d117      	bne.n	8000628 <AT_send+0x84>
				flag = 0;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <AT_send+0xf0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
				flagf = 0;
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <AT_send+0xf4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <AT_send+0xfc>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
				memset(buffera, 0, sizeof(buffera));
 800060a:	23af      	movs	r3, #175	; 0xaf
 800060c:	009a      	lsls	r2, r3, #2
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <AT_send+0xf8>)
 8000610:	2100      	movs	r1, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f003 ff0a 	bl	800442c <memset>
				HAL_UART_Transmit(&huart1, html, sizeof(html), 500);
 8000618:	23fa      	movs	r3, #250	; 0xfa
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4922      	ldr	r1, [pc, #136]	; (80006a8 <AT_send+0x104>)
 800061e:	4823      	ldr	r0, [pc, #140]	; (80006ac <AT_send+0x108>)
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	f002 fb59 	bl	8002cd8 <HAL_UART_Transmit>
				flag = 0;
				flagf = 0;
				counter = 0;
				memset(buffera, 0, sizeof(buffera));
			}
}
 8000626:	e030      	b.n	800068a <AT_send+0xe6>
			}else if(strncmp(buffera,"\r\r\nERROR\r\n",8) == 0){
 8000628:	4921      	ldr	r1, [pc, #132]	; (80006b0 <AT_send+0x10c>)
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <AT_send+0xf8>)
 800062c:	2208      	movs	r2, #8
 800062e:	0018      	movs	r0, r3
 8000630:	f003 ff04 	bl	800443c <strncmp>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d110      	bne.n	800065a <AT_send+0xb6>
				flag = 0;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <AT_send+0xf0>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
				flagf = 0;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <AT_send+0xf4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <AT_send+0xfc>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
				memset(buffera, 0, sizeof(buffera));
 800064a:	23af      	movs	r3, #175	; 0xaf
 800064c:	009a      	lsls	r2, r3, #2
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <AT_send+0xf8>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f003 feea 	bl	800442c <memset>
}
 8000658:	e017      	b.n	800068a <AT_send+0xe6>
			}else if(strncmp(buffera,"\r\r\nno change\r\n\r\nOK\r\n",20) == 0){
 800065a:	4916      	ldr	r1, [pc, #88]	; (80006b4 <AT_send+0x110>)
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <AT_send+0xf8>)
 800065e:	2214      	movs	r2, #20
 8000660:	0018      	movs	r0, r3
 8000662:	f003 feeb 	bl	800443c <strncmp>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d10f      	bne.n	800068a <AT_send+0xe6>
				flag = 0;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <AT_send+0xf0>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
				flagf = 0;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <AT_send+0xf4>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <AT_send+0xfc>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
				memset(buffera, 0, sizeof(buffera));
 800067c:	23af      	movs	r3, #175	; 0xaf
 800067e:	009a      	lsls	r2, r3, #2
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <AT_send+0xf8>)
 8000682:	2100      	movs	r1, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f003 fed1 	bl	800442c <memset>
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000391 	.word	0x20000391
 8000698:	20000392 	.word	0x20000392
 800069c:	200000d4 	.word	0x200000d4
 80006a0:	20000390 	.word	0x20000390
 80006a4:	08004478 	.word	0x08004478
 80006a8:	20000028 	.word	0x20000028
 80006ac:	20000494 	.word	0x20000494
 80006b0:	08004494 	.word	0x08004494
 80006b4:	080044a0 	.word	0x080044a0

080006b8 <rncoun>:
int rncoun(int size, uint8_t *symb){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	if(symb[0] == '\r' || symcount > 0){
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b0d      	cmp	r3, #13
 80006c8:	d003      	beq.n	80006d2 <rncoun+0x1a>
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <rncoun+0x94>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dd36      	ble.n	8000740 <rncoun+0x88>
		symbbyf[symcount] = symb[0];
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <rncoun+0x94>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	7811      	ldrb	r1, [r2, #0]
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <rncoun+0x98>)
 80006dc:	54d1      	strb	r1, [r2, r3]
		symcount++;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <rncoun+0x94>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <rncoun+0x94>)
 80006e6:	601a      	str	r2, [r3, #0]
		if (symcount == 4){
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <rncoun+0x94>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d127      	bne.n	8000740 <rncoun+0x88>
			if(symbbyf[0] == '\r' && symbbyf[1] == '\n' && symbbyf[2] == '\r' && symbbyf[3] == '\n'){
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <rncoun+0x98>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d11a      	bne.n	800072e <rncoun+0x76>
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <rncoun+0x98>)
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	d116      	bne.n	800072e <rncoun+0x76>
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <rncoun+0x98>)
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d112      	bne.n	800072e <rncoun+0x76>
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <rncoun+0x98>)
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	2b0a      	cmp	r3, #10
 800070e:	d10e      	bne.n	800072e <rncoun+0x76>
				counternn ++;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <rncoun+0x9c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <rncoun+0x9c>)
 8000718:	601a      	str	r2, [r3, #0]
				symcount = 0;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <rncoun+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
				memset(symbbyf, 0, sizeof(symbbyf));
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <rncoun+0x98>)
 8000722:	2204      	movs	r2, #4
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fe80 	bl	800442c <memset>
			if(symbbyf[0] == '\r' && symbbyf[1] == '\n' && symbbyf[2] == '\r' && symbbyf[3] == '\n'){
 800072c:	e008      	b.n	8000740 <rncoun+0x88>
			} else {
				symcount = 0;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <rncoun+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
				memset(symbbyf, 0, sizeof(symbbyf));
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <rncoun+0x98>)
 8000736:	2204      	movs	r2, #4
 8000738:	2100      	movs	r1, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f003 fe76 	bl	800442c <memset>
			}

		}

	}
	return counternn;
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <rncoun+0x9c>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000398 	.word	0x20000398
 8000750:	2000039c 	.word	0x2000039c
 8000754:	20000394 	.word	0x20000394

08000758 <foo>:



void foo(uint8_t *command, int size){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
    if((strncmp(command,"AT",size-1) == 0 && size > 1) || flag == 1){
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	4945      	ldr	r1, [pc, #276]	; (800087c <foo+0x124>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f003 fe66 	bl	800443c <strncmp>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d102      	bne.n	800077a <foo+0x22>
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	dc03      	bgt.n	8000782 <foo+0x2a>
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <foo+0x128>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d106      	bne.n	8000790 <foo+0x38>
    	AT_com(command,size);
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fd49 	bl	8000220 <AT_com>
 800078e:	e071      	b.n	8000874 <foo+0x11c>
    } else if((strncmp(command,"AT+CIPMUX=1",size-1) == 0 && size > 1) || flag == 2){
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	493b      	ldr	r1, [pc, #236]	; (8000884 <foo+0x12c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0018      	movs	r0, r3
 800079a:	f003 fe4f 	bl	800443c <strncmp>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d102      	bne.n	80007a8 <foo+0x50>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	dc03      	bgt.n	80007b0 <foo+0x58>
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <foo+0x128>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d107      	bne.n	80007c0 <foo+0x68>
    	AT_CIPMUX_com(command,size);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fda7 	bl	800030c <AT_CIPMUX_com>
 80007be:	e059      	b.n	8000874 <foo+0x11c>
    } else if ((strncmp(command,"AT+CIPSERVER=1,80",size-1) == 0 && size > 1) || flag == 3){
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	4930      	ldr	r1, [pc, #192]	; (8000888 <foo+0x130>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 fe37 	bl	800443c <strncmp>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d102      	bne.n	80007d8 <foo+0x80>
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	dc03      	bgt.n	80007e0 <foo+0x88>
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <foo+0x128>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d107      	bne.n	80007f0 <foo+0x98>
    	AT_CIPSERVER_com(command,size);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fdff 	bl	80003ec <AT_CIPSERVER_com>
 80007ee:	e041      	b.n	8000874 <foo+0x11c>
    } else if ((strncmp(command,"0,CONNECT",size-1) == 0 && size > 1) || flag == 4){
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	4925      	ldr	r1, [pc, #148]	; (800088c <foo+0x134>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 fe1f 	bl	800443c <strncmp>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d102      	bne.n	8000808 <foo+0xb0>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	dc03      	bgt.n	8000810 <foo+0xb8>
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <foo+0x128>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d109      	bne.n	8000824 <foo+0xcc>
    	flag = 4;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <foo+0x128>)
 8000812:	2204      	movs	r2, #4
 8000814:	701a      	strb	r2, [r3, #0]
    	Connect(command,size);
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fe67 	bl	80004f0 <Connect>
 8000822:	e027      	b.n	8000874 <foo+0x11c>
    } else if((strncmp(command,"AT+CIPSEND=0,126\r\n",size-1) == 0 && size > 1) || flag == 5){
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	1e5a      	subs	r2, r3, #1
 8000828:	4919      	ldr	r1, [pc, #100]	; (8000890 <foo+0x138>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	0018      	movs	r0, r3
 800082e:	f003 fe05 	bl	800443c <strncmp>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d102      	bne.n	800083c <foo+0xe4>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	dc03      	bgt.n	8000844 <foo+0xec>
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <foo+0x128>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b05      	cmp	r3, #5
 8000842:	d106      	bne.n	8000852 <foo+0xfa>
    	AT_send(command,size);
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff feaa 	bl	80005a4 <AT_send>
 8000850:	e010      	b.n	8000874 <foo+0x11c>
    } else {
    	flag = 0;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <foo+0x128>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
    	flagf = 0;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <foo+0x13c>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
    	counter = 0;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <foo+0x140>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
    	memset(buffera, 0, sizeof(buffera));
 8000864:	23af      	movs	r3, #175	; 0xaf
 8000866:	009a      	lsls	r2, r3, #2
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <foo+0x144>)
 800086a:	2100      	movs	r1, #0
 800086c:	0018      	movs	r0, r3
 800086e:	f003 fddd 	bl	800442c <memset>
    }
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}
 800087c:	080044cc 	.word	0x080044cc
 8000880:	20000391 	.word	0x20000391
 8000884:	080044d0 	.word	0x080044d0
 8000888:	080044dc 	.word	0x080044dc
 800088c:	080044f0 	.word	0x080044f0
 8000890:	080044b8 	.word	0x080044b8
 8000894:	20000392 	.word	0x20000392
 8000898:	20000390 	.word	0x20000390
 800089c:	200000d4 	.word	0x200000d4

080008a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	if(buffer[0] != '\r' && buffer[0] != '\n' && flag == 0){
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <HAL_UART_RxCpltCallback+0x88>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b0d      	cmp	r3, #13
 80008ae:	d015      	beq.n	80008dc <HAL_UART_RxCpltCallback+0x3c>
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <HAL_UART_RxCpltCallback+0x88>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b0a      	cmp	r3, #10
 80008b6:	d011      	beq.n	80008dc <HAL_UART_RxCpltCallback+0x3c>
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_UART_RxCpltCallback+0x8c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10d      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x3c>
		buffera[counter] = buffer[0];
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_UART_RxCpltCallback+0x90>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	001a      	movs	r2, r3
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_UART_RxCpltCallback+0x88>)
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_UART_RxCpltCallback+0x94>)
 80008cc:	5499      	strb	r1, [r3, r2]
		counter++;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_RxCpltCallback+0x90>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_UART_RxCpltCallback+0x90>)
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e01b      	b.n	8000914 <HAL_UART_RxCpltCallback+0x74>
	} else if(flag != 0){
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_UART_RxCpltCallback+0x8c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d005      	beq.n	80008f0 <HAL_UART_RxCpltCallback+0x50>
		foo(buffer, 1);
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_UART_RxCpltCallback+0x88>)
 80008e6:	2101      	movs	r1, #1
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff ff35 	bl	8000758 <foo>
 80008ee:	e011      	b.n	8000914 <HAL_UART_RxCpltCallback+0x74>
	}
	else {
		buffera[counter] = buffer[0];
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_UART_RxCpltCallback+0x90>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_UART_RxCpltCallback+0x88>)
 80008f8:	7819      	ldrb	r1, [r3, #0]
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_UART_RxCpltCallback+0x94>)
 80008fc:	5499      	strb	r1, [r3, r2]
		foo(buffera,counter);
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_UART_RxCpltCallback+0x90>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	001a      	movs	r2, r3
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_UART_RxCpltCallback+0x94>)
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ff25 	bl	8000758 <foo>
		counter = 1;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_UART_RxCpltCallback+0x90>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 8000914:	4904      	ldr	r1, [pc, #16]	; (8000928 <HAL_UART_RxCpltCallback+0x88>)
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_UART_RxCpltCallback+0x98>)
 8000918:	2201      	movs	r2, #1
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fb06 	bl	8002f2c <HAL_UART_Receive_IT>
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000d0 	.word	0x200000d0
 800092c:	20000391 	.word	0x20000391
 8000930:	20000390 	.word	0x20000390
 8000934:	200000d4 	.word	0x200000d4
 8000938:	20000494 	.word	0x20000494

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fc5c 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f820 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 f9a0 	bl	8000c8c <MX_GPIO_Init>
  MX_I2C2_Init();
 800094c:	f000 f886 	bl	8000a5c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000950:	f000 f8c4 	bl	8000adc <MX_SPI2_Init>
  MX_TSC_Init();
 8000954:	f000 f900 	bl	8000b58 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000958:	f000 f972 	bl	8000c40 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 800095c:	f000 f940 	bl	8000be0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 8000960:	4906      	ldr	r1, [pc, #24]	; (800097c <main+0x40>)
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <main+0x44>)
 8000964:	2201      	movs	r2, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f002 fae0 	bl	8002f2c <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, AT, sizeof(AT));
 800096c:	4905      	ldr	r1, [pc, #20]	; (8000984 <main+0x48>)
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <main+0x44>)
 8000970:	2204      	movs	r2, #4
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fa5a 	bl	8002e2c <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x3c>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	200000d0 	.word	0x200000d0
 8000980:	20000494 	.word	0x20000494
 8000984:	20000000 	.word	0x20000000

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b099      	sub	sp, #100	; 0x64
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	242c      	movs	r4, #44	; 0x2c
 8000990:	193b      	adds	r3, r7, r4
 8000992:	0018      	movs	r0, r3
 8000994:	2334      	movs	r3, #52	; 0x34
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f003 fd47 	bl	800442c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099e:	231c      	movs	r3, #28
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0018      	movs	r0, r3
 80009a4:	2310      	movs	r3, #16
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f003 fd3f 	bl	800442c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ae:	003b      	movs	r3, r7
 80009b0:	0018      	movs	r0, r3
 80009b2:	231c      	movs	r3, #28
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f003 fd38 	bl	800442c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80009bc:	0021      	movs	r1, r4
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2222      	movs	r2, #34	; 0x22
 80009c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2210      	movs	r2, #16
 80009d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2202      	movs	r2, #2
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	0212      	lsls	r2, r2, #8
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	0352      	lsls	r2, r2, #13
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 f9bf 	bl	8001d78 <HAL_RCC_OscConfig>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009fe:	f000 f9cf 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	211c      	movs	r1, #28
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2207      	movs	r2, #7
 8000a08:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fd2f 	bl	8002484 <HAL_RCC_ClockConfig>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2a:	f000 f9b9 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <SystemClock_Config+0xd0>)
 8000a32:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a34:	003b      	movs	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	003b      	movs	r3, r7
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 fe98 	bl	8002778 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a4c:	f000 f9a8 	bl	8000da0 <Error_Handler>
  }
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b019      	add	sp, #100	; 0x64
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	00020001 	.word	0x00020001

08000a5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_I2C2_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <MX_I2C2_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 ff05 	bl	80018a8 <HAL_I2C_Init>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f000 f97d 	bl	8000da0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 ff92 	bl	80019d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f000 f974 	bl	8000da0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 ffd5 	bl	8001a6c <HAL_I2CEx_ConfigDigitalFilter>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 f96b 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200003a0 	.word	0x200003a0
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	20303e5d 	.word	0x20303e5d

08000adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_SPI2_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000ae8:	2282      	movs	r2, #130	; 0x82
 8000aea:	0052      	lsls	r2, r2, #1
 8000aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000af6:	22c0      	movs	r2, #192	; 0xc0
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b36:	2208      	movs	r2, #8
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 ff19 	bl	8002974 <HAL_SPI_Init>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f000 f92b 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200003ec 	.word	0x200003ec
 8000b54:	40003800 	.word	0x40003800

08000b58 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <MX_TSC_Init+0x84>)
 8000b60:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	0552      	lsls	r2, r2, #21
 8000b68:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	0452      	lsls	r2, r2, #17
 8000b70:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b8e:	22a0      	movs	r2, #160	; 0xa0
 8000b90:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000ba6:	222c      	movs	r2, #44	; 0x2c
 8000ba8:	2100      	movs	r1, #0
 8000baa:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000bae:	2291      	movs	r2, #145	; 0x91
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000bbc:	2291      	movs	r2, #145	; 0x91
 8000bbe:	00d2      	lsls	r2, r2, #3
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_TSC_Init+0x80>)
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 ff8d 	bl	8002ae4 <HAL_TSC_Init>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000bce:	f000 f8e7 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000450 	.word	0x20000450
 8000bdc:	40024000 	.word	0x40024000

08000be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <MX_USART1_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bec:	22e1      	movs	r2, #225	; 0xe1
 8000bee:	0252      	lsls	r2, r2, #9
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f002 f803 	bl	8002c30 <HAL_UART_Init>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f8b7 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000494 	.word	0x20000494
 8000c3c:	40013800 	.word	0x40013800

08000c40 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <MX_USB_PCD_Init+0x48>)
 8000c48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <MX_USB_PCD_Init+0x44>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 ff47 	bl	8001b04 <HAL_PCD_Init>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000c7a:	f000 f891 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000518 	.word	0x20000518
 8000c88:	40005c00 	.word	0x40005c00

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b08b      	sub	sp, #44	; 0x2c
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	2414      	movs	r4, #20
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	0018      	movs	r0, r3
 8000c98:	2314      	movs	r3, #20
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	f003 fbc5 	bl	800442c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	03c9      	lsls	r1, r1, #15
 8000cac:	430a      	orrs	r2, r1
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	03db      	lsls	r3, r3, #15
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0309      	lsls	r1, r1, #12
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cce:	695a      	ldr	r2, [r3, #20]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	031b      	lsls	r3, r3, #12
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	0289      	lsls	r1, r1, #10
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cea:	695a      	ldr	r2, [r3, #20]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	029b      	lsls	r3, r3, #10
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	02c9      	lsls	r1, r1, #11
 8000d00:	430a      	orrs	r2, r1
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	02db      	lsls	r3, r3, #11
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000d12:	4921      	ldr	r1, [pc, #132]	; (8000d98 <MX_GPIO_Init+0x10c>)
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_GPIO_Init+0x110>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fda7 	bl	800186c <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	4a1d      	ldr	r2, [pc, #116]	; (8000d98 <MX_GPIO_Init+0x10c>)
 8000d22:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2201      	movs	r2, #1
 8000d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <MX_GPIO_Init+0x110>)
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	f000 fc1d 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000d42:	0021      	movs	r1, r4
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2206      	movs	r2, #6
 8000d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2290      	movs	r2, #144	; 0x90
 8000d4e:	0352      	lsls	r2, r2, #13
 8000d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	000c      	movs	r4, r1
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <MX_GPIO_Init+0x110>)
 8000d5e:	0019      	movs	r1, r3
 8000d60:	0010      	movs	r0, r2
 8000d62:	f000 fc0b 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d66:	0021      	movs	r1, r4
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2290      	movs	r2, #144	; 0x90
 8000d72:	0352      	lsls	r2, r2, #13
 8000d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	187a      	adds	r2, r7, r1
 8000d7e:	2390      	movs	r3, #144	; 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 fbf9 	bl	800157c <HAL_GPIO_Init>

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b00b      	add	sp, #44	; 0x2c
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	40021000 	.word	0x40021000
 8000d98:	000003e1 	.word	0x000003e1
 8000d9c:	48000800 	.word	0x48000800

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	619a      	str	r2, [r3, #24]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	69da      	ldr	r2, [r3, #28]
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0549      	lsls	r1, r1, #21
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	61da      	str	r2, [r3, #28]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_MspInit+0x44>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	055b      	lsls	r3, r3, #21
 8000de0:	4013      	ands	r3, r2
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	2414      	movs	r4, #20
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	0018      	movs	r0, r3
 8000e02:	2314      	movs	r3, #20
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f003 fb10 	bl	800442c <memset>
  if(hi2c->Instance==I2C2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_I2C_MspInit+0x90>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d132      	bne.n	8000e7c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_I2C_MspInit+0x94>)
 8000e18:	695a      	ldr	r2, [r3, #20]
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_I2C_MspInit+0x94>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	02c9      	lsls	r1, r1, #11
 8000e20:	430a      	orrs	r2, r1
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_I2C_MspInit+0x94>)
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	02db      	lsls	r3, r3, #11
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2212      	movs	r2, #18
 8000e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2201      	movs	r2, #1
 8000e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2201      	movs	r2, #1
 8000e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_I2C_MspInit+0x98>)
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	f000 fb8e 	bl	800157c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_I2C_MspInit+0x94>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_I2C_MspInit+0x94>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	03c9      	lsls	r1, r1, #15
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	61da      	str	r2, [r3, #28]
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_I2C_MspInit+0x94>)
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	03db      	lsls	r3, r3, #15
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b00b      	add	sp, #44	; 0x2c
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	40005800 	.word	0x40005800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400

08000e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	2414      	movs	r4, #20
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	2314      	movs	r3, #20
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f003 fac2 	bl	800442c <memset>
  if(hspi->Instance==SPI2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_SPI_MspInit+0x90>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d132      	bne.n	8000f18 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	01c9      	lsls	r1, r1, #7
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	02c9      	lsls	r1, r1, #11
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_SPI_MspInit+0x94>)
 8000ede:	695a      	ldr	r2, [r3, #20]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	02db      	lsls	r3, r3, #11
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	22e0      	movs	r2, #224	; 0xe0
 8000eee:	0212      	lsls	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	0021      	movs	r1, r4
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2203      	movs	r2, #3
 8000f04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_SPI_MspInit+0x98>)
 8000f10:	0019      	movs	r1, r3
 8000f12:	0010      	movs	r0, r2
 8000f14:	f000 fb32 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b00b      	add	sp, #44	; 0x2c
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	40003800 	.word	0x40003800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000400 	.word	0x48000400

08000f2c <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b08b      	sub	sp, #44	; 0x2c
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2414      	movs	r4, #20
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f003 fa74 	bl	800442c <memset>
  if(htsc->Instance==TSC)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a44      	ldr	r2, [pc, #272]	; (800105c <HAL_TSC_MspInit+0x130>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d000      	beq.n	8000f50 <HAL_TSC_MspInit+0x24>
 8000f4e:	e080      	b.n	8001052 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	0449      	lsls	r1, r1, #17
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	4b40      	ldr	r3, [pc, #256]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	045b      	lsls	r3, r3, #17
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0289      	lsls	r1, r1, #10
 8000f76:	430a      	orrs	r2, r1
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	02c9      	lsls	r1, r1, #11
 8000f92:	430a      	orrs	r2, r1
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <HAL_TSC_MspInit+0x134>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	02db      	lsls	r3, r3, #11
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2244      	movs	r2, #68	; 0x44
 8000fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2202      	movs	r2, #2
 8000fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	193a      	adds	r2, r7, r4
 8000fc4:	2390      	movs	r3, #144	; 0x90
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fad6 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2288      	movs	r2, #136	; 0x88
 8000fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	2212      	movs	r2, #18
 8000fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2203      	movs	r2, #3
 8000fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	193a      	adds	r2, r7, r4
 8000ff0:	2390      	movs	r3, #144	; 0x90
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fac0 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2202      	movs	r2, #2
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	193b      	adds	r3, r7, r4
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	193b      	adds	r3, r7, r4
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2203      	movs	r2, #3
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	193b      	adds	r3, r7, r4
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <HAL_TSC_MspInit+0x138>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f000 faab 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001026:	0021      	movs	r1, r4
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2202      	movs	r2, #2
 800102c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2212      	movs	r2, #18
 8001032:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2203      	movs	r2, #3
 8001044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	187b      	adds	r3, r7, r1
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_TSC_MspInit+0x138>)
 800104a:	0019      	movs	r1, r3
 800104c:	0010      	movs	r0, r2
 800104e:	f000 fa95 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b00b      	add	sp, #44	; 0x2c
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	40024000 	.word	0x40024000
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08b      	sub	sp, #44	; 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	2414      	movs	r4, #20
 8001072:	193b      	adds	r3, r7, r4
 8001074:	0018      	movs	r0, r3
 8001076:	2314      	movs	r3, #20
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	f003 f9d6 	bl	800442c <memset>
  if(huart->Instance==USART1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <HAL_UART_MspInit+0xa4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d13b      	bne.n	8001102 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_UART_MspInit+0xa8>)
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_UART_MspInit+0xa8>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	01c9      	lsls	r1, r1, #7
 8001094:	430a      	orrs	r2, r1
 8001096:	619a      	str	r2, [r3, #24]
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_UART_MspInit+0xa8>)
 800109a:	699a      	ldr	r2, [r3, #24]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	01db      	lsls	r3, r3, #7
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_UART_MspInit+0xa8>)
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_UART_MspInit+0xa8>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0289      	lsls	r1, r1, #10
 80010b0:	430a      	orrs	r2, r1
 80010b2:	615a      	str	r2, [r3, #20]
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_UART_MspInit+0xa8>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	22c0      	movs	r2, #192	; 0xc0
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	0021      	movs	r1, r4
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2202      	movs	r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2203      	movs	r2, #3
 80010dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2201      	movs	r2, #1
 80010e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	187a      	adds	r2, r7, r1
 80010e6:	2390      	movs	r3, #144	; 0x90
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fa45 	bl	800157c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	201b      	movs	r0, #27
 80010f8:	f000 f990 	bl	800141c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010fc:	201b      	movs	r0, #27
 80010fe:	f000 f9a2 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b00b      	add	sp, #44	; 0x2c
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40013800 	.word	0x40013800
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_PCD_MspInit+0x38>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10d      	bne.n	8001142 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_PCD_MspInit+0x3c>)
 8001128:	69da      	ldr	r2, [r3, #28]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_PCD_MspInit+0x3c>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0409      	lsls	r1, r1, #16
 8001130:	430a      	orrs	r2, r1
 8001132:	61da      	str	r2, [r3, #28]
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_PCD_MspInit+0x3c>)
 8001136:	69da      	ldr	r2, [r3, #28]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40005c00 	.word	0x40005c00
 8001150:	40021000 	.word	0x40021000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f888 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <USART1_IRQHandler+0x14>)
 800118a:	0018      	movs	r0, r3
 800118c:	f001 ff30 	bl	8002ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000494 	.word	0x20000494

0800119c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopForever+0xe>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopForever+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011d2:	f7ff ffe3 	bl	800119c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011d6:	f003 f905 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fbaf 	bl	800093c <main>

080011de <LoopForever>:

LoopForever:
    b LoopForever
 80011de:	e7fe      	b.n	80011de <LoopForever>
  ldr   r0, =_estack
 80011e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80011ec:	0800453c 	.word	0x0800453c
  ldr r2, =_sbss
 80011f0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80011f4:	20000810 	.word	0x20000810

080011f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_COMP_IRQHandler>
	...

080011fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_Init+0x24>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_Init+0x24>)
 8001206:	2110      	movs	r1, #16
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f809 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001212:	f7ff fdcb 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_InitTick+0x5c>)
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_InitTick+0x60>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	0019      	movs	r1, r3
 8001236:	23fa      	movs	r3, #250	; 0xfa
 8001238:	0098      	lsls	r0, r3, #2
 800123a:	f7fe ff65 	bl	8000108 <__udivsi3>
 800123e:	0003      	movs	r3, r0
 8001240:	0019      	movs	r1, r3
 8001242:	0020      	movs	r0, r4
 8001244:	f7fe ff60 	bl	8000108 <__udivsi3>
 8001248:	0003      	movs	r3, r0
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f90b 	bl	8001466 <HAL_SYSTICK_Config>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e00f      	b.n	8001278 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d80b      	bhi.n	8001276 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	425b      	negs	r3, r3
 8001264:	2200      	movs	r2, #0
 8001266:	0018      	movs	r0, r3
 8001268:	f000 f8d8 	bl	800141c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_InitTick+0x64>)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b003      	add	sp, #12
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	200000a8 	.word	0x200000a8
 8001284:	200000b0 	.word	0x200000b0
 8001288:	200000ac 	.word	0x200000ac

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	18d2      	adds	r2, r2, r3
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_IncTick+0x20>)
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	200000b0 	.word	0x200000b0
 80012ac:	2000080c 	.word	0x2000080c

080012b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	2000080c 	.word	0x2000080c

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b7f      	cmp	r3, #127	; 0x7f
 80012d6:	d809      	bhi.n	80012ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	001a      	movs	r2, r3
 80012de:	231f      	movs	r3, #31
 80012e0:	401a      	ands	r2, r3
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_EnableIRQ+0x30>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	4091      	lsls	r1, r2
 80012e8:	000a      	movs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
  }
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	0002      	movs	r2, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b7f      	cmp	r3, #127	; 0x7f
 800130c:	d828      	bhi.n	8001360 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <__NVIC_SetPriority+0xd4>)
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	33c0      	adds	r3, #192	; 0xc0
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	589b      	ldr	r3, [r3, r2]
 800131e:	1dfa      	adds	r2, r7, #7
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	0011      	movs	r1, r2
 8001324:	2203      	movs	r2, #3
 8001326:	400a      	ands	r2, r1
 8001328:	00d2      	lsls	r2, r2, #3
 800132a:	21ff      	movs	r1, #255	; 0xff
 800132c:	4091      	lsls	r1, r2
 800132e:	000a      	movs	r2, r1
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	401a      	ands	r2, r3
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	2303      	movs	r3, #3
 8001346:	4003      	ands	r3, r0
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	481f      	ldr	r0, [pc, #124]	; (80013cc <__NVIC_SetPriority+0xd4>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	430a      	orrs	r2, r1
 8001358:	33c0      	adds	r3, #192	; 0xc0
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800135e:	e031      	b.n	80013c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <__NVIC_SetPriority+0xd8>)
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	0019      	movs	r1, r3
 8001368:	230f      	movs	r3, #15
 800136a:	400b      	ands	r3, r1
 800136c:	3b08      	subs	r3, #8
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3306      	adds	r3, #6
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	18d3      	adds	r3, r2, r3
 8001376:	3304      	adds	r3, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1dfa      	adds	r2, r7, #7
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	0011      	movs	r1, r2
 8001380:	2203      	movs	r2, #3
 8001382:	400a      	ands	r2, r1
 8001384:	00d2      	lsls	r2, r2, #3
 8001386:	21ff      	movs	r1, #255	; 0xff
 8001388:	4091      	lsls	r1, r2
 800138a:	000a      	movs	r2, r1
 800138c:	43d2      	mvns	r2, r2
 800138e:	401a      	ands	r2, r3
 8001390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	019b      	lsls	r3, r3, #6
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	401a      	ands	r2, r3
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	0018      	movs	r0, r3
 80013a0:	2303      	movs	r3, #3
 80013a2:	4003      	ands	r3, r0
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <__NVIC_SetPriority+0xd8>)
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	001c      	movs	r4, r3
 80013b0:	230f      	movs	r3, #15
 80013b2:	4023      	ands	r3, r4
 80013b4:	3b08      	subs	r3, #8
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	430a      	orrs	r2, r1
 80013ba:	3306      	adds	r3, #6
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	18c3      	adds	r3, r0, r3
 80013c0:	3304      	adds	r3, #4
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b003      	add	sp, #12
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	1e5a      	subs	r2, r3, #1
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	045b      	lsls	r3, r3, #17
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d301      	bcc.n	80013ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e8:	2301      	movs	r3, #1
 80013ea:	e010      	b.n	800140e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <SysTick_Config+0x44>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	3a01      	subs	r2, #1
 80013f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f4:	2301      	movs	r3, #1
 80013f6:	425b      	negs	r3, r3
 80013f8:	2103      	movs	r1, #3
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff ff7c 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x44>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x44>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	210f      	movs	r1, #15
 8001428:	187b      	adds	r3, r7, r1
 800142a:	1c02      	adds	r2, r0, #0
 800142c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	187b      	adds	r3, r7, r1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b25b      	sxtb	r3, r3
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	0002      	movs	r2, r0
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b25b      	sxtb	r3, r3
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ff33 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff ffaf 	bl	80013d4 <SysTick_Config>
 8001476:	0003      	movs	r3, r0
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2221      	movs	r2, #33	; 0x21
 800148c:	5c9b      	ldrb	r3, [r3, r2]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d008      	beq.n	80014a6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2204      	movs	r2, #4
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2220      	movs	r2, #32
 800149e:	2100      	movs	r1, #0
 80014a0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e020      	b.n	80014e8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	210e      	movs	r1, #14
 80014b2:	438a      	bics	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	438a      	bics	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2101      	movs	r1, #1
 80014d0:	4091      	lsls	r1, r2
 80014d2:	000a      	movs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2221      	movs	r2, #33	; 0x21
 80014da:	2101      	movs	r1, #1
 80014dc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	210f      	movs	r1, #15
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2221      	movs	r2, #33	; 0x21
 8001504:	5c9b      	ldrb	r3, [r3, r2]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d006      	beq.n	800151a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2204      	movs	r2, #4
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e028      	b.n	800156c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	210e      	movs	r1, #14
 8001526:	438a      	bics	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	438a      	bics	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001542:	2101      	movs	r1, #1
 8001544:	4091      	lsls	r1, r2
 8001546:	000a      	movs	r2, r1
 8001548:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2221      	movs	r2, #33	; 0x21
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	0010      	movs	r0, r2
 800156a:	4798      	blx	r3
    } 
  }
  return status;
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b004      	add	sp, #16
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e155      	b.n	8001838 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <HAL_GPIO_Init+0x28>
 80015a2:	e146      	b.n	8001832 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	2201      	movs	r2, #1
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	4013      	ands	r3, r2
 8001626:	2b03      	cmp	r3, #3
 8001628:	d017      	beq.n	800165a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2203      	movs	r2, #3
 8001660:	4013      	ands	r3, r2
 8001662:	2b02      	cmp	r3, #2
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	58d3      	ldr	r3, [r2, r3]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2207      	movs	r2, #7
 8001678:	4013      	ands	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2107      	movs	r1, #7
 8001692:	400b      	ands	r3, r1
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	6939      	ldr	r1, [r7, #16]
 80016ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2203      	movs	r2, #3
 80016cc:	401a      	ands	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	029b      	lsls	r3, r3, #10
 80016ea:	4013      	ands	r3, r2
 80016ec:	d100      	bne.n	80016f0 <HAL_GPIO_Init+0x174>
 80016ee:	e0a0      	b.n	8001832 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_GPIO_Init+0x2d4>)
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_GPIO_Init+0x2d4>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	4b54      	ldr	r3, [pc, #336]	; (8001850 <HAL_GPIO_Init+0x2d4>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2201      	movs	r2, #1
 8001702:	4013      	ands	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	589b      	ldr	r3, [r3, r2]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2203      	movs	r2, #3
 800171a:	4013      	ands	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	409a      	lsls	r2, r3
 8001722:	0013      	movs	r3, r2
 8001724:	43da      	mvns	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	2390      	movs	r3, #144	; 0x90
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	429a      	cmp	r2, r3
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x1ee>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_GPIO_Init+0x2dc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x1ea>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a46      	ldr	r2, [pc, #280]	; (800185c <HAL_GPIO_Init+0x2e0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x1e6>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <HAL_GPIO_Init+0x2e4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x1e2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a44      	ldr	r2, [pc, #272]	; (8001864 <HAL_GPIO_Init+0x2e8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x1de>
 8001756:	2304      	movs	r3, #4
 8001758:	e008      	b.n	800176c <HAL_GPIO_Init+0x1f0>
 800175a:	2305      	movs	r3, #5
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x1f0>
 800175e:	2303      	movs	r3, #3
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x1f0>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x1f0>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x1f0>
 800176a:	2300      	movs	r3, #0
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	2103      	movs	r1, #3
 8001770:	400a      	ands	r2, r1
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800177c:	4935      	ldr	r1, [pc, #212]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178a:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4013      	ands	r3, r2
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	035b      	lsls	r3, r3, #13
 80017f6:	4013      	ands	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	039b      	lsls	r3, r3, #14
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	40da      	lsrs	r2, r3
 8001840:	1e13      	subs	r3, r2, #0
 8001842:	d000      	beq.n	8001846 <HAL_GPIO_Init+0x2ca>
 8001844:	e6a2      	b.n	800158c <HAL_GPIO_Init+0x10>
  } 
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800
 8001860:	48000c00 	.word	0x48000c00
 8001864:	48001000 	.word	0x48001000
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	0008      	movs	r0, r1
 8001876:	0011      	movs	r1, r2
 8001878:	1cbb      	adds	r3, r7, #2
 800187a:	1c02      	adds	r2, r0, #0
 800187c:	801a      	strh	r2, [r3, #0]
 800187e:	1c7b      	adds	r3, r7, #1
 8001880:	1c0a      	adds	r2, r1, #0
 8001882:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	1c7b      	adds	r3, r7, #1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800188c:	1cbb      	adds	r3, r7, #2
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001896:	1cbb      	adds	r3, r7, #2
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e082      	b.n	80019c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2241      	movs	r2, #65	; 0x41
 80018be:	5c9b      	ldrb	r3, [r3, r2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff fa8f 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2241      	movs	r2, #65	; 0x41
 80018da:	2124      	movs	r1, #36	; 0x24
 80018dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	438a      	bics	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_I2C_Init+0x120>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4931      	ldr	r1, [pc, #196]	; (80019cc <HAL_I2C_Init+0x124>)
 8001908:	400a      	ands	r2, r1
 800190a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0209      	lsls	r1, r1, #8
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	e007      	b.n	8001936 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2184      	movs	r1, #132	; 0x84
 8001930:	0209      	lsls	r1, r1, #8
 8001932:	430a      	orrs	r2, r1
 8001934:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d104      	bne.n	8001948 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	491f      	ldr	r1, [pc, #124]	; (80019d0 <HAL_I2C_Init+0x128>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	491a      	ldr	r1, [pc, #104]	; (80019cc <HAL_I2C_Init+0x124>)
 8001964:	400a      	ands	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	431a      	orrs	r2, r3
 8001972:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69d9      	ldr	r1, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2241      	movs	r2, #65	; 0x41
 80019ac:	2120      	movs	r1, #32
 80019ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2242      	movs	r2, #66	; 0x42
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	f0ffffff 	.word	0xf0ffffff
 80019cc:	ffff7fff 	.word	0xffff7fff
 80019d0:	02008000 	.word	0x02008000

080019d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2241      	movs	r2, #65	; 0x41
 80019e2:	5c9b      	ldrb	r3, [r3, r2]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d138      	bne.n	8001a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2240      	movs	r2, #64	; 0x40
 80019ee:	5c9b      	ldrb	r3, [r3, r2]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e032      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	2101      	movs	r1, #1
 80019fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2241      	movs	r2, #65	; 0x41
 8001a04:	2124      	movs	r1, #36	; 0x24
 8001a06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4911      	ldr	r1, [pc, #68]	; (8001a68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2241      	movs	r2, #65	; 0x41
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	ffffefff 	.word	0xffffefff

08001a6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2241      	movs	r2, #65	; 0x41
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d139      	bne.n	8001af6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e033      	b.n	8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2101      	movs	r1, #1
 8001a96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2241      	movs	r2, #65	; 0x41
 8001a9c:	2124      	movs	r1, #36	; 0x24
 8001a9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	438a      	bics	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2241      	movs	r2, #65	; 0x41
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2240      	movs	r2, #64	; 0x40
 8001aee:	2100      	movs	r1, #0
 8001af0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
  }
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	fffff0ff 	.word	0xfffff0ff

08001b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b08b      	sub	sp, #44	; 0x2c
 8001b08:	af06      	add	r7, sp, #24
 8001b0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0ff      	b.n	8001d16 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a81      	ldr	r2, [pc, #516]	; (8001d20 <HAL_PCD_Init+0x21c>)
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	23aa      	movs	r3, #170	; 0xaa
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	2100      	movs	r1, #0
 8001b2a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff faf0 	bl	8001114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a7a      	ldr	r2, [pc, #488]	; (8001d20 <HAL_PCD_Init+0x21c>)
 8001b38:	2103      	movs	r1, #3
 8001b3a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f002 fc0d 	bl	8004360 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b46:	230f      	movs	r3, #15
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e058      	b.n	8001c02 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b50:	200f      	movs	r0, #15
 8001b52:	183b      	adds	r3, r7, r0
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	189b      	adds	r3, r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	18cb      	adds	r3, r1, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	0013      	movs	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	183a      	adds	r2, r7, r0
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b80:	0004      	movs	r4, r0
 8001b82:	183b      	adds	r3, r7, r0
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	193b      	adds	r3, r7, r4
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	0013      	movs	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	189b      	adds	r3, r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	18cb      	adds	r3, r1, r3
 8001b98:	3336      	adds	r3, #54	; 0x36
 8001b9a:	1c02      	adds	r2, r0, #0
 8001b9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	18cb      	adds	r3, r1, r3
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	189b      	adds	r3, r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	18cb      	adds	r3, r1, r3
 8001bc6:	3338      	adds	r3, #56	; 0x38
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	189b      	adds	r3, r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	18cb      	adds	r3, r1, r3
 8001bdc:	333c      	adds	r3, #60	; 0x3c
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	0013      	movs	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	189b      	adds	r3, r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	18cb      	adds	r3, r1, r3
 8001bf2:	3340      	adds	r3, #64	; 0x40
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	3201      	adds	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	210f      	movs	r1, #15
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d39f      	bcc.n	8001b50 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e056      	b.n	8001cc6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c18:	240f      	movs	r4, #15
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	236a      	movs	r3, #106	; 0x6a
 8001c22:	33ff      	adds	r3, #255	; 0xff
 8001c24:	0019      	movs	r1, r3
 8001c26:	0013      	movs	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	189b      	adds	r3, r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	18c3      	adds	r3, r0, r3
 8001c30:	185b      	adds	r3, r3, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	23b4      	movs	r3, #180	; 0xb4
 8001c3e:	0059      	lsls	r1, r3, #1
 8001c40:	0013      	movs	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	18c3      	adds	r3, r0, r3
 8001c4a:	185b      	adds	r3, r3, r1
 8001c4c:	193a      	adds	r2, r7, r4
 8001c4e:	7812      	ldrb	r2, [r2, #0]
 8001c50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	236c      	movs	r3, #108	; 0x6c
 8001c5a:	33ff      	adds	r3, #255	; 0xff
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	189b      	adds	r3, r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	18c3      	adds	r3, r0, r3
 8001c68:	185b      	adds	r3, r3, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c6e:	193b      	adds	r3, r7, r4
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	23bc      	movs	r3, #188	; 0xbc
 8001c76:	0059      	lsls	r1, r3, #1
 8001c78:	0013      	movs	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	189b      	adds	r3, r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	18c3      	adds	r3, r0, r3
 8001c82:	185b      	adds	r3, r3, r1
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	23be      	movs	r3, #190	; 0xbe
 8001c90:	0059      	lsls	r1, r3, #1
 8001c92:	0013      	movs	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	189b      	adds	r3, r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	18c3      	adds	r3, r0, r3
 8001c9c:	185b      	adds	r3, r3, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	23c0      	movs	r3, #192	; 0xc0
 8001caa:	0059      	lsls	r1, r3, #1
 8001cac:	0013      	movs	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	189b      	adds	r3, r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	18c3      	adds	r3, r0, r3
 8001cb6:	185b      	adds	r3, r3, r1
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	3201      	adds	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3a1      	bcc.n	8001c18 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	466a      	mov	r2, sp
 8001cdc:	0011      	movs	r1, r2
 8001cde:	001a      	movs	r2, r3
 8001ce0:	3210      	adds	r2, #16
 8001ce2:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001ce4:	c170      	stmia	r1!, {r4, r5, r6}
 8001ce6:	ca30      	ldmia	r2!, {r4, r5}
 8001ce8:	c130      	stmia	r1!, {r4, r5}
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f002 fb50 	bl	8004394 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2224      	movs	r2, #36	; 0x24
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_PCD_Init+0x21c>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d103      	bne.n	8001d14 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f808 	bl	8001d24 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b005      	add	sp, #20
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	000002a9 	.word	0x000002a9

08001d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	23ba      	movs	r3, #186	; 0xba
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	2101      	movs	r1, #1
 8001d3a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	23b8      	movs	r3, #184	; 0xb8
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	2100      	movs	r1, #0
 8001d44:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2254      	movs	r2, #84	; 0x54
 8001d4a:	5a9b      	ldrh	r3, [r3, r2]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b299      	uxth	r1, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2254      	movs	r2, #84	; 0x54
 8001d58:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2254      	movs	r2, #84	; 0x54
 8001d5e:	5a9b      	ldrh	r3, [r3, r2]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2202      	movs	r2, #2
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b299      	uxth	r1, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2254      	movs	r2, #84	; 0x54
 8001d6c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f000 fb76 	bl	8002478 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d100      	bne.n	8001d98 <HAL_RCC_OscConfig+0x20>
 8001d96:	e08e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d98:	4bc5      	ldr	r3, [pc, #788]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	220c      	movs	r2, #12
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d00e      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da4:	4bc2      	ldr	r3, [pc, #776]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	220c      	movs	r2, #12
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d117      	bne.n	8001de0 <HAL_RCC_OscConfig+0x68>
 8001db0:	4bbf      	ldr	r3, [pc, #764]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	401a      	ands	r2, r3
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d10e      	bne.n	8001de0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4bbb      	ldr	r3, [pc, #748]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x58>
 8001dce:	e071      	b.n	8001eb4 <HAL_RCC_OscConfig+0x13c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d000      	beq.n	8001dda <HAL_RCC_OscConfig+0x62>
 8001dd8:	e06c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f000 fb4c 	bl	8002478 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x80>
 8001de8:	4bb1      	ldr	r3, [pc, #708]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4bb0      	ldr	r3, [pc, #704]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	0249      	lsls	r1, r1, #9
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e02f      	b.n	8001e58 <HAL_RCC_OscConfig+0xe0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0xa2>
 8001e00:	4bab      	ldr	r3, [pc, #684]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4baa      	ldr	r3, [pc, #680]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e06:	49ab      	ldr	r1, [pc, #684]	; (80020b4 <HAL_RCC_OscConfig+0x33c>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4ba8      	ldr	r3, [pc, #672]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4ba7      	ldr	r3, [pc, #668]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e12:	49a9      	ldr	r1, [pc, #676]	; (80020b8 <HAL_RCC_OscConfig+0x340>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e01e      	b.n	8001e58 <HAL_RCC_OscConfig+0xe0>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d10e      	bne.n	8001e40 <HAL_RCC_OscConfig+0xc8>
 8001e22:	4ba3      	ldr	r3, [pc, #652]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4ba2      	ldr	r3, [pc, #648]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	02c9      	lsls	r1, r1, #11
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b9f      	ldr	r3, [pc, #636]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xe0>
 8001e40:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b9a      	ldr	r3, [pc, #616]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e46:	499b      	ldr	r1, [pc, #620]	; (80020b4 <HAL_RCC_OscConfig+0x33c>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b98      	ldr	r3, [pc, #608]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e52:	4999      	ldr	r1, [pc, #612]	; (80020b8 <HAL_RCC_OscConfig+0x340>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d014      	beq.n	8001e8a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fa26 	bl	80012b0 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6a:	f7ff fa21 	bl	80012b0 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	; 0x64
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e2fd      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0xf2>
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa11 	bl	80012b0 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fa0c 	bl	80012b0 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e2e8      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x11c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x14a>
 8001ec0:	e06c      	b.n	8001f9c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d00e      	beq.n	8001eea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ecc:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d11f      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1a0>
 8001ed8:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_OscConfig+0x188>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e2bb      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	22f8      	movs	r2, #248	; 0xf8
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e041      	b.n	8001f9c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d024      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f9c0 	bl	80012b0 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff f9bb 	bl	80012b0 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e297      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f1      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	22f8      	movs	r2, #248	; 0xf8
 8001f58:	4393      	bics	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00da      	lsls	r2, r3, #3
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff f99b 	bl	80012b0 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff f996 	bl	80012b0 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e272      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d1f1      	bne.n	8001f80 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d036      	beq.n	8002014 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f979 	bl	80012b0 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f974 	bl	80012b0 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e250      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0f1      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x24c>
 8001fe0:	e018      	b.n	8002014 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	438a      	bics	r2, r1
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff f95f 	bl	80012b0 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f95a 	bl	80012b0 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e236      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d1f1      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2204      	movs	r2, #4
 800201a:	4013      	ands	r3, r2
 800201c:	d100      	bne.n	8002020 <HAL_RCC_OscConfig+0x2a8>
 800201e:	e0b5      	b.n	800218c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002020:	201f      	movs	r0, #31
 8002022:	183b      	adds	r3, r7, r0
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	d110      	bne.n	8002056 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	0549      	lsls	r1, r1, #21
 800203e:	430a      	orrs	r2, r1
 8002040:	61da      	str	r2, [r3, #28]
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	055b      	lsls	r3, r3, #21
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002050:	183b      	adds	r3, r7, r0
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_OscConfig+0x344>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d11a      	bne.n	8002098 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_RCC_OscConfig+0x344>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_RCC_OscConfig+0x344>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0049      	lsls	r1, r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002070:	f7ff f91e 	bl	80012b0 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff f919 	bl	80012b0 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1f5      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x344>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10f      	bne.n	80020c0 <HAL_RCC_OscConfig+0x348>
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	430a      	orrs	r2, r1
 80020aa:	621a      	str	r2, [r3, #32]
 80020ac:	e036      	b.n	800211c <HAL_RCC_OscConfig+0x3a4>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	fffeffff 	.word	0xfffeffff
 80020b8:	fffbffff 	.word	0xfffbffff
 80020bc:	40007000 	.word	0x40007000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x36a>
 80020c8:	4bca      	ldr	r3, [pc, #808]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	6a1a      	ldr	r2, [r3, #32]
 80020cc:	4bc9      	ldr	r3, [pc, #804]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	438a      	bics	r2, r1
 80020d2:	621a      	str	r2, [r3, #32]
 80020d4:	4bc7      	ldr	r3, [pc, #796]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	4bc6      	ldr	r3, [pc, #792]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020da:	2104      	movs	r1, #4
 80020dc:	438a      	bics	r2, r1
 80020de:	621a      	str	r2, [r3, #32]
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x3a4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x38c>
 80020ea:	4bc2      	ldr	r3, [pc, #776]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020ec:	6a1a      	ldr	r2, [r3, #32]
 80020ee:	4bc1      	ldr	r3, [pc, #772]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020f0:	2104      	movs	r1, #4
 80020f2:	430a      	orrs	r2, r1
 80020f4:	621a      	str	r2, [r3, #32]
 80020f6:	4bbf      	ldr	r3, [pc, #764]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	4bbe      	ldr	r3, [pc, #760]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	621a      	str	r2, [r3, #32]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0x3a4>
 8002104:	4bbb      	ldr	r3, [pc, #748]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	4bba      	ldr	r3, [pc, #744]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800210a:	2101      	movs	r1, #1
 800210c:	438a      	bics	r2, r1
 800210e:	621a      	str	r2, [r3, #32]
 8002110:	4bb8      	ldr	r3, [pc, #736]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	4bb7      	ldr	r3, [pc, #732]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002116:	2104      	movs	r1, #4
 8002118:	438a      	bics	r2, r1
 800211a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d014      	beq.n	800214e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff f8c4 	bl	80012b0 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e009      	b.n	8002142 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff f8bf 	bl	80012b0 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4aaf      	ldr	r2, [pc, #700]	; (80023f8 <HAL_RCC_OscConfig+0x680>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e19a      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	4bac      	ldr	r3, [pc, #688]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x3b6>
 800214c:	e013      	b.n	8002176 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7ff f8af 	bl	80012b0 <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	e009      	b.n	800216c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff f8aa 	bl	80012b0 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	4aa5      	ldr	r2, [pc, #660]	; (80023f8 <HAL_RCC_OscConfig+0x680>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e185      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	4ba1      	ldr	r3, [pc, #644]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002176:	231f      	movs	r3, #31
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b9c      	ldr	r3, [pc, #624]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	4b9b      	ldr	r3, [pc, #620]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002186:	499d      	ldr	r1, [pc, #628]	; (80023fc <HAL_RCC_OscConfig+0x684>)
 8002188:	400a      	ands	r2, r1
 800218a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2210      	movs	r2, #16
 8002192:	4013      	ands	r3, r2
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d12a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a2:	4b94      	ldr	r3, [pc, #592]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	2104      	movs	r1, #4
 80021a6:	430a      	orrs	r2, r1
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021aa:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ae:	4b91      	ldr	r3, [pc, #580]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f87b 	bl	80012b0 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021c0:	f7ff f876 	bl	80012b0 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e152      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021dc:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	22f8      	movs	r2, #248	; 0xf8
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
 80021f2:	e034      	b.n	800225e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	3305      	adds	r3, #5
 80021fa:	d111      	bne.n	8002220 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021fc:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002202:	2104      	movs	r1, #4
 8002204:	438a      	bics	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002208:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	22f8      	movs	r2, #248	; 0xf8
 800220e:	4393      	bics	r3, r2
 8002210:	0019      	movs	r1, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	00da      	lsls	r2, r3, #3
 8002218:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
 800221e:	e01e      	b.n	800225e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002220:	4b74      	ldr	r3, [pc, #464]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002224:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002226:	2104      	movs	r1, #4
 8002228:	430a      	orrs	r2, r1
 800222a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800222c:	4b71      	ldr	r3, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800222e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002230:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002232:	2101      	movs	r1, #1
 8002234:	438a      	bics	r2, r1
 8002236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff f83a 	bl	80012b0 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002242:	f7ff f835 	bl	80012b0 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e111      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002254:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d1f1      	bne.n	8002242 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2220      	movs	r2, #32
 8002264:	4013      	ands	r3, r2
 8002266:	d05c      	beq.n	8002322 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002268:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	220c      	movs	r2, #12
 800226e:	4013      	ands	r3, r2
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d00e      	beq.n	8002292 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002274:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	220c      	movs	r2, #12
 800227a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800227c:	2b08      	cmp	r3, #8
 800227e:	d114      	bne.n	80022aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002280:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	23c0      	movs	r3, #192	; 0xc0
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	401a      	ands	r2, r3
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	025b      	lsls	r3, r3, #9
 800228e:	429a      	cmp	r2, r3
 8002290:	d10b      	bne.n	80022aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002292:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	4013      	ands	r3, r2
 800229c:	d040      	beq.n	8002320 <HAL_RCC_OscConfig+0x5a8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d03c      	beq.n	8002320 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0e6      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01b      	beq.n	80022ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022b2:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80022b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b6:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	0249      	lsls	r1, r1, #9
 80022bc:	430a      	orrs	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fff6 	bl	80012b0 <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ca:	f7fe fff1 	bl	80012b0 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0cd      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022dc:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80022de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	4013      	ands	r3, r2
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x552>
 80022e8:	e01b      	b.n	8002322 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022ea:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80022ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	4943      	ldr	r1, [pc, #268]	; (8002400 <HAL_RCC_OscConfig+0x688>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe ffdb 	bl	80012b0 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002300:	f7fe ffd6 	bl	80012b0 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0b2      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	4013      	ands	r3, r2
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x588>
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002320:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d100      	bne.n	800232c <HAL_RCC_OscConfig+0x5b4>
 800232a:	e0a4      	b.n	8002476 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	220c      	movs	r2, #12
 8002332:	4013      	ands	r3, r2
 8002334:	2b08      	cmp	r3, #8
 8002336:	d100      	bne.n	800233a <HAL_RCC_OscConfig+0x5c2>
 8002338:	e078      	b.n	800242c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b02      	cmp	r3, #2
 8002340:	d14c      	bne.n	80023dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002348:	492e      	ldr	r1, [pc, #184]	; (8002404 <HAL_RCC_OscConfig+0x68c>)
 800234a:	400a      	ands	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe ffaf 	bl	80012b0 <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe ffaa 	bl	80012b0 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e086      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	049b      	lsls	r3, r3, #18
 8002372:	4013      	ands	r3, r2
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	220f      	movs	r2, #15
 800237c:	4393      	bics	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 8002386:	430a      	orrs	r2, r1
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x690>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	431a      	orrs	r2, r3
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0449      	lsls	r1, r1, #17
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe ff7d 	bl	80012b0 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe ff78 	bl	80012b0 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e054      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	049b      	lsls	r3, r3, #18
 80023d6:	4013      	ands	r3, r2
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x644>
 80023da:	e04c      	b.n	8002476 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <HAL_RCC_OscConfig+0x68c>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff62 	bl	80012b0 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x6a6>
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000
 80023f8:	00001388 	.word	0x00001388
 80023fc:	efffffff 	.word	0xefffffff
 8002400:	fffeffff 	.word	0xfffeffff
 8002404:	feffffff 	.word	0xfeffffff
 8002408:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe ff50 	bl	80012b0 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e02c      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_RCC_OscConfig+0x708>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	049b      	lsls	r3, r3, #18
 8002426:	4013      	ands	r3, r2
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x694>
 800242a:	e024      	b.n	8002476 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e01f      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_RCC_OscConfig+0x708>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0x708>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	23c0      	movs	r3, #192	; 0xc0
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	429a      	cmp	r2, r3
 8002452:	d10e      	bne.n	8002472 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	220f      	movs	r2, #15
 8002458:	401a      	ands	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d107      	bne.n	8002472 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	23f0      	movs	r3, #240	; 0xf0
 8002466:	039b      	lsls	r3, r3, #14
 8002468:	401a      	ands	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b008      	add	sp, #32
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0bf      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d911      	bls.n	80024ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4393      	bics	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0a6      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	d015      	beq.n	8002500 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2204      	movs	r2, #4
 80024da:	4013      	ands	r3, r2
 80024dc:	d006      	beq.n	80024ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024de:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80024e4:	21e0      	movs	r1, #224	; 0xe0
 80024e6:	00c9      	lsls	r1, r1, #3
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	22f0      	movs	r2, #240	; 0xf0
 80024f2:	4393      	bics	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	d04c      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b44      	ldr	r3, [pc, #272]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	d120      	bne.n	8002560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07a      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	049b      	lsls	r3, r3, #18
 8002532:	4013      	ands	r3, r2
 8002534:	d114      	bne.n	8002560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06e      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	025b      	lsls	r3, r3, #9
 800254a:	4013      	ands	r3, r2
 800254c:	d108      	bne.n	8002560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e062      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2202      	movs	r2, #2
 8002558:	4013      	ands	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e05b      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002560:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2203      	movs	r2, #3
 8002566:	4393      	bics	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7fe fe9c 	bl	80012b0 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257c:	e009      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f7fe fe97 	bl	80012b0 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_RCC_ClockConfig+0x1a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e042      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	220c      	movs	r2, #12
 8002598:	401a      	ands	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1ec      	bne.n	800257e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d211      	bcs.n	80025d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4393      	bics	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_ClockConfig+0x19c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e020      	b.n	8002618 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2204      	movs	r2, #4
 80025dc:	4013      	ands	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_RCC_ClockConfig+0x1a8>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025f4:	f000 f820 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025f8:	0001      	movs	r1, r0
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1a0>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	220f      	movs	r2, #15
 8002602:	4013      	ands	r3, r2
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1ac>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	000a      	movs	r2, r1
 800260a:	40da      	lsrs	r2, r3
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1b0>)
 800260e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe fe07 	bl	8001224 <HAL_InitTick>
  
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40022000 	.word	0x40022000
 8002624:	40021000 	.word	0x40021000
 8002628:	00001388 	.word	0x00001388
 800262c:	fffff8ff 	.word	0xfffff8ff
 8002630:	0800451c 	.word	0x0800451c
 8002634:	200000a8 	.word	0x200000a8

08002638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b08f      	sub	sp, #60	; 0x3c
 800263c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800263e:	2314      	movs	r3, #20
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	4a38      	ldr	r2, [pc, #224]	; (8002724 <HAL_RCC_GetSysClockFreq+0xec>)
 8002644:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002646:	c313      	stmia	r3!, {r0, r1, r4}
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	4a36      	ldr	r2, [pc, #216]	; (8002728 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002650:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002652:	c313      	stmia	r3!, {r0, r1, r4}
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_GetSysClockFreq+0xf4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	220c      	movs	r2, #12
 8002676:	4013      	ands	r3, r2
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d047      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0xd4>
 800267c:	d849      	bhi.n	8002712 <HAL_RCC_GetSysClockFreq+0xda>
 800267e:	2b04      	cmp	r3, #4
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x50>
 8002682:	2b08      	cmp	r3, #8
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x56>
 8002686:	e044      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800268c:	e044      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	220f      	movs	r2, #15
 8002694:	4013      	ands	r3, r2
 8002696:	2214      	movs	r2, #20
 8002698:	18ba      	adds	r2, r7, r2
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCC_GetSysClockFreq+0xf4>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	220f      	movs	r2, #15
 80026a4:	4013      	ands	r3, r2
 80026a6:	1d3a      	adds	r2, r7, #4
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ae:	23c0      	movs	r3, #192	; 0xc0
 80026b0:	025b      	lsls	r3, r3, #9
 80026b2:	401a      	ands	r2, r3
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	025b      	lsls	r3, r3, #9
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d109      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026be:	481c      	ldr	r0, [pc, #112]	; (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c0:	f7fd fd22 	bl	8000108 <__udivsi3>
 80026c4:	0003      	movs	r3, r0
 80026c6:	001a      	movs	r2, r3
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	4353      	muls	r3, r2
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	e01a      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80026d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	401a      	ands	r2, r3
 80026d8:	23c0      	movs	r3, #192	; 0xc0
 80026da:	025b      	lsls	r3, r3, #9
 80026dc:	429a      	cmp	r2, r3
 80026de:	d109      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e2:	4814      	ldr	r0, [pc, #80]	; (8002734 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026e4:	f7fd fd10 	bl	8000108 <__udivsi3>
 80026e8:	0003      	movs	r3, r0
 80026ea:	001a      	movs	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	4353      	muls	r3, r2
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
 80026f2:	e008      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f8:	f7fd fd06 	bl	8000108 <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	4353      	muls	r3, r2
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270a:	e005      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_GetSysClockFreq+0xfc>)
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002710:	e002      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002716:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b00f      	add	sp, #60	; 0x3c
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	080044fc 	.word	0x080044fc
 8002728:	0800450c 	.word	0x0800450c
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200
 8002734:	02dc6c00 	.word	0x02dc6c00

08002738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <HAL_RCC_GetHCLKFreq+0x10>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	200000a8 	.word	0x200000a8

0800274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002750:	f7ff fff2 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002754:	0001      	movs	r1, r0
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	2207      	movs	r2, #7
 800275e:	4013      	ands	r3, r2
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	40d9      	lsrs	r1, r3
 8002766:	000b      	movs	r3, r1
}    
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	40021000 	.word	0x40021000
 8002774:	0800452c 	.word	0x0800452c

08002778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002794:	e08e      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2017      	movs	r0, #23
 8002798:	183b      	adds	r3, r7, r0
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b6e      	ldr	r3, [pc, #440]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	4013      	ands	r3, r2
 80027a8:	d110      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
 80027b8:	4b67      	ldr	r3, [pc, #412]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d11a      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d8:	4b60      	ldr	r3, [pc, #384]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b5f      	ldr	r3, [pc, #380]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0049      	lsls	r1, r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fd63 	bl	80012b0 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe fd5e 	bl	80012b0 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0a6      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280e:	4b52      	ldr	r3, [pc, #328]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	23c0      	movs	r3, #192	; 0xc0
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d034      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	23c0      	movs	r3, #192	; 0xc0
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4013      	ands	r3, r2
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d02c      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002830:	4b49      	ldr	r3, [pc, #292]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a4a      	ldr	r2, [pc, #296]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0249      	lsls	r1, r1, #9
 8002844:	430a      	orrs	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002848:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800284e:	4945      	ldr	r1, [pc, #276]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002850:	400a      	ands	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fd25 	bl	80012b0 <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e009      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fd20 	bl	80012b0 <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e067      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b35      	ldr	r3, [pc, #212]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d0f0      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288a:	4b33      	ldr	r3, [pc, #204]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800289a:	430a      	orrs	r2, r1
 800289c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289e:	2317      	movs	r3, #23
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ae:	492f      	ldr	r1, [pc, #188]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	4013      	ands	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	2203      	movs	r2, #3
 80028c4:	4393      	bics	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2220      	movs	r2, #32
 80028f6:	4013      	ands	r3, r2
 80028f8:	d009      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	2210      	movs	r2, #16
 8002900:	4393      	bics	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800290a:	430a      	orrs	r2, r1
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	029b      	lsls	r3, r3, #10
 8002916:	4013      	ands	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	4393      	bics	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800292a:	430a      	orrs	r2, r1
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800294a:	430a      	orrs	r2, r1
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
 8002960:	fffffcff 	.word	0xfffffcff
 8002964:	fffeffff 	.word	0xfffeffff
 8002968:	00001388 	.word	0x00001388
 800296c:	efffffff 	.word	0xefffffff
 8002970:	fffcffff 	.word	0xfffcffff

08002974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0a8      	b.n	8002ad8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	2382      	movs	r3, #130	; 0x82
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	429a      	cmp	r2, r3
 8002998:	d009      	beq.n	80029ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	e005      	b.n	80029ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	225d      	movs	r2, #93	; 0x5d
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	225c      	movs	r2, #92	; 0x5c
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fe fa60 	bl	8000e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	225d      	movs	r2, #93	; 0x5d
 80029d4:	2102      	movs	r1, #2
 80029d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	438a      	bics	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	23e0      	movs	r3, #224	; 0xe0
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d902      	bls.n	80029fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	015b      	lsls	r3, r3, #5
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	23f0      	movs	r3, #240	; 0xf0
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d008      	beq.n	8002a1e <HAL_SPI_Init+0xaa>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	23e0      	movs	r3, #224	; 0xe0
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d002      	beq.n	8002a1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	2382      	movs	r3, #130	; 0x82
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	401a      	ands	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	2384      	movs	r3, #132	; 0x84
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	400b      	ands	r3, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2102      	movs	r1, #2
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2101      	movs	r1, #1
 8002a44:	400b      	ands	r3, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6999      	ldr	r1, [r3, #24]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	400b      	ands	r3, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2138      	movs	r1, #56	; 0x38
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	400b      	ands	r3, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	0011      	movs	r1, r2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	2204      	movs	r2, #4
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a94:	2108      	movs	r1, #8
 8002a96:	400b      	ands	r3, r1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	23f0      	movs	r3, #240	; 0xf0
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	400b      	ands	r3, r1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	015b      	lsls	r3, r3, #5
 8002aae:	401a      	ands	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4907      	ldr	r1, [pc, #28]	; (8002ae0 <HAL_SPI_Init+0x16c>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	225d      	movs	r2, #93	; 0x5d
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fffff7ff 	.word	0xfffff7ff

08002ae4 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e074      	b.n	8002be0 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	223c      	movs	r2, #60	; 0x3c
 8002afa:	5c9b      	ldrb	r3, [r3, r2]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223d      	movs	r2, #61	; 0x3d
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fe fa0d 	bl	8000f2c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223c      	movs	r2, #60	; 0x3c
 8002b16:	2102      	movs	r1, #2
 8002b18:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002b30:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002b38:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002b3e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002b44:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002b4a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002b50:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002b56:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7b1b      	ldrb	r3, [r3, #12]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	0249      	lsls	r1, r1, #9
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	43d2      	mvns	r2, r2
 8002b90:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002baa:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681c      	ldr	r4, [r3, #0]
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f000 f817 	bl	8002be8 <TSC_extract_groups>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2103      	movs	r1, #3
 8002bca:	438a      	bics	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223c      	movs	r2, #60	; 0x3c
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b003      	add	sp, #12
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	e011      	b.n	8002c1e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	409a      	lsls	r2, r3
 8002c02:	0013      	movs	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4013      	ands	r3, r2
 8002c08:	d006      	beq.n	8002c18 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	d9ea      	bls.n	8002bfa <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002c24:	68fb      	ldr	r3, [r7, #12]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e044      	b.n	8002ccc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2274      	movs	r2, #116	; 0x74
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fe fa07 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fcb0 	bl	80035d8 <UART_SetConfig>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e024      	b.n	8002ccc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 fe2b 	bl	80038e8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <HAL_UART_Init+0xa4>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	212a      	movs	r1, #42	; 0x2a
 8002cae:	438a      	bics	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fec3 	bl	8003a50 <UART_CheckIdleState>
 8002cca:	0003      	movs	r3, r0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	ffffb7ff 	.word	0xffffb7ff

08002cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	1dbb      	adds	r3, r7, #6
 8002ce6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d000      	beq.n	8002cf2 <HAL_UART_Transmit+0x1a>
 8002cf0:	e096      	b.n	8002e20 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_UART_Transmit+0x28>
 8002cf8:	1dbb      	adds	r3, r7, #6
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e08e      	b.n	8002e22 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	015b      	lsls	r3, r3, #5
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d109      	bne.n	8002d24 <HAL_UART_Transmit+0x4c>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e07e      	b.n	8002e22 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2274      	movs	r2, #116	; 0x74
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Transmit+0x5a>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e077      	b.n	8002e22 <HAL_UART_Transmit+0x14a>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2274      	movs	r2, #116	; 0x74
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2221      	movs	r2, #33	; 0x21
 8002d46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d48:	f7fe fab2 	bl	80012b0 <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1dba      	adds	r2, r7, #6
 8002d54:	2150      	movs	r1, #80	; 0x50
 8002d56:	8812      	ldrh	r2, [r2, #0]
 8002d58:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1dba      	adds	r2, r7, #6
 8002d5e:	2152      	movs	r1, #82	; 0x52
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d108      	bne.n	8002d82 <HAL_UART_Transmit+0xaa>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e003      	b.n	8002d8a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2274      	movs	r2, #116	; 0x74
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d92:	e02d      	b.n	8002df0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	f000 fe9d 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d001      	beq.n	8002dae <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e039      	b.n	8002e22 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	881a      	ldrh	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	05d2      	lsls	r2, r2, #23
 8002dbe:	0dd2      	lsrs	r2, r2, #23
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	e008      	b.n	8002dde <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2252      	movs	r2, #82	; 0x52
 8002de2:	5a9b      	ldrh	r3, [r3, r2]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b299      	uxth	r1, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2252      	movs	r2, #82	; 0x52
 8002dee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2252      	movs	r2, #82	; 0x52
 8002df4:	5a9b      	ldrh	r3, [r3, r2]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1cb      	bne.n	8002d94 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	0013      	movs	r3, r2
 8002e06:	2200      	movs	r2, #0
 8002e08:	2140      	movs	r1, #64	; 0x40
 8002e0a:	f000 fe69 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e005      	b.n	8002e22 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b008      	add	sp, #32
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	1dbb      	adds	r3, r7, #6
 8002e38:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d000      	beq.n	8002e44 <HAL_UART_Transmit_IT+0x18>
 8002e42:	e06a      	b.n	8002f1a <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_UART_Transmit_IT+0x26>
 8002e4a:	1dbb      	adds	r3, r7, #6
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e062      	b.n	8002f1c <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	015b      	lsls	r3, r3, #5
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d109      	bne.n	8002e76 <HAL_UART_Transmit_IT+0x4a>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d001      	beq.n	8002e76 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e052      	b.n	8002f1c <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2274      	movs	r2, #116	; 0x74
 8002e7a:	5c9b      	ldrb	r3, [r3, r2]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Transmit_IT+0x58>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e04b      	b.n	8002f1c <HAL_UART_Transmit_IT+0xf0>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2274      	movs	r2, #116	; 0x74
 8002e88:	2101      	movs	r1, #1
 8002e8a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1dba      	adds	r2, r7, #6
 8002e96:	2150      	movs	r1, #80	; 0x50
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1dba      	adds	r2, r7, #6
 8002ea0:	2152      	movs	r1, #82	; 0x52
 8002ea2:	8812      	ldrh	r2, [r2, #0]
 8002ea4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2221      	movs	r2, #33	; 0x21
 8002eb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	015b      	lsls	r3, r3, #5
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d107      	bne.n	8002ed6 <HAL_UART_Transmit_IT+0xaa>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_UART_Transmit_IT+0xf8>)
 8002ed2:	669a      	str	r2, [r3, #104]	; 0x68
 8002ed4:	e002      	b.n	8002edc <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_UART_Transmit_IT+0xfc>)
 8002eda:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2274      	movs	r2, #116	; 0x74
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8002eea:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b008      	add	sp, #32
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08003f6f 	.word	0x08003f6f
 8002f28:	08003ebb 	.word	0x08003ebb

08002f2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	1dbb      	adds	r3, r7, #6
 8002f38:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d150      	bne.n	8002fe4 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_UART_Receive_IT+0x24>
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e048      	b.n	8002fe6 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	015b      	lsls	r3, r3, #5
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d109      	bne.n	8002f74 <HAL_UART_Receive_IT+0x48>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e038      	b.n	8002fe6 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2274      	movs	r2, #116	; 0x74
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Receive_IT+0x56>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e031      	b.n	8002fe6 <HAL_UART_Receive_IT+0xba>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2274      	movs	r2, #116	; 0x74
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fa4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	04c9      	lsls	r1, r1, #19
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fd2:	1dbb      	adds	r3, r7, #6
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fe44 	bl	8003c68 <UART_Start_Receive_IT>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	e000      	b.n	8002fe6 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b008      	add	sp, #32
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b0ab      	sub	sp, #172	; 0xac
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	22a4      	movs	r2, #164	; 0xa4
 8003000:	18b9      	adds	r1, r7, r2
 8003002:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	20a0      	movs	r0, #160	; 0xa0
 800300c:	1839      	adds	r1, r7, r0
 800300e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	219c      	movs	r1, #156	; 0x9c
 8003018:	1879      	adds	r1, r7, r1
 800301a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800301c:	0011      	movs	r1, r2
 800301e:	18bb      	adds	r3, r7, r2
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a99      	ldr	r2, [pc, #612]	; (8003288 <HAL_UART_IRQHandler+0x298>)
 8003024:	4013      	ands	r3, r2
 8003026:	2298      	movs	r2, #152	; 0x98
 8003028:	18bc      	adds	r4, r7, r2
 800302a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800302c:	18bb      	adds	r3, r7, r2
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d114      	bne.n	800305e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003034:	187b      	adds	r3, r7, r1
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2220      	movs	r2, #32
 800303a:	4013      	ands	r3, r2
 800303c:	d00f      	beq.n	800305e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800303e:	183b      	adds	r3, r7, r0
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2220      	movs	r2, #32
 8003044:	4013      	ands	r3, r2
 8003046:	d00a      	beq.n	800305e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304c:	2b00      	cmp	r3, #0
 800304e:	d100      	bne.n	8003052 <HAL_UART_IRQHandler+0x62>
 8003050:	e296      	b.n	8003580 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	0010      	movs	r0, r2
 800305a:	4798      	blx	r3
      }
      return;
 800305c:	e290      	b.n	8003580 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800305e:	2398      	movs	r3, #152	; 0x98
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d100      	bne.n	800306a <HAL_UART_IRQHandler+0x7a>
 8003068:	e114      	b.n	8003294 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800306a:	239c      	movs	r3, #156	; 0x9c
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	d106      	bne.n	8003084 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003076:	23a0      	movs	r3, #160	; 0xa0
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a83      	ldr	r2, [pc, #524]	; (800328c <HAL_UART_IRQHandler+0x29c>)
 800307e:	4013      	ands	r3, r2
 8003080:	d100      	bne.n	8003084 <HAL_UART_IRQHandler+0x94>
 8003082:	e107      	b.n	8003294 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003084:	23a4      	movs	r3, #164	; 0xa4
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d012      	beq.n	80030b6 <HAL_UART_IRQHandler+0xc6>
 8003090:	23a0      	movs	r3, #160	; 0xa0
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4013      	ands	r3, r2
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	589b      	ldr	r3, [r3, r2]
 80030ac:	2201      	movs	r2, #1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030b6:	23a4      	movs	r3, #164	; 0xa4
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2202      	movs	r2, #2
 80030be:	4013      	ands	r3, r2
 80030c0:	d011      	beq.n	80030e6 <HAL_UART_IRQHandler+0xf6>
 80030c2:	239c      	movs	r3, #156	; 0x9c
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2202      	movs	r2, #2
 80030d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	589b      	ldr	r3, [r3, r2]
 80030dc:	2204      	movs	r2, #4
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e6:	23a4      	movs	r3, #164	; 0xa4
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2204      	movs	r2, #4
 80030ee:	4013      	ands	r3, r2
 80030f0:	d011      	beq.n	8003116 <HAL_UART_IRQHandler+0x126>
 80030f2:	239c      	movs	r3, #156	; 0x9c
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2204      	movs	r2, #4
 8003104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	589b      	ldr	r3, [r3, r2]
 800310c:	2202      	movs	r2, #2
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003116:	23a4      	movs	r3, #164	; 0xa4
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2208      	movs	r2, #8
 800311e:	4013      	ands	r3, r2
 8003120:	d017      	beq.n	8003152 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003122:	23a0      	movs	r3, #160	; 0xa0
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2220      	movs	r2, #32
 800312a:	4013      	ands	r3, r2
 800312c:	d105      	bne.n	800313a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800312e:	239c      	movs	r3, #156	; 0x9c
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003138:	d00b      	beq.n	8003152 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2208      	movs	r2, #8
 8003140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2280      	movs	r2, #128	; 0x80
 8003146:	589b      	ldr	r3, [r3, r2]
 8003148:	2208      	movs	r2, #8
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003152:	23a4      	movs	r3, #164	; 0xa4
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_UART_IRQHandler+0x198>
 8003160:	23a0      	movs	r3, #160	; 0xa0
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	04db      	lsls	r3, r3, #19
 800316a:	4013      	ands	r3, r2
 800316c:	d00c      	beq.n	8003188 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	589b      	ldr	r3, [r3, r2]
 800317e:	2220      	movs	r2, #32
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	589b      	ldr	r3, [r3, r2]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d100      	bne.n	8003194 <HAL_UART_IRQHandler+0x1a4>
 8003192:	e1f7      	b.n	8003584 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003194:	23a4      	movs	r3, #164	; 0xa4
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2220      	movs	r2, #32
 800319c:	4013      	ands	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031a0:	23a0      	movs	r3, #160	; 0xa0
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2220      	movs	r2, #32
 80031a8:	4013      	ands	r3, r2
 80031aa:	d008      	beq.n	80031be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	0010      	movs	r0, r2
 80031bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	589b      	ldr	r3, [r3, r2]
 80031c4:	2194      	movs	r1, #148	; 0x94
 80031c6:	187a      	adds	r2, r7, r1
 80031c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d004      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2228      	movs	r2, #40	; 0x28
 80031de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031e0:	d047      	beq.n	8003272 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 fdef 	bl	8003dc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d137      	bne.n	8003268 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f8:	f3ef 8310 	mrs	r3, PRIMASK
 80031fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003200:	2090      	movs	r0, #144	; 0x90
 8003202:	183a      	adds	r2, r7, r0
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	2301      	movs	r3, #1
 8003208:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	438a      	bics	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	183b      	adds	r3, r7, r0
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322a:	f383 8810 	msr	PRIMASK, r3
}
 800322e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	2b00      	cmp	r3, #0
 8003236:	d012      	beq.n	800325e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <HAL_UART_IRQHandler+0x2a0>)
 800323e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	0018      	movs	r0, r3
 8003246:	f7fe f953 	bl	80014f0 <HAL_DMA_Abort_IT>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d01a      	beq.n	8003284 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	0018      	movs	r0, r3
 800325a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e012      	b.n	8003284 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f9a5 	bl	80035b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003266:	e00d      	b.n	8003284 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f9a0 	bl	80035b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	e008      	b.n	8003284 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f000 f99b 	bl	80035b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	2100      	movs	r1, #0
 8003280:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003282:	e17f      	b.n	8003584 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	46c0      	nop			; (mov r8, r8)
    return;
 8003286:	e17d      	b.n	8003584 <HAL_UART_IRQHandler+0x594>
 8003288:	0000080f 	.word	0x0000080f
 800328c:	04000120 	.word	0x04000120
 8003290:	08003e8d 	.word	0x08003e8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003298:	2b01      	cmp	r3, #1
 800329a:	d000      	beq.n	800329e <HAL_UART_IRQHandler+0x2ae>
 800329c:	e131      	b.n	8003502 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800329e:	23a4      	movs	r3, #164	; 0xa4
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2210      	movs	r2, #16
 80032a6:	4013      	ands	r3, r2
 80032a8:	d100      	bne.n	80032ac <HAL_UART_IRQHandler+0x2bc>
 80032aa:	e12a      	b.n	8003502 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032ac:	23a0      	movs	r3, #160	; 0xa0
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2210      	movs	r2, #16
 80032b4:	4013      	ands	r3, r2
 80032b6:	d100      	bne.n	80032ba <HAL_UART_IRQHandler+0x2ca>
 80032b8:	e123      	b.n	8003502 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2210      	movs	r2, #16
 80032c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d000      	beq.n	80032d2 <HAL_UART_IRQHandler+0x2e2>
 80032d0:	e09b      	b.n	800340a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	217e      	movs	r1, #126	; 0x7e
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d100      	bne.n	80032ea <HAL_UART_IRQHandler+0x2fa>
 80032e8:	e14e      	b.n	8003588 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2258      	movs	r2, #88	; 0x58
 80032ee:	5a9b      	ldrh	r3, [r3, r2]
 80032f0:	187a      	adds	r2, r7, r1
 80032f2:	8812      	ldrh	r2, [r2, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d300      	bcc.n	80032fa <HAL_UART_IRQHandler+0x30a>
 80032f8:	e146      	b.n	8003588 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	187a      	adds	r2, r7, r1
 80032fe:	215a      	movs	r1, #90	; 0x5a
 8003300:	8812      	ldrh	r2, [r2, #0]
 8003302:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b20      	cmp	r3, #32
 800330c:	d06e      	beq.n	80033ec <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330e:	f3ef 8310 	mrs	r3, PRIMASK
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003316:	67bb      	str	r3, [r7, #120]	; 0x78
 8003318:	2301      	movs	r3, #1
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	f383 8810 	msr	PRIMASK, r3
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	499a      	ldr	r1, [pc, #616]	; (8003598 <HAL_UART_IRQHandler+0x5a8>)
 8003330:	400a      	ands	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	f383 8810 	msr	PRIMASK, r3
}
 800333e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003340:	f3ef 8310 	mrs	r3, PRIMASK
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003348:	677b      	str	r3, [r7, #116]	; 0x74
 800334a:	2301      	movs	r3, #1
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2101      	movs	r1, #1
 8003362:	438a      	bics	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	f383 8810 	msr	PRIMASK, r3
}
 8003370:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003378:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	673b      	str	r3, [r7, #112]	; 0x70
 800337c:	2301      	movs	r3, #1
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2140      	movs	r1, #64	; 0x40
 8003394:	438a      	bics	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800339a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ba:	2301      	movs	r3, #1
 80033bc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2110      	movs	r1, #16
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fe f84a 	bl	8001480 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2258      	movs	r2, #88	; 0x58
 80033f0:	5a9a      	ldrh	r2, [r3, r2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	215a      	movs	r1, #90	; 0x5a
 80033f6:	5a5b      	ldrh	r3, [r3, r1]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0011      	movs	r1, r2
 8003402:	0018      	movs	r0, r3
 8003404:	f000 f8dc 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003408:	e0be      	b.n	8003588 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2258      	movs	r2, #88	; 0x58
 800340e:	5a99      	ldrh	r1, [r3, r2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	225a      	movs	r2, #90	; 0x5a
 8003414:	5a9b      	ldrh	r3, [r3, r2]
 8003416:	b29a      	uxth	r2, r3
 8003418:	208e      	movs	r0, #142	; 0x8e
 800341a:	183b      	adds	r3, r7, r0
 800341c:	1a8a      	subs	r2, r1, r2
 800341e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	225a      	movs	r2, #90	; 0x5a
 8003424:	5a9b      	ldrh	r3, [r3, r2]
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d100      	bne.n	800342e <HAL_UART_IRQHandler+0x43e>
 800342c:	e0ae      	b.n	800358c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800342e:	183b      	adds	r3, r7, r0
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d100      	bne.n	8003438 <HAL_UART_IRQHandler+0x448>
 8003436:	e0a9      	b.n	800358c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003438:	f3ef 8310 	mrs	r3, PRIMASK
 800343c:	60fb      	str	r3, [r7, #12]
  return(result);
 800343e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003440:	2488      	movs	r4, #136	; 0x88
 8003442:	193a      	adds	r2, r7, r4
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	2301      	movs	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	494f      	ldr	r1, [pc, #316]	; (800359c <HAL_UART_IRQHandler+0x5ac>)
 800345e:	400a      	ands	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	193b      	adds	r3, r7, r4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003470:	f3ef 8310 	mrs	r3, PRIMASK
 8003474:	61bb      	str	r3, [r7, #24]
  return(result);
 8003476:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003478:	2484      	movs	r4, #132	; 0x84
 800347a:	193a      	adds	r2, r7, r4
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	438a      	bics	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	193b      	adds	r3, r7, r4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ba:	f3ef 8310 	mrs	r3, PRIMASK
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c2:	2480      	movs	r4, #128	; 0x80
 80034c4:	193a      	adds	r2, r7, r4
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	2301      	movs	r3, #1
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	f383 8810 	msr	PRIMASK, r3
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2110      	movs	r1, #16
 80034e0:	438a      	bics	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f2:	183b      	adds	r3, r7, r0
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0011      	movs	r1, r2
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f860 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003500:	e044      	b.n	800358c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003502:	23a4      	movs	r3, #164	; 0xa4
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	035b      	lsls	r3, r3, #13
 800350c:	4013      	ands	r3, r2
 800350e:	d010      	beq.n	8003532 <HAL_UART_IRQHandler+0x542>
 8003510:	239c      	movs	r3, #156	; 0x9c
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	03db      	lsls	r3, r3, #15
 800351a:	4013      	ands	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0352      	lsls	r2, r2, #13
 8003526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 ff10 	bl	8004350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003530:	e02f      	b.n	8003592 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003532:	23a4      	movs	r3, #164	; 0xa4
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	4013      	ands	r3, r2
 800353c:	d00f      	beq.n	800355e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800353e:	23a0      	movs	r3, #160	; 0xa0
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	4013      	ands	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01e      	beq.n	8003590 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	0010      	movs	r0, r2
 800355a:	4798      	blx	r3
    }
    return;
 800355c:	e018      	b.n	8003590 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800355e:	23a4      	movs	r3, #164	; 0xa4
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_UART_IRQHandler+0x5a2>
 800356a:	23a0      	movs	r3, #160	; 0xa0
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	4013      	ands	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 fd56 	bl	800402a <UART_EndTransmit_IT>
    return;
 800357e:	e008      	b.n	8003592 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	e006      	b.n	8003592 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	e004      	b.n	8003592 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	e002      	b.n	8003592 <HAL_UART_IRQHandler+0x5a2>
      return;
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	e000      	b.n	8003592 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003590:	46c0      	nop			; (mov r8, r8)
  }

}
 8003592:	46bd      	mov	sp, r7
 8003594:	b02b      	add	sp, #172	; 0xac
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	fffffeff 	.word	0xfffffeff
 800359c:	fffffedf 	.word	0xfffffedf

080035a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	000a      	movs	r2, r1
 80035ca:	1cbb      	adds	r3, r7, #2
 80035cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e0:	231e      	movs	r3, #30
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4aaf      	ldr	r2, [pc, #700]	; (80038c4 <UART_SetConfig+0x2ec>)
 8003608:	4013      	ands	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4aaa      	ldr	r2, [pc, #680]	; (80038c8 <UART_SetConfig+0x2f0>)
 800361e:	4013      	ands	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4aa1      	ldr	r2, [pc, #644]	; (80038cc <UART_SetConfig+0x2f4>)
 8003646:	4013      	ands	r3, r2
 8003648:	0019      	movs	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a9d      	ldr	r2, [pc, #628]	; (80038d0 <UART_SetConfig+0x2f8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d127      	bne.n	80036ae <UART_SetConfig+0xd6>
 800365e:	4b9d      	ldr	r3, [pc, #628]	; (80038d4 <UART_SetConfig+0x2fc>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	2203      	movs	r2, #3
 8003664:	4013      	ands	r3, r2
 8003666:	2b03      	cmp	r3, #3
 8003668:	d00d      	beq.n	8003686 <UART_SetConfig+0xae>
 800366a:	d81b      	bhi.n	80036a4 <UART_SetConfig+0xcc>
 800366c:	2b02      	cmp	r3, #2
 800366e:	d014      	beq.n	800369a <UART_SetConfig+0xc2>
 8003670:	d818      	bhi.n	80036a4 <UART_SetConfig+0xcc>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <UART_SetConfig+0xa4>
 8003676:	2b01      	cmp	r3, #1
 8003678:	d00a      	beq.n	8003690 <UART_SetConfig+0xb8>
 800367a:	e013      	b.n	80036a4 <UART_SetConfig+0xcc>
 800367c:	231f      	movs	r3, #31
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e065      	b.n	8003752 <UART_SetConfig+0x17a>
 8003686:	231f      	movs	r3, #31
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2202      	movs	r2, #2
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e060      	b.n	8003752 <UART_SetConfig+0x17a>
 8003690:	231f      	movs	r3, #31
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2204      	movs	r2, #4
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e05b      	b.n	8003752 <UART_SetConfig+0x17a>
 800369a:	231f      	movs	r3, #31
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2208      	movs	r2, #8
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e056      	b.n	8003752 <UART_SetConfig+0x17a>
 80036a4:	231f      	movs	r3, #31
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2210      	movs	r2, #16
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e051      	b.n	8003752 <UART_SetConfig+0x17a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a89      	ldr	r2, [pc, #548]	; (80038d8 <UART_SetConfig+0x300>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d134      	bne.n	8003722 <UART_SetConfig+0x14a>
 80036b8:	4b86      	ldr	r3, [pc, #536]	; (80038d4 <UART_SetConfig+0x2fc>)
 80036ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036bc:	23c0      	movs	r3, #192	; 0xc0
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	4013      	ands	r3, r2
 80036c2:	22c0      	movs	r2, #192	; 0xc0
 80036c4:	0292      	lsls	r2, r2, #10
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d017      	beq.n	80036fa <UART_SetConfig+0x122>
 80036ca:	22c0      	movs	r2, #192	; 0xc0
 80036cc:	0292      	lsls	r2, r2, #10
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d822      	bhi.n	8003718 <UART_SetConfig+0x140>
 80036d2:	2280      	movs	r2, #128	; 0x80
 80036d4:	0292      	lsls	r2, r2, #10
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <UART_SetConfig+0x136>
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	0292      	lsls	r2, r2, #10
 80036de:	4293      	cmp	r3, r2
 80036e0:	d81a      	bhi.n	8003718 <UART_SetConfig+0x140>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <UART_SetConfig+0x118>
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	0252      	lsls	r2, r2, #9
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00a      	beq.n	8003704 <UART_SetConfig+0x12c>
 80036ee:	e013      	b.n	8003718 <UART_SetConfig+0x140>
 80036f0:	231f      	movs	r3, #31
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e02b      	b.n	8003752 <UART_SetConfig+0x17a>
 80036fa:	231f      	movs	r3, #31
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e026      	b.n	8003752 <UART_SetConfig+0x17a>
 8003704:	231f      	movs	r3, #31
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e021      	b.n	8003752 <UART_SetConfig+0x17a>
 800370e:	231f      	movs	r3, #31
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2208      	movs	r2, #8
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e01c      	b.n	8003752 <UART_SetConfig+0x17a>
 8003718:	231f      	movs	r3, #31
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2210      	movs	r2, #16
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e017      	b.n	8003752 <UART_SetConfig+0x17a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6d      	ldr	r2, [pc, #436]	; (80038dc <UART_SetConfig+0x304>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d104      	bne.n	8003736 <UART_SetConfig+0x15e>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e00d      	b.n	8003752 <UART_SetConfig+0x17a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a69      	ldr	r2, [pc, #420]	; (80038e0 <UART_SetConfig+0x308>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d104      	bne.n	800374a <UART_SetConfig+0x172>
 8003740:	231f      	movs	r3, #31
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e003      	b.n	8003752 <UART_SetConfig+0x17a>
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2210      	movs	r2, #16
 8003750:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	429a      	cmp	r2, r3
 800375c:	d15d      	bne.n	800381a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800375e:	231f      	movs	r3, #31
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d015      	beq.n	8003794 <UART_SetConfig+0x1bc>
 8003768:	dc18      	bgt.n	800379c <UART_SetConfig+0x1c4>
 800376a:	2b04      	cmp	r3, #4
 800376c:	d00d      	beq.n	800378a <UART_SetConfig+0x1b2>
 800376e:	dc15      	bgt.n	800379c <UART_SetConfig+0x1c4>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <UART_SetConfig+0x1a2>
 8003774:	2b02      	cmp	r3, #2
 8003776:	d005      	beq.n	8003784 <UART_SetConfig+0x1ac>
 8003778:	e010      	b.n	800379c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377a:	f7fe ffe7 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 800377e:	0003      	movs	r3, r0
 8003780:	61bb      	str	r3, [r7, #24]
        break;
 8003782:	e012      	b.n	80037aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <UART_SetConfig+0x30c>)
 8003786:	61bb      	str	r3, [r7, #24]
        break;
 8003788:	e00f      	b.n	80037aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe ff55 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 800378e:	0003      	movs	r3, r0
 8003790:	61bb      	str	r3, [r7, #24]
        break;
 8003792:	e00a      	b.n	80037aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	61bb      	str	r3, [r7, #24]
        break;
 800379a:	e006      	b.n	80037aa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037a0:	231e      	movs	r3, #30
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
        break;
 80037a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d100      	bne.n	80037b2 <UART_SetConfig+0x1da>
 80037b0:	e07b      	b.n	80038aa <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	005a      	lsls	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	18d2      	adds	r2, r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	0019      	movs	r1, r3
 80037c4:	0010      	movs	r0, r2
 80037c6:	f7fc fc9f 	bl	8000108 <__udivsi3>
 80037ca:	0003      	movs	r3, r0
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	d91c      	bls.n	8003810 <UART_SetConfig+0x238>
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	025b      	lsls	r3, r3, #9
 80037dc:	429a      	cmp	r2, r3
 80037de:	d217      	bcs.n	8003810 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	200e      	movs	r0, #14
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	210f      	movs	r1, #15
 80037ea:	438a      	bics	r2, r1
 80037ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2207      	movs	r2, #7
 80037f6:	4013      	ands	r3, r2
 80037f8:	b299      	uxth	r1, r3
 80037fa:	183b      	adds	r3, r7, r0
 80037fc:	183a      	adds	r2, r7, r0
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	183a      	adds	r2, r7, r0
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	e04c      	b.n	80038aa <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003810:	231e      	movs	r3, #30
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e047      	b.n	80038aa <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800381a:	231f      	movs	r3, #31
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d015      	beq.n	8003850 <UART_SetConfig+0x278>
 8003824:	dc18      	bgt.n	8003858 <UART_SetConfig+0x280>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00d      	beq.n	8003846 <UART_SetConfig+0x26e>
 800382a:	dc15      	bgt.n	8003858 <UART_SetConfig+0x280>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <UART_SetConfig+0x25e>
 8003830:	2b02      	cmp	r3, #2
 8003832:	d005      	beq.n	8003840 <UART_SetConfig+0x268>
 8003834:	e010      	b.n	8003858 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003836:	f7fe ff89 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 800383a:	0003      	movs	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]
        break;
 800383e:	e012      	b.n	8003866 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <UART_SetConfig+0x30c>)
 8003842:	61bb      	str	r3, [r7, #24]
        break;
 8003844:	e00f      	b.n	8003866 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7fe fef7 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 800384a:	0003      	movs	r3, r0
 800384c:	61bb      	str	r3, [r7, #24]
        break;
 800384e:	e00a      	b.n	8003866 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	61bb      	str	r3, [r7, #24]
        break;
 8003856:	e006      	b.n	8003866 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800385c:	231e      	movs	r3, #30
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
        break;
 8003864:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01e      	beq.n	80038aa <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	085a      	lsrs	r2, r3, #1
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	18d2      	adds	r2, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	0019      	movs	r1, r3
 800387c:	0010      	movs	r0, r2
 800387e:	f7fc fc43 	bl	8000108 <__udivsi3>
 8003882:	0003      	movs	r3, r0
 8003884:	b29b      	uxth	r3, r3
 8003886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d909      	bls.n	80038a2 <UART_SetConfig+0x2ca>
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	025b      	lsls	r3, r3, #9
 8003894:	429a      	cmp	r2, r3
 8003896:	d204      	bcs.n	80038a2 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e003      	b.n	80038aa <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80038a2:	231e      	movs	r3, #30
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038b6:	231e      	movs	r3, #30
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	781b      	ldrb	r3, [r3, #0]
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b008      	add	sp, #32
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	efff69f3 	.word	0xefff69f3
 80038c8:	ffffcfff 	.word	0xffffcfff
 80038cc:	fffff4ff 	.word	0xfffff4ff
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40004400 	.word	0x40004400
 80038dc:	40004800 	.word	0x40004800
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00b      	beq.n	8003912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a4a      	ldr	r2, [pc, #296]	; (8003a2c <UART_AdvFeatureConfig+0x144>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2202      	movs	r2, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d00b      	beq.n	8003934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a43      	ldr	r2, [pc, #268]	; (8003a30 <UART_AdvFeatureConfig+0x148>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2204      	movs	r2, #4
 800393a:	4013      	ands	r3, r2
 800393c:	d00b      	beq.n	8003956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <UART_AdvFeatureConfig+0x14c>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2208      	movs	r2, #8
 800395c:	4013      	ands	r3, r2
 800395e:	d00b      	beq.n	8003978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <UART_AdvFeatureConfig+0x150>)
 8003968:	4013      	ands	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2210      	movs	r2, #16
 800397e:	4013      	ands	r3, r2
 8003980:	d00b      	beq.n	800399a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <UART_AdvFeatureConfig+0x154>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2220      	movs	r2, #32
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00b      	beq.n	80039bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	4a25      	ldr	r2, [pc, #148]	; (8003a40 <UART_AdvFeatureConfig+0x158>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	d01d      	beq.n	8003a02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <UART_AdvFeatureConfig+0x15c>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	035b      	lsls	r3, r3, #13
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10b      	bne.n	8003a02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <UART_AdvFeatureConfig+0x160>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <UART_AdvFeatureConfig+0x164>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	fffdffff 	.word	0xfffdffff
 8003a30:	fffeffff 	.word	0xfffeffff
 8003a34:	fffbffff 	.word	0xfffbffff
 8003a38:	ffff7fff 	.word	0xffff7fff
 8003a3c:	ffffefff 	.word	0xffffefff
 8003a40:	ffffdfff 	.word	0xffffdfff
 8003a44:	ffefffff 	.word	0xffefffff
 8003a48:	ff9fffff 	.word	0xff9fffff
 8003a4c:	fff7ffff 	.word	0xfff7ffff

08003a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a60:	f7fd fc26 	bl	80012b0 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2208      	movs	r2, #8
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d10c      	bne.n	8003a90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	0391      	lsls	r1, r2, #14
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <UART_CheckIdleState+0x8c>)
 8003a80:	9200      	str	r2, [sp, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f000 f82c 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d001      	beq.n	8003a90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e021      	b.n	8003ad4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2204      	movs	r2, #4
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d10c      	bne.n	8003ab8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	03d1      	lsls	r1, r2, #15
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <UART_CheckIdleState+0x8c>)
 8003aa8:	9200      	str	r2, [sp, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f000 f818 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e00d      	b.n	8003ad4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2274      	movs	r2, #116	; 0x74
 8003ace:	2100      	movs	r1, #0
 8003ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b004      	add	sp, #16
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	01ffffff 	.word	0x01ffffff

08003ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b094      	sub	sp, #80	; 0x50
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	1dfb      	adds	r3, r7, #7
 8003aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	e0a3      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af4:	3301      	adds	r3, #1
 8003af6:	d100      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x1a>
 8003af8:	e09f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fd fbd9 	bl	80012b0 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13d      	bne.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b10:	f3ef 8310 	mrs	r3, PRIMASK
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	f383 8810 	msr	PRIMASK, r3
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	494c      	ldr	r1, [pc, #304]	; (8003c64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2101      	movs	r1, #1
 8003b64:	438a      	bics	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2274      	movs	r2, #116	; 0x74
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e067      	b.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2204      	movs	r2, #4
 8003b94:	4013      	ands	r3, r2
 8003b96:	d050      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d146      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bba:	613b      	str	r3, [r7, #16]
  return(result);
 8003bbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4923      	ldr	r1, [pc, #140]	; (8003c64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2280      	movs	r2, #128	; 0x80
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2274      	movs	r2, #116	; 0x74
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e010      	b.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	425a      	negs	r2, r3
 8003c4a:	4153      	adcs	r3, r2
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	001a      	movs	r2, r3
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d100      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c58:	e74b      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b014      	add	sp, #80	; 0x50
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	fffffe5f 	.word	0xfffffe5f

08003c68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1dba      	adds	r2, r7, #6
 8003c80:	2158      	movs	r1, #88	; 0x58
 8003c82:	8812      	ldrh	r2, [r2, #0]
 8003c84:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1dba      	adds	r2, r7, #6
 8003c8a:	215a      	movs	r1, #90	; 0x5a
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	015b      	lsls	r3, r3, #5
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d10d      	bne.n	8003cbe <UART_Start_Receive_IT+0x56>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <UART_Start_Receive_IT+0x4c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	225c      	movs	r2, #92	; 0x5c
 8003cae:	4943      	ldr	r1, [pc, #268]	; (8003dbc <UART_Start_Receive_IT+0x154>)
 8003cb0:	5299      	strh	r1, [r3, r2]
 8003cb2:	e02e      	b.n	8003d12 <UART_Start_Receive_IT+0xaa>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	225c      	movs	r2, #92	; 0x5c
 8003cb8:	21ff      	movs	r1, #255	; 0xff
 8003cba:	5299      	strh	r1, [r3, r2]
 8003cbc:	e029      	b.n	8003d12 <UART_Start_Receive_IT+0xaa>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <UART_Start_Receive_IT+0x7a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <UART_Start_Receive_IT+0x70>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	225c      	movs	r2, #92	; 0x5c
 8003cd2:	21ff      	movs	r1, #255	; 0xff
 8003cd4:	5299      	strh	r1, [r3, r2]
 8003cd6:	e01c      	b.n	8003d12 <UART_Start_Receive_IT+0xaa>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	225c      	movs	r2, #92	; 0x5c
 8003cdc:	217f      	movs	r1, #127	; 0x7f
 8003cde:	5299      	strh	r1, [r3, r2]
 8003ce0:	e017      	b.n	8003d12 <UART_Start_Receive_IT+0xaa>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	055b      	lsls	r3, r3, #21
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d10d      	bne.n	8003d0a <UART_Start_Receive_IT+0xa2>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <UART_Start_Receive_IT+0x98>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	225c      	movs	r2, #92	; 0x5c
 8003cfa:	217f      	movs	r1, #127	; 0x7f
 8003cfc:	5299      	strh	r1, [r3, r2]
 8003cfe:	e008      	b.n	8003d12 <UART_Start_Receive_IT+0xaa>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	225c      	movs	r2, #92	; 0x5c
 8003d04:	213f      	movs	r1, #63	; 0x3f
 8003d06:	5299      	strh	r1, [r3, r2]
 8003d08:	e003      	b.n	8003d12 <UART_Start_Receive_IT+0xaa>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	225c      	movs	r2, #92	; 0x5c
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	2100      	movs	r1, #0
 8003d18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2222      	movs	r2, #34	; 0x22
 8003d1e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d20:	f3ef 8310 	mrs	r3, PRIMASK
 8003d24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d26:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	015b      	lsls	r3, r3, #5
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d107      	bne.n	8003d6e <UART_Start_Receive_IT+0x106>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <UART_Start_Receive_IT+0x158>)
 8003d6a:	665a      	str	r2, [r3, #100]	; 0x64
 8003d6c:	e002      	b.n	8003d74 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <UART_Start_Receive_IT+0x15c>)
 8003d72:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2274      	movs	r2, #116	; 0x74
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d80:	613b      	str	r3, [r7, #16]
  return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d86:	2301      	movs	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f383 8810 	msr	PRIMASK, r3
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2190      	movs	r1, #144	; 0x90
 8003d9e:	0049      	lsls	r1, r1, #1
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b00c      	add	sp, #48	; 0x30
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	000001ff 	.word	0x000001ff
 8003dc0:	080041e9 	.word	0x080041e9
 8003dc4:	08004081 	.word	0x08004081

08003dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08e      	sub	sp, #56	; 0x38
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003dd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f383 8810 	msr	PRIMASK, r3
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4925      	ldr	r1, [pc, #148]	; (8003e88 <UART_EndRxTransfer+0xc0>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	623b      	str	r3, [r7, #32]
  return(result);
 8003e08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d118      	bne.n	8003e6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	2301      	movs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f383 8810 	msr	PRIMASK, r3
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	438a      	bics	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b00e      	add	sp, #56	; 0x38
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	fffffedf 	.word	0xfffffedf

08003e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	225a      	movs	r2, #90	; 0x5a
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2252      	movs	r2, #82	; 0x52
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff fb7f 	bl	80035b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b08a      	sub	sp, #40	; 0x28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec6:	2b21      	cmp	r3, #33	; 0x21
 8003ec8:	d14d      	bne.n	8003f66 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2252      	movs	r2, #82	; 0x52
 8003ece:	5a9b      	ldrh	r3, [r3, r2]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d132      	bne.n	8003f3c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	60bb      	str	r3, [r7, #8]
  return(result);
 8003edc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	438a      	bics	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f0e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2140      	movs	r1, #64	; 0x40
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f3a:	e014      	b.n	8003f66 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b292      	uxth	r2, r2
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2252      	movs	r2, #82	; 0x52
 8003f58:	5a9b      	ldrh	r3, [r3, r2]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b299      	uxth	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2252      	movs	r2, #82	; 0x52
 8003f64:	5299      	strh	r1, [r3, r2]
}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b00a      	add	sp, #40	; 0x28
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b08c      	sub	sp, #48	; 0x30
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7a:	2b21      	cmp	r3, #33	; 0x21
 8003f7c:	d151      	bne.n	8004022 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2252      	movs	r2, #82	; 0x52
 8003f82:	5a9b      	ldrh	r3, [r3, r2]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d132      	bne.n	8003ff0 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f90:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	2301      	movs	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f383 8810 	msr	PRIMASK, r3
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	438a      	bics	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f383 8810 	msr	PRIMASK, r3
}
 8003fba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fc2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2140      	movs	r1, #64	; 0x40
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003fee:	e018      	b.n	8004022 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	05d2      	lsls	r2, r2, #23
 8004000:	0dd2      	lsrs	r2, r2, #23
 8004002:	b292      	uxth	r2, r2
 8004004:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2252      	movs	r2, #82	; 0x52
 8004014:	5a9b      	ldrh	r3, [r3, r2]
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b299      	uxth	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2252      	movs	r2, #82	; 0x52
 8004020:	5299      	strh	r1, [r3, r2]
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b00c      	add	sp, #48	; 0x30
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	60bb      	str	r3, [r7, #8]
  return(result);
 8004038:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2140      	movs	r1, #64	; 0x40
 8004054:	438a      	bics	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0018      	movs	r0, r3
 8004074:	f7ff fa94 	bl	80035a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b006      	add	sp, #24
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b090      	sub	sp, #64	; 0x40
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004088:	203e      	movs	r0, #62	; 0x3e
 800408a:	183b      	adds	r3, r7, r0
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	215c      	movs	r1, #92	; 0x5c
 8004090:	5a52      	ldrh	r2, [r2, r1]
 8004092:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004098:	2b22      	cmp	r3, #34	; 0x22
 800409a:	d000      	beq.n	800409e <UART_RxISR_8BIT+0x1e>
 800409c:	e095      	b.n	80041ca <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	213c      	movs	r1, #60	; 0x3c
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040a8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040aa:	187b      	adds	r3, r7, r1
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b2d9      	uxtb	r1, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	400a      	ands	r2, r1
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	225a      	movs	r2, #90	; 0x5a
 80040ce:	5a9b      	ldrh	r3, [r3, r2]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b299      	uxth	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	225a      	movs	r2, #90	; 0x5a
 80040da:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	225a      	movs	r2, #90	; 0x5a
 80040e0:	5a9b      	ldrh	r3, [r3, r2]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d178      	bne.n	80041da <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80040ee:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f2:	2301      	movs	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4936      	ldr	r1, [pc, #216]	; (80041e4 <UART_RxISR_8BIT+0x164>)
 800410a:	400a      	ands	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411a:	f3ef 8310 	mrs	r3, PRIMASK
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	2301      	movs	r3, #1
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	438a      	bics	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	2b01      	cmp	r3, #1
 800415e:	d12f      	bne.n	80041c0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004166:	f3ef 8310 	mrs	r3, PRIMASK
 800416a:	60fb      	str	r3, [r7, #12]
  return(result);
 800416c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
 8004170:	2301      	movs	r3, #1
 8004172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2110      	movs	r1, #16
 8004188:	438a      	bics	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2210      	movs	r2, #16
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d103      	bne.n	80041ae <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2210      	movs	r2, #16
 80041ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2258      	movs	r2, #88	; 0x58
 80041b2:	5a9a      	ldrh	r2, [r3, r2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff fa01 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041be:	e00c      	b.n	80041da <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7fc fb6c 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 80041c8:	e007      	b.n	80041da <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2108      	movs	r1, #8
 80041d6:	430a      	orrs	r2, r1
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b010      	add	sp, #64	; 0x40
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	fffffedf 	.word	0xfffffedf

080041e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b090      	sub	sp, #64	; 0x40
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041f0:	203e      	movs	r0, #62	; 0x3e
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	215c      	movs	r1, #92	; 0x5c
 80041f8:	5a52      	ldrh	r2, [r2, r1]
 80041fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004200:	2b22      	cmp	r3, #34	; 0x22
 8004202:	d000      	beq.n	8004206 <UART_RxISR_16BIT+0x1e>
 8004204:	e095      	b.n	8004332 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	213c      	movs	r1, #60	; 0x3c
 800420c:	187b      	adds	r3, r7, r1
 800420e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004210:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004218:	187b      	adds	r3, r7, r1
 800421a:	183a      	adds	r2, r7, r0
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	8812      	ldrh	r2, [r2, #0]
 8004220:	4013      	ands	r3, r2
 8004222:	b29a      	uxth	r2, r3
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	225a      	movs	r2, #90	; 0x5a
 8004236:	5a9b      	ldrh	r3, [r3, r2]
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b299      	uxth	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	225a      	movs	r2, #90	; 0x5a
 8004242:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	225a      	movs	r2, #90	; 0x5a
 8004248:	5a9b      	ldrh	r3, [r3, r2]
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d178      	bne.n	8004342 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004250:	f3ef 8310 	mrs	r3, PRIMASK
 8004254:	617b      	str	r3, [r7, #20]
  return(result);
 8004256:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
 800425a:	2301      	movs	r3, #1
 800425c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4936      	ldr	r1, [pc, #216]	; (800434c <UART_RxISR_16BIT+0x164>)
 8004272:	400a      	ands	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004282:	f3ef 8310 	mrs	r3, PRIMASK
 8004286:	623b      	str	r3, [r7, #32]
  return(result);
 8004288:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
 800428c:	2301      	movs	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	438a      	bics	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d12f      	bne.n	8004328 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ce:	f3ef 8310 	mrs	r3, PRIMASK
 80042d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d8:	2301      	movs	r3, #1
 80042da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f383 8810 	msr	PRIMASK, r3
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2110      	movs	r1, #16
 80042f0:	438a      	bics	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f383 8810 	msr	PRIMASK, r3
}
 80042fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	2210      	movs	r2, #16
 8004308:	4013      	ands	r3, r2
 800430a:	2b10      	cmp	r3, #16
 800430c:	d103      	bne.n	8004316 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2210      	movs	r2, #16
 8004314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2258      	movs	r2, #88	; 0x58
 800431a:	5a9a      	ldrh	r2, [r3, r2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0011      	movs	r1, r2
 8004320:	0018      	movs	r0, r3
 8004322:	f7ff f94d 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004326:	e00c      	b.n	8004342 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f7fc fab8 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 8004330:	e007      	b.n	8004342 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2108      	movs	r1, #8
 800433e:	430a      	orrs	r2, r1
 8004340:	619a      	str	r2, [r3, #24]
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b010      	add	sp, #64	; 0x40
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	fffffedf 	.word	0xfffffedf

08004350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	b002      	add	sp, #8
 800435e:	bd80      	pop	{r7, pc}

08004360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <USB_DisableGlobalInt+0x30>)
 800436a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	5a9b      	ldrh	r3, [r3, r2]
 8004372:	b29b      	uxth	r3, r3
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	b292      	uxth	r2, r2
 8004378:	43d2      	mvns	r2, r2
 800437a:	b292      	uxth	r2, r2
 800437c:	4013      	ands	r3, r2
 800437e:	b299      	uxth	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bd80      	pop	{r7, pc}
 8004390:	0000bf80 	.word	0x0000bf80

08004394 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004394:	b084      	sub	sp, #16
 8004396:	b590      	push	{r4, r7, lr}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	2004      	movs	r0, #4
 80043a0:	2410      	movs	r4, #16
 80043a2:	1900      	adds	r0, r0, r4
 80043a4:	2408      	movs	r4, #8
 80043a6:	46a4      	mov	ip, r4
 80043a8:	44bc      	add	ip, r7
 80043aa:	4460      	add	r0, ip
 80043ac:	6001      	str	r1, [r0, #0]
 80043ae:	6042      	str	r2, [r0, #4]
 80043b0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2240      	movs	r2, #64	; 0x40
 80043b6:	2101      	movs	r1, #1
 80043b8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	2100      	movs	r1, #0
 80043c0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2244      	movs	r2, #68	; 0x44
 80043c6:	2100      	movs	r1, #0
 80043c8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2250      	movs	r2, #80	; 0x50
 80043ce:	2100      	movs	r1, #0
 80043d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b003      	add	sp, #12
 80043da:	bc90      	pop	{r4, r7}
 80043dc:	bc08      	pop	{r3}
 80043de:	b004      	add	sp, #16
 80043e0:	4718      	bx	r3
	...

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	2600      	movs	r6, #0
 80043e8:	4d0c      	ldr	r5, [pc, #48]	; (800441c <__libc_init_array+0x38>)
 80043ea:	4c0d      	ldr	r4, [pc, #52]	; (8004420 <__libc_init_array+0x3c>)
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	2600      	movs	r6, #0
 80043f6:	f000 f833 	bl	8004460 <_init>
 80043fa:	4d0a      	ldr	r5, [pc, #40]	; (8004424 <__libc_init_array+0x40>)
 80043fc:	4c0a      	ldr	r4, [pc, #40]	; (8004428 <__libc_init_array+0x44>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	00b3      	lsls	r3, r6, #2
 800440a:	58eb      	ldr	r3, [r5, r3]
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	00b3      	lsls	r3, r6, #2
 8004414:	58eb      	ldr	r3, [r5, r3]
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	08004534 	.word	0x08004534
 8004420:	08004534 	.word	0x08004534
 8004424:	08004534 	.word	0x08004534
 8004428:	08004538 	.word	0x08004538

0800442c <memset>:
 800442c:	0003      	movs	r3, r0
 800442e:	1882      	adds	r2, r0, r2
 8004430:	4293      	cmp	r3, r2
 8004432:	d100      	bne.n	8004436 <memset+0xa>
 8004434:	4770      	bx	lr
 8004436:	7019      	strb	r1, [r3, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	e7f9      	b.n	8004430 <memset+0x4>

0800443c <strncmp>:
 800443c:	b530      	push	{r4, r5, lr}
 800443e:	0005      	movs	r5, r0
 8004440:	1e10      	subs	r0, r2, #0
 8004442:	d008      	beq.n	8004456 <strncmp+0x1a>
 8004444:	2400      	movs	r4, #0
 8004446:	3a01      	subs	r2, #1
 8004448:	5d2b      	ldrb	r3, [r5, r4]
 800444a:	5d08      	ldrb	r0, [r1, r4]
 800444c:	4283      	cmp	r3, r0
 800444e:	d101      	bne.n	8004454 <strncmp+0x18>
 8004450:	4294      	cmp	r4, r2
 8004452:	d101      	bne.n	8004458 <strncmp+0x1c>
 8004454:	1a18      	subs	r0, r3, r0
 8004456:	bd30      	pop	{r4, r5, pc}
 8004458:	3401      	adds	r4, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f4      	bne.n	8004448 <strncmp+0xc>
 800445e:	e7f9      	b.n	8004454 <strncmp+0x18>

08004460 <_init>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr

0800446c <_fini>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr
