
UART_ESP_NEW2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000438c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004508  08004508  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08004508  08004508  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004508  08004508  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200000b4  080045c4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  080045c4  00020810  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013574  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fb  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a04a  00000000  00000000  00037d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001380c  00000000  00000000  00051d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009623a  00000000  00000000  0006556e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb7a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  000fb7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b4 	.word	0x200000b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004434 	.word	0x08004434

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b8 	.word	0x200000b8
 8000104:	08004434 	.word	0x08004434

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <AT_com>:

PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */

void AT_com(uint8_t *command, int size){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	flag = 1;
 800022a:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <AT_com+0xc8>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]
	if (flagf == 0){
 8000230:	4b2e      	ldr	r3, [pc, #184]	; (80002ec <AT_com+0xcc>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d108      	bne.n	800024a <AT_com+0x2a>
		buffera[0] = command[size];
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	18d3      	adds	r3, r2, r3
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <AT_com+0xd0>)
 8000242:	701a      	strb	r2, [r3, #0]
		flagf = 1;
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <AT_com+0xcc>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
	}
	buffera[counter] = command[0];
 800024a:	4b2a      	ldr	r3, [pc, #168]	; (80002f4 <AT_com+0xd4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	001a      	movs	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7819      	ldrb	r1, [r3, #0]
 8000254:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <AT_com+0xd0>)
 8000256:	5499      	strb	r1, [r3, r2]
	counter++;
 8000258:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <AT_com+0xd4>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <AT_com+0xd4>)
 8000262:	701a      	strb	r2, [r3, #0]
	if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 8000264:	4924      	ldr	r1, [pc, #144]	; (80002f8 <AT_com+0xd8>)
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <AT_com+0xd0>)
 8000268:	2209      	movs	r2, #9
 800026a:	0018      	movs	r0, r3
 800026c:	f004 f8d0 	bl	8004410 <strncmp>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d116      	bne.n	80002a2 <AT_com+0x82>
		flag = 0;
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <AT_com+0xc8>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
		flagf = 0;
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <AT_com+0xcc>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000280:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <AT_com+0xd4>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
		memset(buffera, 0, sizeof(buffera));
 8000286:	23af      	movs	r3, #175	; 0xaf
 8000288:	009a      	lsls	r2, r3, #2
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <AT_com+0xd0>)
 800028c:	2100      	movs	r1, #0
 800028e:	0018      	movs	r0, r3
 8000290:	f004 f8b6 	bl	8004400 <memset>
		HAL_UART_Transmit_IT(&huart1, AT_CIPMUX, sizeof(AT_CIPMUX));
 8000294:	4919      	ldr	r1, [pc, #100]	; (80002fc <AT_com+0xdc>)
 8000296:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <AT_com+0xe0>)
 8000298:	220d      	movs	r2, #13
 800029a:	0018      	movs	r0, r3
 800029c:	f002 fdb0 	bl	8002e00 <HAL_UART_Transmit_IT>
		memset(buffera, 0, sizeof(buffera));
		HAL_UART_Transmit_IT(&huart1, AT, sizeof(AT));
	}


}
 80002a0:	e01d      	b.n	80002de <AT_com+0xbe>
	}else if(strncmp(buffera,"\r\r\n\r\nERROR\r\n",8) == 0){
 80002a2:	4918      	ldr	r1, [pc, #96]	; (8000304 <AT_com+0xe4>)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <AT_com+0xd0>)
 80002a6:	2208      	movs	r2, #8
 80002a8:	0018      	movs	r0, r3
 80002aa:	f004 f8b1 	bl	8004410 <strncmp>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d115      	bne.n	80002de <AT_com+0xbe>
		flag = 0;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <AT_com+0xc8>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		flagf = 0;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <AT_com+0xcc>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <AT_com+0xd4>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
		memset(buffera, 0, sizeof(buffera));
 80002c4:	23af      	movs	r3, #175	; 0xaf
 80002c6:	009a      	lsls	r2, r3, #2
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <AT_com+0xd0>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f004 f897 	bl	8004400 <memset>
		HAL_UART_Transmit_IT(&huart1, AT, sizeof(AT));
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <AT_com+0xe8>)
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <AT_com+0xe0>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	0018      	movs	r0, r3
 80002da:	f002 fd91 	bl	8002e00 <HAL_UART_Transmit_IT>
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000391 	.word	0x20000391
 80002ec:	20000392 	.word	0x20000392
 80002f0:	200000d4 	.word	0x200000d4
 80002f4:	20000390 	.word	0x20000390
 80002f8:	0800444c 	.word	0x0800444c
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000494 	.word	0x20000494
 8000304:	08004458 	.word	0x08004458
 8000308:	20000000 	.word	0x20000000

0800030c <AT_CIPMUX_com>:
void AT_CIPMUX_com(uint8_t *command, uint8_t size){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	000a      	movs	r2, r1
 8000316:	1cfb      	adds	r3, r7, #3
 8000318:	701a      	strb	r2, [r3, #0]
	flag = 2;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <AT_CIPMUX_com+0xc0>)
 800031c:	2202      	movs	r2, #2
 800031e:	701a      	strb	r2, [r3, #0]
		if (flagf == 0){
 8000320:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d109      	bne.n	800033c <AT_CIPMUX_com+0x30>
			buffera[0] = command[size];
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	18d3      	adds	r3, r2, r3
 8000330:	781a      	ldrb	r2, [r3, #0]
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 8000334:	701a      	strb	r2, [r3, #0]
			flagf = 1;
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
		}
		buffera[counter] = command[0];
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	001a      	movs	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7819      	ldrb	r1, [r3, #0]
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 8000348:	5499      	strb	r1, [r3, r2]
		counter++;
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 8000354:	701a      	strb	r2, [r3, #0]
		if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 8000356:	4921      	ldr	r1, [pc, #132]	; (80003dc <AT_CIPMUX_com+0xd0>)
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 800035a:	2209      	movs	r2, #9
 800035c:	0018      	movs	r0, r3
 800035e:	f004 f857 	bl	8004410 <strncmp>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d116      	bne.n	8000394 <AT_CIPMUX_com+0x88>
			flag = 0;
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <AT_CIPMUX_com+0xc0>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 8000378:	23af      	movs	r3, #175	; 0xaf
 800037a:	009a      	lsls	r2, r3, #2
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 800037e:	2100      	movs	r1, #0
 8000380:	0018      	movs	r0, r3
 8000382:	f004 f83d 	bl	8004400 <memset>
			HAL_UART_Transmit_IT(&huart1, AT_CIPSERVER, sizeof(AT_CIPSERVER));
 8000386:	4916      	ldr	r1, [pc, #88]	; (80003e0 <AT_CIPMUX_com+0xd4>)
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <AT_CIPMUX_com+0xd8>)
 800038a:	2213      	movs	r2, #19
 800038c:	0018      	movs	r0, r3
 800038e:	f002 fd37 	bl	8002e00 <HAL_UART_Transmit_IT>
			flagf = 0;
			counter = 0;
			memset(buffera, 0, sizeof(buffera));
		}

}
 8000392:	e017      	b.n	80003c4 <AT_CIPMUX_com+0xb8>
		}else if(strncmp(buffera,"\r\r\nERROR\r\n",8) == 0){
 8000394:	4914      	ldr	r1, [pc, #80]	; (80003e8 <AT_CIPMUX_com+0xdc>)
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 8000398:	2208      	movs	r2, #8
 800039a:	0018      	movs	r0, r3
 800039c:	f004 f838 	bl	8004410 <strncmp>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d10f      	bne.n	80003c4 <AT_CIPMUX_com+0xb8>
			flag = 0;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <AT_CIPMUX_com+0xc0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <AT_CIPMUX_com+0xc4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <AT_CIPMUX_com+0xcc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 80003b6:	23af      	movs	r3, #175	; 0xaf
 80003b8:	009a      	lsls	r2, r3, #2
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <AT_CIPMUX_com+0xc8>)
 80003bc:	2100      	movs	r1, #0
 80003be:	0018      	movs	r0, r3
 80003c0:	f004 f81e 	bl	8004400 <memset>
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b002      	add	sp, #8
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000391 	.word	0x20000391
 80003d0:	20000392 	.word	0x20000392
 80003d4:	200000d4 	.word	0x200000d4
 80003d8:	20000390 	.word	0x20000390
 80003dc:	0800444c 	.word	0x0800444c
 80003e0:	20000014 	.word	0x20000014
 80003e4:	20000494 	.word	0x20000494
 80003e8:	08004468 	.word	0x08004468

080003ec <AT_CIPSERVER_com>:

void AT_CIPSERVER_com(uint8_t *command, uint8_t size){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cfb      	adds	r3, r7, #3
 80003f8:	701a      	strb	r2, [r3, #0]
	flag = 3;
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	701a      	strb	r2, [r3, #0]
		if (flagf == 0){
 8000400:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d109      	bne.n	800041c <AT_CIPSERVER_com+0x30>
			buffera[0] = command[size];
 8000408:	1cfb      	adds	r3, r7, #3
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	18d3      	adds	r3, r2, r3
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	4b32      	ldr	r3, [pc, #200]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 8000414:	701a      	strb	r2, [r3, #0]
			flagf = 1;
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
		}
		buffera[counter] = command[0];
 800041c:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	001a      	movs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7819      	ldrb	r1, [r3, #0]
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 8000428:	5499      	strb	r1, [r3, r2]
		counter++;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 8000434:	701a      	strb	r2, [r3, #0]
		if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 8000436:	492b      	ldr	r1, [pc, #172]	; (80004e4 <AT_CIPSERVER_com+0xf8>)
 8000438:	4b28      	ldr	r3, [pc, #160]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800043a:	2209      	movs	r2, #9
 800043c:	0018      	movs	r0, r3
 800043e:	f003 ffe7 	bl	8004410 <strncmp>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d110      	bne.n	8000468 <AT_CIPSERVER_com+0x7c>
			flag = 0;
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 8000458:	23af      	movs	r3, #175	; 0xaf
 800045a:	009a      	lsls	r2, r3, #2
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800045e:	2100      	movs	r1, #0
 8000460:	0018      	movs	r0, r3
 8000462:	f003 ffcd 	bl	8004400 <memset>
			memset(buffera, 0, sizeof(buffera));
		}



}
 8000466:	e030      	b.n	80004ca <AT_CIPSERVER_com+0xde>
		}else if(strncmp(buffera,"\r\r\nERROR\r\n",8) == 0){
 8000468:	491f      	ldr	r1, [pc, #124]	; (80004e8 <AT_CIPSERVER_com+0xfc>)
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800046c:	2208      	movs	r2, #8
 800046e:	0018      	movs	r0, r3
 8000470:	f003 ffce 	bl	8004410 <strncmp>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d110      	bne.n	800049a <AT_CIPSERVER_com+0xae>
			flag = 0;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 800048a:	23af      	movs	r3, #175	; 0xaf
 800048c:	009a      	lsls	r2, r3, #2
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 8000490:	2100      	movs	r1, #0
 8000492:	0018      	movs	r0, r3
 8000494:	f003 ffb4 	bl	8004400 <memset>
}
 8000498:	e017      	b.n	80004ca <AT_CIPSERVER_com+0xde>
		}else if(strncmp(buffera,"\r\r\nno change\r\n\r\nOK\r\n",20) == 0){
 800049a:	4914      	ldr	r1, [pc, #80]	; (80004ec <AT_CIPSERVER_com+0x100>)
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 800049e:	2214      	movs	r2, #20
 80004a0:	0018      	movs	r0, r3
 80004a2:	f003 ffb5 	bl	8004410 <strncmp>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d10f      	bne.n	80004ca <AT_CIPSERVER_com+0xde>
			flag = 0;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <AT_CIPSERVER_com+0xe8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
			flagf = 0;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <AT_CIPSERVER_com+0xec>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <AT_CIPSERVER_com+0xf4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
			memset(buffera, 0, sizeof(buffera));
 80004bc:	23af      	movs	r3, #175	; 0xaf
 80004be:	009a      	lsls	r2, r3, #2
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <AT_CIPSERVER_com+0xf0>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 ff9b 	bl	8004400 <memset>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	20000391 	.word	0x20000391
 80004d8:	20000392 	.word	0x20000392
 80004dc:	200000d4 	.word	0x200000d4
 80004e0:	20000390 	.word	0x20000390
 80004e4:	0800444c 	.word	0x0800444c
 80004e8:	08004468 	.word	0x08004468
 80004ec:	08004474 	.word	0x08004474

080004f0 <Connect>:

void Connect(uint8_t *command, int size){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	flag = 4;
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <Connect+0x98>)
 80004fc:	2204      	movs	r2, #4
 80004fe:	701a      	strb	r2, [r3, #0]
	if (flagf == 0){
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <Connect+0x9c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d108      	bne.n	800051a <Connect+0x2a>
		buffera[0] = command[size];
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	18d3      	adds	r3, r2, r3
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <Connect+0xa0>)
 8000512:	701a      	strb	r2, [r3, #0]
		flagf = 1;
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <Connect+0x9c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
	}
	buffera[counter] = command[0];
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <Connect+0xa4>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	001a      	movs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7819      	ldrb	r1, [r3, #0]
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <Connect+0xa0>)
 8000526:	5499      	strb	r1, [r3, r2]
	counter++;
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <Connect+0xa4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <Connect+0xa4>)
 8000532:	701a      	strb	r2, [r3, #0]
	int indicator = rncoun(counter, command);
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <Connect+0xa4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	001a      	movs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f000 f8ba 	bl	80006b8 <rncoun>
 8000544:	0003      	movs	r3, r0
 8000546:	60fb      	str	r3, [r7, #12]
	if (indicator == 2){
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d118      	bne.n	8000580 <Connect+0x90>
		HAL_UART_Transmit_IT(&huart1, "AT+CIPSEND=0,126\r\n", 18);
 800054e:	4912      	ldr	r1, [pc, #72]	; (8000598 <Connect+0xa8>)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <Connect+0xac>)
 8000552:	2212      	movs	r2, #18
 8000554:	0018      	movs	r0, r3
 8000556:	f002 fc53 	bl	8002e00 <HAL_UART_Transmit_IT>
		flag = 0;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <Connect+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
		flagf = 0;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <Connect+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <Connect+0xa4>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
		counternn = 0;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <Connect+0xb0>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
		memset(buffera, 0, sizeof(buffera));
 8000572:	23af      	movs	r3, #175	; 0xaf
 8000574:	009a      	lsls	r2, r3, #2
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <Connect+0xa0>)
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f003 ff40 	bl	8004400 <memset>
	}
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b004      	add	sp, #16
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000391 	.word	0x20000391
 800058c:	20000392 	.word	0x20000392
 8000590:	200000d4 	.word	0x200000d4
 8000594:	20000390 	.word	0x20000390
 8000598:	0800448c 	.word	0x0800448c
 800059c:	20000494 	.word	0x20000494
 80005a0:	20000394 	.word	0x20000394

080005a4 <AT_send>:
void AT_send(uint8_t *command, int size){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	flag = 5;
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <AT_send+0xf0>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	701a      	strb	r2, [r3, #0]
			if (flagf == 0){
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <AT_send+0xf4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d108      	bne.n	80005ce <AT_send+0x2a>
				buffera[0] = command[size];
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	18d3      	adds	r3, r2, r3
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <AT_send+0xf8>)
 80005c6:	701a      	strb	r2, [r3, #0]
				flagf = 1;
 80005c8:	4b33      	ldr	r3, [pc, #204]	; (8000698 <AT_send+0xf4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
			}
			buffera[counter] = command[0];
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <AT_send+0xfc>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	001a      	movs	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7819      	ldrb	r1, [r3, #0]
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <AT_send+0xf8>)
 80005da:	5499      	strb	r1, [r3, r2]
			counter++;
 80005dc:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <AT_send+0xfc>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <AT_send+0xfc>)
 80005e6:	701a      	strb	r2, [r3, #0]
			if(strncmp(buffera,"\r\r\n\r\nOK\r\n",9) == 0){
 80005e8:	492e      	ldr	r1, [pc, #184]	; (80006a4 <AT_send+0x100>)
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <AT_send+0xf8>)
 80005ec:	2209      	movs	r2, #9
 80005ee:	0018      	movs	r0, r3
 80005f0:	f003 ff0e 	bl	8004410 <strncmp>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d117      	bne.n	8000628 <AT_send+0x84>
				flag = 0;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <AT_send+0xf0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
				flagf = 0;
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <AT_send+0xf4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <AT_send+0xfc>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
				memset(buffera, 0, sizeof(buffera));
 800060a:	23af      	movs	r3, #175	; 0xaf
 800060c:	009a      	lsls	r2, r3, #2
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <AT_send+0xf8>)
 8000610:	2100      	movs	r1, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f003 fef4 	bl	8004400 <memset>
				HAL_UART_Transmit(&huart1, html, sizeof(html), 500);
 8000618:	23fa      	movs	r3, #250	; 0xfa
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4922      	ldr	r1, [pc, #136]	; (80006a8 <AT_send+0x104>)
 800061e:	4823      	ldr	r0, [pc, #140]	; (80006ac <AT_send+0x108>)
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	f002 fb43 	bl	8002cac <HAL_UART_Transmit>
				flag = 0;
				flagf = 0;
				counter = 0;
				memset(buffera, 0, sizeof(buffera));
			}
}
 8000626:	e030      	b.n	800068a <AT_send+0xe6>
			}else if(strncmp(buffera,"\r\r\nERROR\r\n",8) == 0){
 8000628:	4921      	ldr	r1, [pc, #132]	; (80006b0 <AT_send+0x10c>)
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <AT_send+0xf8>)
 800062c:	2208      	movs	r2, #8
 800062e:	0018      	movs	r0, r3
 8000630:	f003 feee 	bl	8004410 <strncmp>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d110      	bne.n	800065a <AT_send+0xb6>
				flag = 0;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <AT_send+0xf0>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
				flagf = 0;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <AT_send+0xf4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <AT_send+0xfc>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
				memset(buffera, 0, sizeof(buffera));
 800064a:	23af      	movs	r3, #175	; 0xaf
 800064c:	009a      	lsls	r2, r3, #2
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <AT_send+0xf8>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f003 fed4 	bl	8004400 <memset>
}
 8000658:	e017      	b.n	800068a <AT_send+0xe6>
			}else if(strncmp(buffera,"\r\r\nno change\r\n\r\nOK\r\n",20) == 0){
 800065a:	4916      	ldr	r1, [pc, #88]	; (80006b4 <AT_send+0x110>)
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <AT_send+0xf8>)
 800065e:	2214      	movs	r2, #20
 8000660:	0018      	movs	r0, r3
 8000662:	f003 fed5 	bl	8004410 <strncmp>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d10f      	bne.n	800068a <AT_send+0xe6>
				flag = 0;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <AT_send+0xf0>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
				flagf = 0;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <AT_send+0xf4>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <AT_send+0xfc>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
				memset(buffera, 0, sizeof(buffera));
 800067c:	23af      	movs	r3, #175	; 0xaf
 800067e:	009a      	lsls	r2, r3, #2
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <AT_send+0xf8>)
 8000682:	2100      	movs	r1, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f003 febb 	bl	8004400 <memset>
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000391 	.word	0x20000391
 8000698:	20000392 	.word	0x20000392
 800069c:	200000d4 	.word	0x200000d4
 80006a0:	20000390 	.word	0x20000390
 80006a4:	0800444c 	.word	0x0800444c
 80006a8:	20000028 	.word	0x20000028
 80006ac:	20000494 	.word	0x20000494
 80006b0:	08004468 	.word	0x08004468
 80006b4:	08004474 	.word	0x08004474

080006b8 <rncoun>:
int rncoun(int size, uint8_t *symb){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	if(symb[0] == '\r' || symcount > 0){
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b0d      	cmp	r3, #13
 80006c8:	d003      	beq.n	80006d2 <rncoun+0x1a>
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <rncoun+0x94>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dd36      	ble.n	8000740 <rncoun+0x88>
		symbbyf[symcount] = symb[0];
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <rncoun+0x94>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	7811      	ldrb	r1, [r2, #0]
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <rncoun+0x98>)
 80006dc:	54d1      	strb	r1, [r2, r3]
		symcount++;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <rncoun+0x94>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <rncoun+0x94>)
 80006e6:	601a      	str	r2, [r3, #0]
		if (symcount == 4){
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <rncoun+0x94>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d127      	bne.n	8000740 <rncoun+0x88>
			if(symbbyf[0] == '\r' && symbbyf[1] == '\n' && symbbyf[2] == '\r' && symbbyf[3] == '\n'){
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <rncoun+0x98>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d11a      	bne.n	800072e <rncoun+0x76>
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <rncoun+0x98>)
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	d116      	bne.n	800072e <rncoun+0x76>
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <rncoun+0x98>)
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d112      	bne.n	800072e <rncoun+0x76>
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <rncoun+0x98>)
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	2b0a      	cmp	r3, #10
 800070e:	d10e      	bne.n	800072e <rncoun+0x76>
				counternn ++;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <rncoun+0x9c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <rncoun+0x9c>)
 8000718:	601a      	str	r2, [r3, #0]
				symcount = 0;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <rncoun+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
				memset(symbbyf, 0, sizeof(symbbyf));
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <rncoun+0x98>)
 8000722:	2204      	movs	r2, #4
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fe6a 	bl	8004400 <memset>
			if(symbbyf[0] == '\r' && symbbyf[1] == '\n' && symbbyf[2] == '\r' && symbbyf[3] == '\n'){
 800072c:	e008      	b.n	8000740 <rncoun+0x88>
			} else {
				symcount = 0;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <rncoun+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
				memset(symbbyf, 0, sizeof(symbbyf));
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <rncoun+0x98>)
 8000736:	2204      	movs	r2, #4
 8000738:	2100      	movs	r1, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f003 fe60 	bl	8004400 <memset>
			}

		}

	}
	return counternn;
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <rncoun+0x9c>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000398 	.word	0x20000398
 8000750:	2000039c 	.word	0x2000039c
 8000754:	20000394 	.word	0x20000394

08000758 <foo>:

void foo(uint8_t *command, int size){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
    if((strncmp(command,"AT",size-1) == 0 && size > 1) || flag == 1){
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	493d      	ldr	r1, [pc, #244]	; (800085c <foo+0x104>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f003 fe50 	bl	8004410 <strncmp>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d102      	bne.n	800077a <foo+0x22>
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	dc03      	bgt.n	8000782 <foo+0x2a>
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <foo+0x108>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d106      	bne.n	8000790 <foo+0x38>
    	AT_com(command,size);
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fd49 	bl	8000220 <AT_com>
 800078e:	e060      	b.n	8000852 <foo+0xfa>
    } else if((strncmp(command,"AT+CIPMUX=1",size-1) == 0 && size > 1) || flag == 2){
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	4933      	ldr	r1, [pc, #204]	; (8000864 <foo+0x10c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0018      	movs	r0, r3
 800079a:	f003 fe39 	bl	8004410 <strncmp>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d102      	bne.n	80007a8 <foo+0x50>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	dc03      	bgt.n	80007b0 <foo+0x58>
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <foo+0x108>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d107      	bne.n	80007c0 <foo+0x68>
    	AT_CIPMUX_com(command,size);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fda7 	bl	800030c <AT_CIPMUX_com>
 80007be:	e048      	b.n	8000852 <foo+0xfa>
    } else if ((strncmp(command,"AT+CIPSERVER=1,80",size-1) == 0 && size > 1) || flag == 3){
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	4928      	ldr	r1, [pc, #160]	; (8000868 <foo+0x110>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 fe21 	bl	8004410 <strncmp>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d102      	bne.n	80007d8 <foo+0x80>
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	dc03      	bgt.n	80007e0 <foo+0x88>
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <foo+0x108>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d107      	bne.n	80007f0 <foo+0x98>
    	AT_CIPSERVER_com(command,size);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fdff 	bl	80003ec <AT_CIPSERVER_com>
 80007ee:	e030      	b.n	8000852 <foo+0xfa>
    } else if ((strncmp(command,"0,CONNECT",size-1) == 0 && size > 1) || flag == 4){
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	491d      	ldr	r1, [pc, #116]	; (800086c <foo+0x114>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 fe09 	bl	8004410 <strncmp>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d102      	bne.n	8000808 <foo+0xb0>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	dc03      	bgt.n	8000810 <foo+0xb8>
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <foo+0x108>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d109      	bne.n	8000824 <foo+0xcc>
    	flag = 4;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <foo+0x108>)
 8000812:	2204      	movs	r2, #4
 8000814:	701a      	strb	r2, [r3, #0]
    	Connect(command,size);
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fe67 	bl	80004f0 <Connect>
 8000822:	e016      	b.n	8000852 <foo+0xfa>
    } else if((strncmp(command,"AT+CIPSEND=0,126\r\n",size-1) == 0 && size > 1) || flag == 5){
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	1e5a      	subs	r2, r3, #1
 8000828:	4911      	ldr	r1, [pc, #68]	; (8000870 <foo+0x118>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	0018      	movs	r0, r3
 800082e:	f003 fdef 	bl	8004410 <strncmp>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d102      	bne.n	800083c <foo+0xe4>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	dc03      	bgt.n	8000844 <foo+0xec>
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <foo+0x108>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b05      	cmp	r3, #5
 8000842:	d106      	bne.n	8000852 <foo+0xfa>
    	AT_send(command,size);
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff feaa 	bl	80005a4 <AT_send>
    }
}
 8000850:	e7ff      	b.n	8000852 <foo+0xfa>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	080044a0 	.word	0x080044a0
 8000860:	20000391 	.word	0x20000391
 8000864:	080044a4 	.word	0x080044a4
 8000868:	080044b0 	.word	0x080044b0
 800086c:	080044c4 	.word	0x080044c4
 8000870:	0800448c 	.word	0x0800448c

08000874 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if(buffer[0] != '\r' && buffer[0] != '\n' && flag == 0){
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <HAL_UART_RxCpltCallback+0x88>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b0d      	cmp	r3, #13
 8000882:	d015      	beq.n	80008b0 <HAL_UART_RxCpltCallback+0x3c>
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_UART_RxCpltCallback+0x88>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b0a      	cmp	r3, #10
 800088a:	d011      	beq.n	80008b0 <HAL_UART_RxCpltCallback+0x3c>
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_UART_RxCpltCallback+0x8c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10d      	bne.n	80008b0 <HAL_UART_RxCpltCallback+0x3c>
		buffera[counter] = buffer[0];
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_UART_RxCpltCallback+0x90>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_UART_RxCpltCallback+0x88>)
 800089c:	7819      	ldrb	r1, [r3, #0]
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <HAL_UART_RxCpltCallback+0x94>)
 80008a0:	5499      	strb	r1, [r3, r2]
		counter++;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_UART_RxCpltCallback+0x90>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_UART_RxCpltCallback+0x90>)
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e01b      	b.n	80008e8 <HAL_UART_RxCpltCallback+0x74>
	} else if(flag != 0){
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_UART_RxCpltCallback+0x8c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <HAL_UART_RxCpltCallback+0x50>
		foo(buffer, 1);
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_UART_RxCpltCallback+0x88>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff4b 	bl	8000758 <foo>
 80008c2:	e011      	b.n	80008e8 <HAL_UART_RxCpltCallback+0x74>
	}
	else {
		buffera[counter] = buffer[0];
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_UART_RxCpltCallback+0x90>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_UART_RxCpltCallback+0x88>)
 80008cc:	7819      	ldrb	r1, [r3, #0]
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_UART_RxCpltCallback+0x94>)
 80008d0:	5499      	strb	r1, [r3, r2]
		foo(buffera,counter);
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_UART_RxCpltCallback+0x90>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	001a      	movs	r2, r3
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_UART_RxCpltCallback+0x94>)
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff3b 	bl	8000758 <foo>
		counter = 1;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_UART_RxCpltCallback+0x90>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 80008e8:	4904      	ldr	r1, [pc, #16]	; (80008fc <HAL_UART_RxCpltCallback+0x88>)
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_UART_RxCpltCallback+0x98>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 fb06 	bl	8002f00 <HAL_UART_Receive_IT>
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000d0 	.word	0x200000d0
 8000900:	20000391 	.word	0x20000391
 8000904:	20000390 	.word	0x20000390
 8000908:	200000d4 	.word	0x200000d4
 800090c:	20000494 	.word	0x20000494

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fc5c 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f820 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f000 f9a0 	bl	8000c60 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000920:	f000 f886 	bl	8000a30 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000924:	f000 f8c4 	bl	8000ab0 <MX_SPI2_Init>
  MX_TSC_Init();
 8000928:	f000 f900 	bl	8000b2c <MX_TSC_Init>
  MX_USB_PCD_Init();
 800092c:	f000 f972 	bl	8000c14 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000930:	f000 f940 	bl	8000bb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <main+0x40>)
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <main+0x44>)
 8000938:	2201      	movs	r2, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f002 fae0 	bl	8002f00 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, AT, sizeof(AT));
 8000940:	4905      	ldr	r1, [pc, #20]	; (8000958 <main+0x48>)
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <main+0x44>)
 8000944:	2204      	movs	r2, #4
 8000946:	0018      	movs	r0, r3
 8000948:	f002 fa5a 	bl	8002e00 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094c:	e7fe      	b.n	800094c <main+0x3c>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	200000d0 	.word	0x200000d0
 8000954:	20000494 	.word	0x20000494
 8000958:	20000000 	.word	0x20000000

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b099      	sub	sp, #100	; 0x64
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	242c      	movs	r4, #44	; 0x2c
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	2334      	movs	r3, #52	; 0x34
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fd47 	bl	8004400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000972:	231c      	movs	r3, #28
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	0018      	movs	r0, r3
 8000978:	2310      	movs	r3, #16
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f003 fd3f 	bl	8004400 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	231c      	movs	r3, #28
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f003 fd38 	bl	8004400 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000990:	0021      	movs	r1, r4
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2222      	movs	r2, #34	; 0x22
 8000996:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2210      	movs	r2, #16
 80009a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2202      	movs	r2, #2
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0212      	lsls	r2, r2, #8
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	0352      	lsls	r2, r2, #13
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f9bf 	bl	8001d4c <HAL_RCC_OscConfig>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009d2:	f000 f9cf 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	211c      	movs	r1, #28
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2207      	movs	r2, #7
 80009dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2101      	movs	r1, #1
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fd2f 	bl	8002458 <HAL_RCC_ClockConfig>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009fe:	f000 f9b9 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8000a02:	003b      	movs	r3, r7
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <SystemClock_Config+0xd0>)
 8000a06:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	003b      	movs	r3, r7
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fe98 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a20:	f000 f9a8 	bl	8000d74 <Error_Handler>
  }
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b019      	add	sp, #100	; 0x64
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	00020001 	.word	0x00020001

08000a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_I2C2_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <MX_I2C2_Init+0x7c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 ff05 	bl	800187c <HAL_I2C_Init>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a76:	f000 f97d 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 ff92 	bl	80019a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 f974 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <MX_I2C2_Init+0x74>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 ffd5 	bl	8001a40 <HAL_I2CEx_ConfigDigitalFilter>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 f96b 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200003a0 	.word	0x200003a0
 8000aa8:	40005800 	.word	0x40005800
 8000aac:	20303e5d 	.word	0x20303e5d

08000ab0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_SPI2_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000abc:	2282      	movs	r2, #130	; 0x82
 8000abe:	0052      	lsls	r2, r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000aca:	22c0      	movs	r2, #192	; 0xc0
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 ff19 	bl	8002948 <HAL_SPI_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f92b 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200003ec 	.word	0x200003ec
 8000b28:	40003800 	.word	0x40003800

08000b2c <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_TSC_Init+0x80>)
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <MX_TSC_Init+0x84>)
 8000b34:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_TSC_Init+0x80>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0552      	lsls	r2, r2, #21
 8000b3c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_TSC_Init+0x80>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	0452      	lsls	r2, r2, #17
 8000b44:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_TSC_Init+0x80>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_TSC_Init+0x80>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_TSC_Init+0x80>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_TSC_Init+0x80>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	0192      	lsls	r2, r2, #6
 8000b5e:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_TSC_Init+0x80>)
 8000b62:	22a0      	movs	r2, #160	; 0xa0
 8000b64:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_TSC_Init+0x80>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_TSC_Init+0x80>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_TSC_Init+0x80>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_TSC_Init+0x80>)
 8000b7a:	222c      	movs	r2, #44	; 0x2c
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_TSC_Init+0x80>)
 8000b82:	2291      	movs	r2, #145	; 0x91
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_TSC_Init+0x80>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_TSC_Init+0x80>)
 8000b90:	2291      	movs	r2, #145	; 0x91
 8000b92:	00d2      	lsls	r2, r2, #3
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <MX_TSC_Init+0x80>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 ff8d 	bl	8002ab8 <HAL_TSC_Init>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000ba2:	f000 f8e7 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000450 	.word	0x20000450
 8000bb0:	40024000 	.word	0x40024000

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <MX_USART1_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bc0:	22e1      	movs	r2, #225	; 0xe1
 8000bc2:	0252      	lsls	r2, r2, #9
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 f803 	bl	8002c04 <HAL_UART_Init>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f8b7 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000494 	.word	0x20000494
 8000c10:	40013800 	.word	0x40013800

08000c14 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <MX_USB_PCD_Init+0x48>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_USB_PCD_Init+0x44>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 ff47 	bl	8001ad8 <HAL_PCD_Init>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000c4e:	f000 f891 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000518 	.word	0x20000518
 8000c5c:	40005c00 	.word	0x40005c00

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b08b      	sub	sp, #44	; 0x2c
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	2414      	movs	r4, #20
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2314      	movs	r3, #20
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f003 fbc5 	bl	8004400 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c76:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	03c9      	lsls	r1, r1, #15
 8000c80:	430a      	orrs	r2, r1
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	03db      	lsls	r3, r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	0309      	lsls	r1, r1, #12
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	031b      	lsls	r3, r3, #12
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	0289      	lsls	r1, r1, #10
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	029b      	lsls	r3, r3, #10
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	02c9      	lsls	r1, r1, #11
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000cda:	695a      	ldr	r2, [r3, #20]
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	02db      	lsls	r3, r3, #11
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000ce6:	4921      	ldr	r1, [pc, #132]	; (8000d6c <MX_GPIO_Init+0x10c>)
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fda7 	bl	8001840 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <MX_GPIO_Init+0x10c>)
 8000cf6:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f000 fc1d 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000d16:	0021      	movs	r1, r4
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2290      	movs	r2, #144	; 0x90
 8000d22:	0352      	lsls	r2, r2, #13
 8000d24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	000c      	movs	r4, r1
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d32:	0019      	movs	r1, r3
 8000d34:	0010      	movs	r0, r2
 8000d36:	f000 fc0b 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2290      	movs	r2, #144	; 0x90
 8000d46:	0352      	lsls	r2, r2, #13
 8000d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	187a      	adds	r2, r7, r1
 8000d52:	2390      	movs	r3, #144	; 0x90
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 fbf9 	bl	8001550 <HAL_GPIO_Init>

}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b00b      	add	sp, #44	; 0x2c
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	000003e1 	.word	0x000003e1
 8000d70:	48000800 	.word	0x48000800

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	699a      	ldr	r2, [r3, #24]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	619a      	str	r2, [r3, #24]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	69da      	ldr	r2, [r3, #28]
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0549      	lsls	r1, r1, #21
 8000da8:	430a      	orrs	r2, r1
 8000daa:	61da      	str	r2, [r3, #28]
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dae:	69da      	ldr	r2, [r3, #28]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	055b      	lsls	r3, r3, #21
 8000db4:	4013      	ands	r3, r2
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b08b      	sub	sp, #44	; 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	2414      	movs	r4, #20
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f003 fb10 	bl	8004400 <memset>
  if(hi2c->Instance==I2C2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d132      	bne.n	8000e50 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	02c9      	lsls	r1, r1, #11
 8000df4:	430a      	orrs	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	02db      	lsls	r3, r3, #11
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	22c0      	movs	r2, #192	; 0xc0
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	0021      	movs	r1, r4
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2212      	movs	r2, #18
 8000e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2201      	movs	r2, #1
 8000e1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2201      	movs	r2, #1
 8000e26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f000 fb8e 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	03c9      	lsls	r1, r1, #15
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	61da      	str	r2, [r3, #28]
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e44:	69da      	ldr	r2, [r3, #28]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	03db      	lsls	r3, r3, #15
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b00b      	add	sp, #44	; 0x2c
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	40005800 	.word	0x40005800
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48000400 	.word	0x48000400

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b08b      	sub	sp, #44	; 0x2c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	2414      	movs	r4, #20
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	0018      	movs	r0, r3
 8000e72:	2314      	movs	r3, #20
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f003 fac2 	bl	8004400 <memset>
  if(hspi->Instance==SPI2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_SPI_MspInit+0x90>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d132      	bne.n	8000eec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000e88:	69da      	ldr	r2, [r3, #28]
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	01c9      	lsls	r1, r1, #7
 8000e90:	430a      	orrs	r2, r1
 8000e92:	61da      	str	r2, [r3, #28]
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	01db      	lsls	r3, r3, #7
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	02c9      	lsls	r1, r1, #11
 8000eac:	430a      	orrs	r2, r1
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	02db      	lsls	r3, r3, #11
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	22e0      	movs	r2, #224	; 0xe0
 8000ec2:	0212      	lsls	r2, r2, #8
 8000ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2202      	movs	r2, #2
 8000ecc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_SPI_MspInit+0x98>)
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	0010      	movs	r0, r2
 8000ee8:	f000 fb32 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b00b      	add	sp, #44	; 0x2c
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	40003800 	.word	0x40003800
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000400 	.word	0x48000400

08000f00 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	; 0x2c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	2414      	movs	r4, #20
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	2314      	movs	r3, #20
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f003 fa74 	bl	8004400 <memset>
  if(htsc->Instance==TSC)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a44      	ldr	r2, [pc, #272]	; (8001030 <HAL_TSC_MspInit+0x130>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d000      	beq.n	8000f24 <HAL_TSC_MspInit+0x24>
 8000f22:	e080      	b.n	8001026 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000f24:	4b43      	ldr	r3, [pc, #268]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	0449      	lsls	r1, r1, #17
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	045b      	lsls	r3, r3, #17
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	0289      	lsls	r1, r1, #10
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	029b      	lsls	r3, r3, #10
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	02c9      	lsls	r1, r1, #11
 8000f66:	430a      	orrs	r2, r1
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <HAL_TSC_MspInit+0x134>)
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	02db      	lsls	r3, r3, #11
 8000f72:	4013      	ands	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2244      	movs	r2, #68	; 0x44
 8000f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2202      	movs	r2, #2
 8000f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2203      	movs	r2, #3
 8000f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	193a      	adds	r2, r7, r4
 8000f98:	2390      	movs	r3, #144	; 0x90
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fad6 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2288      	movs	r2, #136	; 0x88
 8000fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2212      	movs	r2, #18
 8000fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	193a      	adds	r2, r7, r4
 8000fc4:	2390      	movs	r3, #144	; 0x90
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fac0 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	2202      	movs	r2, #2
 8000fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2203      	movs	r2, #3
 8000fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_TSC_MspInit+0x138>)
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	f000 faab 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ffa:	0021      	movs	r1, r4
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2202      	movs	r2, #2
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2212      	movs	r2, #18
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2203      	movs	r2, #3
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	187b      	adds	r3, r7, r1
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_TSC_MspInit+0x138>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f000 fa95 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b00b      	add	sp, #44	; 0x2c
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40024000 	.word	0x40024000
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	2414      	movs	r4, #20
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	2314      	movs	r3, #20
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f003 f9d6 	bl	8004400 <memset>
  if(huart->Instance==USART1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_UART_MspInit+0xa4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d13b      	bne.n	80010d6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_UART_MspInit+0xa8>)
 8001060:	699a      	ldr	r2, [r3, #24]
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_UART_MspInit+0xa8>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	01c9      	lsls	r1, r1, #7
 8001068:	430a      	orrs	r2, r1
 800106a:	619a      	str	r2, [r3, #24]
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0xa8>)
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0xa8>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0xa8>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0289      	lsls	r1, r1, #10
 8001084:	430a      	orrs	r2, r1
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0xa8>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	22c0      	movs	r2, #192	; 0xc0
 800109a:	00d2      	lsls	r2, r2, #3
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2202      	movs	r2, #2
 80010a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2203      	movs	r2, #3
 80010b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	187a      	adds	r2, r7, r1
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fa45 	bl	8001550 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	201b      	movs	r0, #27
 80010cc:	f000 f990 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010d0:	201b      	movs	r0, #27
 80010d2:	f000 f9a2 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b00b      	add	sp, #44	; 0x2c
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_PCD_MspInit+0x38>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10d      	bne.n	8001116 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_PCD_MspInit+0x3c>)
 80010fc:	69da      	ldr	r2, [r3, #28]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_PCD_MspInit+0x3c>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0409      	lsls	r1, r1, #16
 8001104:	430a      	orrs	r2, r1
 8001106:	61da      	str	r2, [r3, #28]
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_PCD_MspInit+0x3c>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	40005c00 	.word	0x40005c00
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f888 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <USART1_IRQHandler+0x14>)
 800115e:	0018      	movs	r0, r3
 8001160:	f001 ff30 	bl	8002fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000494 	.word	0x20000494

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0b      	ldr	r4, [pc, #44]	; (80011c8 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011a6:	f7ff ffe3 	bl	8001170 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011aa:	f003 f905 	bl	80043b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ae:	f7ff fbaf 	bl	8000910 <main>

080011b2 <LoopForever>:

LoopForever:
    b LoopForever
 80011b2:	e7fe      	b.n	80011b2 <LoopForever>
  ldr   r0, =_estack
 80011b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80011c0:	08004510 	.word	0x08004510
  ldr r2, =_sbss
 80011c4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80011c8:	20000810 	.word	0x20000810

080011cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_COMP_IRQHandler>
	...

080011d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_Init+0x24>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_Init+0x24>)
 80011da:	2110      	movs	r1, #16
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f809 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e6:	f7ff fdcb 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_InitTick+0x5c>)
 8001202:	681c      	ldr	r4, [r3, #0]
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	0019      	movs	r1, r3
 800120a:	23fa      	movs	r3, #250	; 0xfa
 800120c:	0098      	lsls	r0, r3, #2
 800120e:	f7fe ff7b 	bl	8000108 <__udivsi3>
 8001212:	0003      	movs	r3, r0
 8001214:	0019      	movs	r1, r3
 8001216:	0020      	movs	r0, r4
 8001218:	f7fe ff76 	bl	8000108 <__udivsi3>
 800121c:	0003      	movs	r3, r0
 800121e:	0018      	movs	r0, r3
 8001220:	f000 f90b 	bl	800143a <HAL_SYSTICK_Config>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d001      	beq.n	800122c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e00f      	b.n	800124c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d80b      	bhi.n	800124a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2301      	movs	r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	2200      	movs	r2, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 f8d8 	bl	80013f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_InitTick+0x64>)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b003      	add	sp, #12
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	200000a8 	.word	0x200000a8
 8001258:	200000b0 	.word	0x200000b0
 800125c:	200000ac 	.word	0x200000ac

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	001a      	movs	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	18d2      	adds	r2, r2, r3
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_IncTick+0x20>)
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	200000b0 	.word	0x200000b0
 8001280:	2000080c 	.word	0x2000080c

08001284 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	2000080c 	.word	0x2000080c

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	0002      	movs	r2, r0
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b7f      	cmp	r3, #127	; 0x7f
 80012aa:	d809      	bhi.n	80012c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	001a      	movs	r2, r3
 80012b2:	231f      	movs	r3, #31
 80012b4:	401a      	ands	r2, r3
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_EnableIRQ+0x30>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	4091      	lsls	r1, r2
 80012bc:	000a      	movs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
  }
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	0002      	movs	r2, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b7f      	cmp	r3, #127	; 0x7f
 80012e0:	d828      	bhi.n	8001334 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <__NVIC_SetPriority+0xd4>)
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	33c0      	adds	r3, #192	; 0xc0
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	589b      	ldr	r3, [r3, r2]
 80012f2:	1dfa      	adds	r2, r7, #7
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	0011      	movs	r1, r2
 80012f8:	2203      	movs	r2, #3
 80012fa:	400a      	ands	r2, r1
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	21ff      	movs	r1, #255	; 0xff
 8001300:	4091      	lsls	r1, r2
 8001302:	000a      	movs	r2, r1
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	401a      	ands	r2, r3
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	0018      	movs	r0, r3
 8001318:	2303      	movs	r3, #3
 800131a:	4003      	ands	r3, r0
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <__NVIC_SetPriority+0xd4>)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	430a      	orrs	r2, r1
 800132c:	33c0      	adds	r3, #192	; 0xc0
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001332:	e031      	b.n	8001398 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <__NVIC_SetPriority+0xd8>)
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	0019      	movs	r1, r3
 800133c:	230f      	movs	r3, #15
 800133e:	400b      	ands	r3, r1
 8001340:	3b08      	subs	r3, #8
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3306      	adds	r3, #6
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	3304      	adds	r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1dfa      	adds	r2, r7, #7
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	0011      	movs	r1, r2
 8001354:	2203      	movs	r2, #3
 8001356:	400a      	ands	r2, r1
 8001358:	00d2      	lsls	r2, r2, #3
 800135a:	21ff      	movs	r1, #255	; 0xff
 800135c:	4091      	lsls	r1, r2
 800135e:	000a      	movs	r2, r1
 8001360:	43d2      	mvns	r2, r2
 8001362:	401a      	ands	r2, r3
 8001364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	401a      	ands	r2, r3
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	0018      	movs	r0, r3
 8001374:	2303      	movs	r3, #3
 8001376:	4003      	ands	r3, r0
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <__NVIC_SetPriority+0xd8>)
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	001c      	movs	r4, r3
 8001384:	230f      	movs	r3, #15
 8001386:	4023      	ands	r3, r4
 8001388:	3b08      	subs	r3, #8
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	430a      	orrs	r2, r1
 800138e:	3306      	adds	r3, #6
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	18c3      	adds	r3, r0, r3
 8001394:	3304      	adds	r3, #4
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b003      	add	sp, #12
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1e5a      	subs	r2, r3, #1
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	045b      	lsls	r3, r3, #17
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d301      	bcc.n	80013c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013bc:	2301      	movs	r3, #1
 80013be:	e010      	b.n	80013e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <SysTick_Config+0x44>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	3a01      	subs	r2, #1
 80013c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c8:	2301      	movs	r3, #1
 80013ca:	425b      	negs	r3, r3
 80013cc:	2103      	movs	r1, #3
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff ff7c 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x44>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x44>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	210f      	movs	r1, #15
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	1c02      	adds	r2, r0, #0
 8001400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	187b      	adds	r3, r7, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	0011      	movs	r1, r2
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	0002      	movs	r2, r0
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff ff33 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ffaf 	bl	80013a8 <SysTick_Config>
 800144a:	0003      	movs	r3, r0
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2221      	movs	r2, #33	; 0x21
 8001460:	5c9b      	ldrb	r3, [r3, r2]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d008      	beq.n	800147a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	2100      	movs	r1, #0
 8001474:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e020      	b.n	80014bc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	210e      	movs	r1, #14
 8001486:	438a      	bics	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	438a      	bics	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a2:	2101      	movs	r1, #1
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2221      	movs	r2, #33	; 0x21
 80014ae:	2101      	movs	r1, #1
 80014b0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2220      	movs	r2, #32
 80014b6:	2100      	movs	r1, #0
 80014b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	210f      	movs	r1, #15
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2221      	movs	r2, #33	; 0x21
 80014d8:	5c9b      	ldrb	r3, [r3, r2]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d006      	beq.n	80014ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e028      	b.n	8001540 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	210e      	movs	r1, #14
 80014fa:	438a      	bics	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	438a      	bics	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2101      	movs	r1, #1
 8001518:	4091      	lsls	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2221      	movs	r2, #33	; 0x21
 8001522:	2101      	movs	r1, #1
 8001524:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	0010      	movs	r0, r2
 800153e:	4798      	blx	r3
    } 
  }
  return status;
 8001540:	230f      	movs	r3, #15
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	781b      	ldrb	r3, [r3, #0]
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e155      	b.n	800180c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4091      	lsls	r1, r2
 800156a:	000a      	movs	r2, r1
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <HAL_GPIO_Init+0x28>
 8001576:	e146      	b.n	8001806 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	4013      	ands	r3, r2
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800158c:	2b02      	cmp	r3, #2
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	2201      	movs	r2, #1
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d017      	beq.n	800162e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	4013      	ands	r3, r2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d123      	bne.n	8001682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	58d3      	ldr	r3, [r2, r3]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2207      	movs	r2, #7
 800164c:	4013      	ands	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2107      	movs	r1, #7
 8001666:	400b      	ands	r3, r1
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	401a      	ands	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d100      	bne.n	80016c4 <HAL_GPIO_Init+0x174>
 80016c2:	e0a0      	b.n	8001806 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <HAL_GPIO_Init+0x2d4>)
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_GPIO_Init+0x2d4>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_GPIO_Init+0x2d4>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_GPIO_Init+0x2d8>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	589b      	ldr	r3, [r3, r2]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4013      	ands	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0013      	movs	r3, r2
 80016f8:	43da      	mvns	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	2390      	movs	r3, #144	; 0x90
 8001704:	05db      	lsls	r3, r3, #23
 8001706:	429a      	cmp	r2, r3
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x1ee>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a47      	ldr	r2, [pc, #284]	; (800182c <HAL_GPIO_Init+0x2dc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x1ea>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a46      	ldr	r2, [pc, #280]	; (8001830 <HAL_GPIO_Init+0x2e0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x1e6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a45      	ldr	r2, [pc, #276]	; (8001834 <HAL_GPIO_Init+0x2e4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x1e2>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a44      	ldr	r2, [pc, #272]	; (8001838 <HAL_GPIO_Init+0x2e8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x1de>
 800172a:	2304      	movs	r3, #4
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x1f0>
 800172e:	2305      	movs	r3, #5
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x1f0>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x1f0>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x1f0>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x1f0>
 800173e:	2300      	movs	r3, #0
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	2103      	movs	r1, #3
 8001744:	400a      	ands	r2, r1
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	; (8001828 <HAL_GPIO_Init+0x2d8>)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_GPIO_Init+0x2ec>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_GPIO_Init+0x2ec>)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001788:	4b2c      	ldr	r3, [pc, #176]	; (800183c <HAL_GPIO_Init+0x2ec>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	029b      	lsls	r3, r3, #10
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_GPIO_Init+0x2ec>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_GPIO_Init+0x2ec>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	035b      	lsls	r3, r3, #13
 80017ca:	4013      	ands	r3, r2
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_GPIO_Init+0x2ec>)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_GPIO_Init+0x2ec>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43da      	mvns	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	039b      	lsls	r3, r3, #14
 80017f4:	4013      	ands	r3, r2
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_GPIO_Init+0x2ec>)
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	40da      	lsrs	r2, r3
 8001814:	1e13      	subs	r3, r2, #0
 8001816:	d000      	beq.n	800181a <HAL_GPIO_Init+0x2ca>
 8001818:	e6a2      	b.n	8001560 <HAL_GPIO_Init+0x10>
  } 
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b006      	add	sp, #24
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	48000400 	.word	0x48000400
 8001830:	48000800 	.word	0x48000800
 8001834:	48000c00 	.word	0x48000c00
 8001838:	48001000 	.word	0x48001000
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	0008      	movs	r0, r1
 800184a:	0011      	movs	r1, r2
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	1c02      	adds	r2, r0, #0
 8001850:	801a      	strh	r2, [r3, #0]
 8001852:	1c7b      	adds	r3, r7, #1
 8001854:	1c0a      	adds	r2, r1, #0
 8001856:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001858:	1c7b      	adds	r3, r7, #1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001860:	1cbb      	adds	r3, r7, #2
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e082      	b.n	8001994 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2241      	movs	r2, #65	; 0x41
 8001892:	5c9b      	ldrb	r3, [r3, r2]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	2100      	movs	r1, #0
 80018a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff fa8f 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2241      	movs	r2, #65	; 0x41
 80018ae:	2124      	movs	r1, #36	; 0x24
 80018b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	438a      	bics	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4934      	ldr	r1, [pc, #208]	; (800199c <HAL_I2C_Init+0x120>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4931      	ldr	r1, [pc, #196]	; (80019a0 <HAL_I2C_Init+0x124>)
 80018dc:	400a      	ands	r2, r1
 80018de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0209      	lsls	r1, r1, #8
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e007      	b.n	800190a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2184      	movs	r1, #132	; 0x84
 8001904:	0209      	lsls	r1, r1, #8
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d104      	bne.n	800191c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	491f      	ldr	r1, [pc, #124]	; (80019a4 <HAL_I2C_Init+0x128>)
 8001928:	430a      	orrs	r2, r1
 800192a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	491a      	ldr	r1, [pc, #104]	; (80019a0 <HAL_I2C_Init+0x124>)
 8001938:	400a      	ands	r2, r1
 800193a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	431a      	orrs	r2, r3
 8001946:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69d9      	ldr	r1, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	2120      	movs	r1, #32
 8001982:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2242      	movs	r2, #66	; 0x42
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}
 800199c:	f0ffffff 	.word	0xf0ffffff
 80019a0:	ffff7fff 	.word	0xffff7fff
 80019a4:	02008000 	.word	0x02008000

080019a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2241      	movs	r2, #65	; 0x41
 80019b6:	5c9b      	ldrb	r3, [r3, r2]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d138      	bne.n	8001a30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	5c9b      	ldrb	r3, [r3, r2]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e032      	b.n	8001a32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	2101      	movs	r1, #1
 80019d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2241      	movs	r2, #65	; 0x41
 80019d8:	2124      	movs	r1, #36	; 0x24
 80019da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2101      	movs	r1, #1
 80019e8:	438a      	bics	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4911      	ldr	r1, [pc, #68]	; (8001a3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2101      	movs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2241      	movs	r2, #65	; 0x41
 8001a20:	2120      	movs	r1, #32
 8001a22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	ffffefff 	.word	0xffffefff

08001a40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2241      	movs	r2, #65	; 0x41
 8001a4e:	5c9b      	ldrb	r3, [r3, r2]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	d139      	bne.n	8001aca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	5c9b      	ldrb	r3, [r3, r2]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e033      	b.n	8001acc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	2101      	movs	r1, #1
 8001a6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2241      	movs	r2, #65	; 0x41
 8001a70:	2124      	movs	r1, #36	; 0x24
 8001a72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	438a      	bics	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2241      	movs	r2, #65	; 0x41
 8001aba:	2120      	movs	r1, #32
 8001abc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aca:	2302      	movs	r3, #2
  }
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	fffff0ff 	.word	0xfffff0ff

08001ad8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af06      	add	r7, sp, #24
 8001ade:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0ff      	b.n	8001cea <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a81      	ldr	r2, [pc, #516]	; (8001cf4 <HAL_PCD_Init+0x21c>)
 8001aee:	5c9b      	ldrb	r3, [r3, r2]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	23aa      	movs	r3, #170	; 0xaa
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	2100      	movs	r1, #0
 8001afe:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff faf0 	bl	80010e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_PCD_Init+0x21c>)
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f002 fc0d 	bl	8004334 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e058      	b.n	8001bd6 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b24:	200f      	movs	r0, #15
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	0013      	movs	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	189b      	adds	r3, r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	18cb      	adds	r3, r1, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b3e:	183b      	adds	r3, r7, r0
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	0013      	movs	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	189b      	adds	r3, r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	183a      	adds	r2, r7, r0
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b54:	0004      	movs	r4, r0
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	0013      	movs	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	189b      	adds	r3, r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	18cb      	adds	r3, r1, r3
 8001b6c:	3336      	adds	r3, #54	; 0x36
 8001b6e:	1c02      	adds	r2, r0, #0
 8001b70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	18cb      	adds	r3, r1, r3
 8001b84:	3303      	adds	r3, #3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	0013      	movs	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	18cb      	adds	r3, r1, r3
 8001b9a:	3338      	adds	r3, #56	; 0x38
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	18cb      	adds	r3, r1, r3
 8001bb0:	333c      	adds	r3, #60	; 0x3c
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	189b      	adds	r3, r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	18cb      	adds	r3, r1, r3
 8001bc6:	3340      	adds	r3, #64	; 0x40
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	3201      	adds	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d39f      	bcc.n	8001b24 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e056      	b.n	8001c9a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bec:	240f      	movs	r4, #15
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	236a      	movs	r3, #106	; 0x6a
 8001bf6:	33ff      	adds	r3, #255	; 0xff
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	189b      	adds	r3, r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	18c3      	adds	r3, r0, r3
 8001c04:	185b      	adds	r3, r3, r1
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	23b4      	movs	r3, #180	; 0xb4
 8001c12:	0059      	lsls	r1, r3, #1
 8001c14:	0013      	movs	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	189b      	adds	r3, r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	18c3      	adds	r3, r0, r3
 8001c1e:	185b      	adds	r3, r3, r1
 8001c20:	193a      	adds	r2, r7, r4
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	236c      	movs	r3, #108	; 0x6c
 8001c2e:	33ff      	adds	r3, #255	; 0xff
 8001c30:	0019      	movs	r1, r3
 8001c32:	0013      	movs	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	18c3      	adds	r3, r0, r3
 8001c3c:	185b      	adds	r3, r3, r1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	23bc      	movs	r3, #188	; 0xbc
 8001c4a:	0059      	lsls	r1, r3, #1
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	189b      	adds	r3, r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	18c3      	adds	r3, r0, r3
 8001c56:	185b      	adds	r3, r3, r1
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	23be      	movs	r3, #190	; 0xbe
 8001c64:	0059      	lsls	r1, r3, #1
 8001c66:	0013      	movs	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	18c3      	adds	r3, r0, r3
 8001c70:	185b      	adds	r3, r3, r1
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	0059      	lsls	r1, r3, #1
 8001c80:	0013      	movs	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	189b      	adds	r3, r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	18c3      	adds	r3, r0, r3
 8001c8a:	185b      	adds	r3, r3, r1
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	3201      	adds	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3a1      	bcc.n	8001bec <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	466a      	mov	r2, sp
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	3210      	adds	r2, #16
 8001cb6:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001cb8:	c170      	stmia	r1!, {r4, r5, r6}
 8001cba:	ca30      	ldmia	r2!, {r4, r5}
 8001cbc:	c130      	stmia	r1!, {r4, r5}
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f002 fb50 	bl	8004368 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_PCD_Init+0x21c>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d103      	bne.n	8001ce8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b005      	add	sp, #20
 8001cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	000002a9 	.word	0x000002a9

08001cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	23ba      	movs	r3, #186	; 0xba
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	23b8      	movs	r3, #184	; 0xb8
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	2100      	movs	r1, #0
 8001d18:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2254      	movs	r2, #84	; 0x54
 8001d1e:	5a9b      	ldrh	r3, [r3, r2]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2201      	movs	r2, #1
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b299      	uxth	r1, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2254      	movs	r2, #84	; 0x54
 8001d2c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2254      	movs	r2, #84	; 0x54
 8001d32:	5a9b      	ldrh	r3, [r3, r2]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2202      	movs	r2, #2
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2254      	movs	r2, #84	; 0x54
 8001d40:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b004      	add	sp, #16
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f000 fb76 	bl	800244c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d100      	bne.n	8001d6c <HAL_RCC_OscConfig+0x20>
 8001d6a:	e08e      	b.n	8001e8a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d6c:	4bc5      	ldr	r3, [pc, #788]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	220c      	movs	r2, #12
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d00e      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d78:	4bc2      	ldr	r3, [pc, #776]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d117      	bne.n	8001db4 <HAL_RCC_OscConfig+0x68>
 8001d84:	4bbf      	ldr	r3, [pc, #764]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	025b      	lsls	r3, r3, #9
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d10e      	bne.n	8001db4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4bbb      	ldr	r3, [pc, #748]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d100      	bne.n	8001da4 <HAL_RCC_OscConfig+0x58>
 8001da2:	e071      	b.n	8001e88 <HAL_RCC_OscConfig+0x13c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d000      	beq.n	8001dae <HAL_RCC_OscConfig+0x62>
 8001dac:	e06c      	b.n	8001e88 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f000 fb4c 	bl	800244c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x80>
 8001dbc:	4bb1      	ldr	r3, [pc, #708]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4bb0      	ldr	r3, [pc, #704]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0249      	lsls	r1, r1, #9
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e02f      	b.n	8001e2c <HAL_RCC_OscConfig+0xe0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0xa2>
 8001dd4:	4bab      	ldr	r3, [pc, #684]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4baa      	ldr	r3, [pc, #680]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001dda:	49ab      	ldr	r1, [pc, #684]	; (8002088 <HAL_RCC_OscConfig+0x33c>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4ba8      	ldr	r3, [pc, #672]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4ba7      	ldr	r3, [pc, #668]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001de6:	49a9      	ldr	r1, [pc, #676]	; (800208c <HAL_RCC_OscConfig+0x340>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e01e      	b.n	8001e2c <HAL_RCC_OscConfig+0xe0>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d10e      	bne.n	8001e14 <HAL_RCC_OscConfig+0xc8>
 8001df6:	4ba3      	ldr	r3, [pc, #652]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4ba2      	ldr	r3, [pc, #648]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	02c9      	lsls	r1, r1, #11
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	4b9f      	ldr	r3, [pc, #636]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b9e      	ldr	r3, [pc, #632]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0249      	lsls	r1, r1, #9
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xe0>
 8001e14:	4b9b      	ldr	r3, [pc, #620]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b9a      	ldr	r3, [pc, #616]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e1a:	499b      	ldr	r1, [pc, #620]	; (8002088 <HAL_RCC_OscConfig+0x33c>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4b98      	ldr	r3, [pc, #608]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b97      	ldr	r3, [pc, #604]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e26:	4999      	ldr	r1, [pc, #612]	; (800208c <HAL_RCC_OscConfig+0x340>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d014      	beq.n	8001e5e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fa26 	bl	8001284 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fa21 	bl	8001284 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b64      	cmp	r3, #100	; 0x64
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e2fd      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e50:	4b8c      	ldr	r3, [pc, #560]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0xf2>
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fa11 	bl	8001284 <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fa0c 	bl	8001284 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e2e8      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x11c>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x14a>
 8001e94:	e06c      	b.n	8001f70 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea0:	4b78      	ldr	r3, [pc, #480]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11f      	bne.n	8001eec <HAL_RCC_OscConfig+0x1a0>
 8001eac:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b71      	ldr	r3, [pc, #452]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x188>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e2bb      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	22f8      	movs	r2, #248	; 0xf8
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00da      	lsls	r2, r3, #3
 8001ee4:	4b67      	ldr	r3, [pc, #412]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e041      	b.n	8001f70 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d024      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f9c0 	bl	8001284 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f9bb 	bl	8001284 <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e297      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2202      	movs	r2, #2
 8001f22:	4013      	ands	r3, r2
 8001f24:	d0f1      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	22f8      	movs	r2, #248	; 0xf8
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00da      	lsls	r2, r3, #3
 8001f36:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e018      	b.n	8001f70 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	438a      	bics	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f99b 	bl	8001284 <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff f996 	bl	8001284 <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e272      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d1f1      	bne.n	8001f54 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	4013      	ands	r3, r2
 8001f78:	d036      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d019      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f979 	bl	8001284 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f974 	bl	8001284 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e250      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d0f1      	beq.n	8001f98 <HAL_RCC_OscConfig+0x24c>
 8001fb4:	e018      	b.n	8001fe8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb6:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	438a      	bics	r2, r1
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f95f 	bl	8001284 <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f95a 	bl	8001284 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e236      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d1f1      	bne.n	8001fcc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2204      	movs	r2, #4
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2a8>
 8001ff2:	e0b5      	b.n	8002160 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff4:	201f      	movs	r0, #31
 8001ff6:	183b      	adds	r3, r7, r0
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	055b      	lsls	r3, r3, #21
 8002004:	4013      	ands	r3, r2
 8002006:	d110      	bne.n	800202a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0549      	lsls	r1, r1, #21
 8002012:	430a      	orrs	r2, r1
 8002014:	61da      	str	r2, [r3, #28]
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002024:	183b      	adds	r3, r7, r0
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_OscConfig+0x344>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d11a      	bne.n	800206c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_RCC_OscConfig+0x344>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x344>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0049      	lsls	r1, r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002044:	f7ff f91e 	bl	8001284 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7ff f919 	bl	8001284 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1f5      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x344>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4013      	ands	r3, r2
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10f      	bne.n	8002094 <HAL_RCC_OscConfig+0x348>
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_RCC_OscConfig+0x338>)
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	621a      	str	r2, [r3, #32]
 8002080:	e036      	b.n	80020f0 <HAL_RCC_OscConfig+0x3a4>
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	fffeffff 	.word	0xfffeffff
 800208c:	fffbffff 	.word	0xfffbffff
 8002090:	40007000 	.word	0x40007000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x36a>
 800209c:	4bca      	ldr	r3, [pc, #808]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	4bc9      	ldr	r3, [pc, #804]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	621a      	str	r2, [r3, #32]
 80020a8:	4bc7      	ldr	r3, [pc, #796]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	4bc6      	ldr	r3, [pc, #792]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	2104      	movs	r1, #4
 80020b0:	438a      	bics	r2, r1
 80020b2:	621a      	str	r2, [r3, #32]
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x3a4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x38c>
 80020be:	4bc2      	ldr	r3, [pc, #776]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	4bc1      	ldr	r3, [pc, #772]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020c4:	2104      	movs	r1, #4
 80020c6:	430a      	orrs	r2, r1
 80020c8:	621a      	str	r2, [r3, #32]
 80020ca:	4bbf      	ldr	r3, [pc, #764]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	4bbe      	ldr	r3, [pc, #760]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	621a      	str	r2, [r3, #32]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x3a4>
 80020d8:	4bbb      	ldr	r3, [pc, #748]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4bba      	ldr	r3, [pc, #744]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020de:	2101      	movs	r1, #1
 80020e0:	438a      	bics	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]
 80020e4:	4bb8      	ldr	r3, [pc, #736]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4bb7      	ldr	r3, [pc, #732]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80020ea:	2104      	movs	r1, #4
 80020ec:	438a      	bics	r2, r1
 80020ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d014      	beq.n	8002122 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f8c4 	bl	8001284 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	e009      	b.n	8002116 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f8bf 	bl	8001284 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	4aaf      	ldr	r2, [pc, #700]	; (80023cc <HAL_RCC_OscConfig+0x680>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e19a      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4bac      	ldr	r3, [pc, #688]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x3b6>
 8002120:	e013      	b.n	800214a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff f8af 	bl	8001284 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e009      	b.n	8002140 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f8aa 	bl	8001284 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	4aa5      	ldr	r2, [pc, #660]	; (80023cc <HAL_RCC_OscConfig+0x680>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e185      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	4ba1      	ldr	r3, [pc, #644]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214a:	231f      	movs	r3, #31
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b9c      	ldr	r3, [pc, #624]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	4b9b      	ldr	r3, [pc, #620]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800215a:	499d      	ldr	r1, [pc, #628]	; (80023d0 <HAL_RCC_OscConfig+0x684>)
 800215c:	400a      	ands	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	4013      	ands	r3, r2
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d12a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002172:	4b95      	ldr	r3, [pc, #596]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002176:	4b94      	ldr	r3, [pc, #592]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002178:	2104      	movs	r1, #4
 800217a:	430a      	orrs	r2, r1
 800217c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800217e:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002182:	4b91      	ldr	r3, [pc, #580]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002184:	2101      	movs	r1, #1
 8002186:	430a      	orrs	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff f87b 	bl	8001284 <HAL_GetTick>
 800218e:	0003      	movs	r3, r0
 8002190:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002194:	f7ff f876 	bl	8001284 <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e152      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021b0:	4b85      	ldr	r3, [pc, #532]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	22f8      	movs	r2, #248	; 0xf8
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	00da      	lsls	r2, r3, #3
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
 80021c6:	e034      	b.n	8002232 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	3305      	adds	r3, #5
 80021ce:	d111      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021d0:	4b7d      	ldr	r3, [pc, #500]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d4:	4b7c      	ldr	r3, [pc, #496]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021d6:	2104      	movs	r1, #4
 80021d8:	438a      	bics	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021dc:	4b7a      	ldr	r3, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	22f8      	movs	r2, #248	; 0xf8
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
 80021f2:	e01e      	b.n	8002232 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021f4:	4b74      	ldr	r3, [pc, #464]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f8:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	2104      	movs	r1, #4
 80021fc:	430a      	orrs	r2, r1
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002200:	4b71      	ldr	r3, [pc, #452]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002204:	4b70      	ldr	r3, [pc, #448]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002206:	2101      	movs	r1, #1
 8002208:	438a      	bics	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7ff f83a 	bl	8001284 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002216:	f7ff f835 	bl	8001284 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e111      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002228:	4b67      	ldr	r3, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d1f1      	bne.n	8002216 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2220      	movs	r2, #32
 8002238:	4013      	ands	r3, r2
 800223a:	d05c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800223c:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	220c      	movs	r2, #12
 8002242:	4013      	ands	r3, r2
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d00e      	beq.n	8002266 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	220c      	movs	r2, #12
 800224e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002250:	2b08      	cmp	r3, #8
 8002252:	d114      	bne.n	800227e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002254:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	401a      	ands	r2, r3
 800225e:	23c0      	movs	r3, #192	; 0xc0
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	429a      	cmp	r2, r3
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002266:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	025b      	lsls	r3, r3, #9
 800226e:	4013      	ands	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_RCC_OscConfig+0x5a8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d03c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0e6      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01b      	beq.n	80022be <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002286:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228a:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0249      	lsls	r1, r1, #9
 8002290:	430a      	orrs	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fff6 	bl	8001284 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800229e:	f7fe fff1 	bl	8001284 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0cd      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022b0:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	4013      	ands	r3, r2
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x552>
 80022bc:	e01b      	b.n	80022f6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022be:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80022c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80022c4:	4943      	ldr	r1, [pc, #268]	; (80023d4 <HAL_RCC_OscConfig+0x688>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe ffdb 	bl	8001284 <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d4:	f7fe ffd6 	bl	8001284 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0b2      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80022e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x588>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022f4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d100      	bne.n	8002300 <HAL_RCC_OscConfig+0x5b4>
 80022fe:	e0a4      	b.n	800244a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	220c      	movs	r2, #12
 8002306:	4013      	ands	r3, r2
 8002308:	2b08      	cmp	r3, #8
 800230a:	d100      	bne.n	800230e <HAL_RCC_OscConfig+0x5c2>
 800230c:	e078      	b.n	8002400 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b02      	cmp	r3, #2
 8002314:	d14c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800231c:	492e      	ldr	r1, [pc, #184]	; (80023d8 <HAL_RCC_OscConfig+0x68c>)
 800231e:	400a      	ands	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe ffaf 	bl	8001284 <HAL_GetTick>
 8002326:	0003      	movs	r3, r0
 8002328:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe ffaa 	bl	8001284 <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e086      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	049b      	lsls	r3, r3, #18
 8002346:	4013      	ands	r3, r2
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	220f      	movs	r2, #15
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800235a:	430a      	orrs	r2, r1
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_RCC_OscConfig+0x690>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	431a      	orrs	r2, r3
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	0449      	lsls	r1, r1, #17
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe ff7d 	bl	8001284 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe ff78 	bl	8001284 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e054      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	049b      	lsls	r3, r3, #18
 80023aa:	4013      	ands	r3, r2
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x644>
 80023ae:	e04c      	b.n	800244a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_RCC_OscConfig+0x67c>)
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <HAL_RCC_OscConfig+0x68c>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe ff62 	bl	8001284 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x6a6>
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00001388 	.word	0x00001388
 80023d0:	efffffff 	.word	0xefffffff
 80023d4:	fffeffff 	.word	0xfffeffff
 80023d8:	feffffff 	.word	0xfeffffff
 80023dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe ff50 	bl	8001284 <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e02c      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_RCC_OscConfig+0x708>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	049b      	lsls	r3, r3, #18
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x694>
 80023fe:	e024      	b.n	800244a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e01f      	b.n	800244c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_OscConfig+0x708>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_RCC_OscConfig+0x708>)
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	23c0      	movs	r3, #192	; 0xc0
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	429a      	cmp	r2, r3
 8002426:	d10e      	bne.n	8002446 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	220f      	movs	r2, #15
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	23f0      	movs	r3, #240	; 0xf0
 800243a:	039b      	lsls	r3, r3, #14
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b008      	add	sp, #32
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0bf      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d911      	bls.n	800249e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b5b      	ldr	r3, [pc, #364]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0a6      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d015      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2204      	movs	r2, #4
 80024ae:	4013      	ands	r3, r2
 80024b0:	d006      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80024b8:	21e0      	movs	r1, #224	; 0xe0
 80024ba:	00c9      	lsls	r1, r1, #3
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	22f0      	movs	r2, #240	; 0xf0
 80024c6:	4393      	bics	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d04c      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	4013      	ands	r3, r2
 80024f0:	d120      	bne.n	8002534 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07a      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	049b      	lsls	r3, r3, #18
 8002506:	4013      	ands	r3, r2
 8002508:	d114      	bne.n	8002534 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06e      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 8002518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	4013      	ands	r3, r2
 8002520:	d108      	bne.n	8002534 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e062      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2202      	movs	r2, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e05b      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7fe fe9c 	bl	8001284 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	e009      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002552:	f7fe fe97 	bl	8001284 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <HAL_RCC_ClockConfig+0x1a4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e042      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	220c      	movs	r2, #12
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1ec      	bne.n	8002552 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d211      	bcs.n	80025aa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_RCC_ClockConfig+0x19c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e020      	b.n	80025ec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	4013      	ands	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_RCC_ClockConfig+0x1a8>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025c8:	f000 f820 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025cc:	0001      	movs	r1, r0
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1a0>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	220f      	movs	r2, #15
 80025d6:	4013      	ands	r3, r2
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x1ac>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	000a      	movs	r2, r1
 80025de:	40da      	lsrs	r2, r3
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1b0>)
 80025e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe fe07 	bl	80011f8 <HAL_InitTick>
  
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40021000 	.word	0x40021000
 80025fc:	00001388 	.word	0x00001388
 8002600:	fffff8ff 	.word	0xfffff8ff
 8002604:	080044f0 	.word	0x080044f0
 8002608:	200000a8 	.word	0x200000a8

0800260c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b08f      	sub	sp, #60	; 0x3c
 8002610:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002612:	2314      	movs	r3, #20
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002618:	ca13      	ldmia	r2!, {r0, r1, r4}
 800261a:	c313      	stmia	r3!, {r0, r1, r4}
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	4a36      	ldr	r2, [pc, #216]	; (80026fc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002624:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002626:	c313      	stmia	r3!, {r0, r1, r4}
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002640:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	220c      	movs	r2, #12
 800264a:	4013      	ands	r3, r2
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d047      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0xd4>
 8002650:	d849      	bhi.n	80026e6 <HAL_RCC_GetSysClockFreq+0xda>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x50>
 8002656:	2b08      	cmp	r3, #8
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x56>
 800265a:	e044      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002660:	e044      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	0c9b      	lsrs	r3, r3, #18
 8002666:	220f      	movs	r2, #15
 8002668:	4013      	ands	r3, r2
 800266a:	2214      	movs	r2, #20
 800266c:	18ba      	adds	r2, r7, r2
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	220f      	movs	r2, #15
 8002678:	4013      	ands	r3, r2
 800267a:	1d3a      	adds	r2, r7, #4
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002682:	23c0      	movs	r3, #192	; 0xc0
 8002684:	025b      	lsls	r3, r3, #9
 8002686:	401a      	ands	r2, r3
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	025b      	lsls	r3, r3, #9
 800268c:	429a      	cmp	r2, r3
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002692:	481c      	ldr	r0, [pc, #112]	; (8002704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002694:	f7fd fd38 	bl	8000108 <__udivsi3>
 8002698:	0003      	movs	r3, r0
 800269a:	001a      	movs	r2, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	4353      	muls	r3, r2
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
 80026a2:	e01a      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	401a      	ands	r2, r3
 80026ac:	23c0      	movs	r3, #192	; 0xc0
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d109      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b6:	4814      	ldr	r0, [pc, #80]	; (8002708 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026b8:	f7fd fd26 	bl	8000108 <__udivsi3>
 80026bc:	0003      	movs	r3, r0
 80026be:	001a      	movs	r2, r3
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	4353      	muls	r3, r2
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e008      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026cc:	f7fd fd1c 	bl	8000108 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	4353      	muls	r3, r2
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026de:	e005      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e4:	e002      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b00f      	add	sp, #60	; 0x3c
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	080044d0 	.word	0x080044d0
 80026fc:	080044e0 	.word	0x080044e0
 8002700:	40021000 	.word	0x40021000
 8002704:	007a1200 	.word	0x007a1200
 8002708:	02dc6c00 	.word	0x02dc6c00

0800270c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002710:	4b02      	ldr	r3, [pc, #8]	; (800271c <HAL_RCC_GetHCLKFreq+0x10>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	200000a8 	.word	0x200000a8

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002724:	f7ff fff2 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8002728:	0001      	movs	r1, r0
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	2207      	movs	r2, #7
 8002732:	4013      	ands	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	40d9      	lsrs	r1, r3
 800273a:	000b      	movs	r3, r1
}    
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	40021000 	.word	0x40021000
 8002748:	08004500 	.word	0x08004500

0800274c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	025b      	lsls	r3, r3, #9
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002768:	e08e      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2017      	movs	r0, #23
 800276c:	183b      	adds	r3, r7, r0
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	055b      	lsls	r3, r3, #21
 800277a:	4013      	ands	r3, r2
 800277c:	d110      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b6b      	ldr	r3, [pc, #428]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0549      	lsls	r1, r1, #21
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
 800278c:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	055b      	lsls	r3, r3, #21
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	183b      	adds	r3, r7, r0
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d11a      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ac:	4b60      	ldr	r3, [pc, #384]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	0049      	lsls	r1, r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fd63 	bl	8001284 <HAL_GetTick>
 80027be:	0003      	movs	r3, r0
 80027c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	e008      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe fd5e 	bl	8001284 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0a6      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4013      	ands	r3, r2
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e2:	4b52      	ldr	r3, [pc, #328]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	23c0      	movs	r3, #192	; 0xc0
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d034      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d02c      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002804:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0249      	lsls	r1, r1, #9
 8002818:	430a      	orrs	r2, r1
 800281a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	4b42      	ldr	r3, [pc, #264]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002822:	4945      	ldr	r1, [pc, #276]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002824:	400a      	ands	r2, r1
 8002826:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe fd25 	bl	8001284 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e009      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fd20 	bl	8001284 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	4a3c      	ldr	r2, [pc, #240]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e067      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d0f0      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800286e:	430a      	orrs	r2, r1
 8002870:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002872:	2317      	movs	r3, #23
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287c:	4b2b      	ldr	r3, [pc, #172]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002882:	492f      	ldr	r1, [pc, #188]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002884:	400a      	ands	r2, r1
 8002886:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	4013      	ands	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	2203      	movs	r2, #3
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2220      	movs	r2, #32
 80028ca:	4013      	ands	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2210      	movs	r2, #16
 80028d4:	4393      	bics	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800291e:	430a      	orrs	r2, r1
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b006      	add	sp, #24
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
 8002934:	fffffcff 	.word	0xfffffcff
 8002938:	fffeffff 	.word	0xfffeffff
 800293c:	00001388 	.word	0x00001388
 8002940:	efffffff 	.word	0xefffffff
 8002944:	fffcffff 	.word	0xfffcffff

08002948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0a8      	b.n	8002aac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	2382      	movs	r3, #130	; 0x82
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	429a      	cmp	r2, r3
 800296c:	d009      	beq.n	8002982 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
 8002974:	e005      	b.n	8002982 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	225d      	movs	r2, #93	; 0x5d
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	225c      	movs	r2, #92	; 0x5c
 8002998:	2100      	movs	r1, #0
 800299a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f7fe fa60 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	225d      	movs	r2, #93	; 0x5d
 80029a8:	2102      	movs	r1, #2
 80029aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	438a      	bics	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	23e0      	movs	r3, #224	; 0xe0
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d902      	bls.n	80029ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e002      	b.n	80029d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	23f0      	movs	r3, #240	; 0xf0
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	429a      	cmp	r2, r3
 80029de:	d008      	beq.n	80029f2 <HAL_SPI_Init+0xaa>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	23e0      	movs	r3, #224	; 0xe0
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d002      	beq.n	80029f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	2382      	movs	r3, #130	; 0x82
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	401a      	ands	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	2384      	movs	r3, #132	; 0x84
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	400b      	ands	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	400b      	ands	r3, r1
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2101      	movs	r1, #1
 8002a18:	400b      	ands	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6999      	ldr	r1, [r3, #24]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	400b      	ands	r3, r1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2138      	movs	r1, #56	; 0x38
 8002a2e:	400b      	ands	r3, r1
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	400b      	ands	r3, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	401a      	ands	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	2204      	movs	r2, #4
 8002a58:	401a      	ands	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2110      	movs	r1, #16
 8002a60:	400b      	ands	r3, r1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	2108      	movs	r1, #8
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	23f0      	movs	r3, #240	; 0xf0
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	400b      	ands	r3, r1
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	015b      	lsls	r3, r3, #5
 8002a82:	401a      	ands	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <HAL_SPI_Init+0x16c>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	225d      	movs	r2, #93	; 0x5d
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	fffff7ff 	.word	0xfffff7ff

08002ab8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e074      	b.n	8002bb4 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	223c      	movs	r2, #60	; 0x3c
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223d      	movs	r2, #61	; 0x3d
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7fe fa0d 	bl	8000f00 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	223c      	movs	r2, #60	; 0x3c
 8002aea:	2102      	movs	r1, #2
 8002aec:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002b04:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002b0c:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002b12:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002b18:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002b1e:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002b24:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002b2a:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7b1b      	ldrb	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d108      	bne.n	8002b4e <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	43d2      	mvns	r2, r2
 8002b64:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b7e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681c      	ldr	r4, [r3, #0]
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f000 f817 	bl	8002bbc <TSC_extract_groups>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2103      	movs	r1, #3
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223c      	movs	r2, #60	; 0x3c
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b003      	add	sp, #12
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	e011      	b.n	8002bf2 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	0013      	movs	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d006      	beq.n	8002bec <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002bde:	2201      	movs	r2, #1
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b07      	cmp	r3, #7
 8002bf6:	d9ea      	bls.n	8002bce <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e044      	b.n	8002ca0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2274      	movs	r2, #116	; 0x74
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fe fa07 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2224      	movs	r2, #36	; 0x24
 8002c32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fcb0 	bl	80035ac <UART_SetConfig>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e024      	b.n	8002ca0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fe2b 	bl	80038bc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <HAL_UART_Init+0xa4>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	212a      	movs	r1, #42	; 0x2a
 8002c82:	438a      	bics	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 fec3 	bl	8003a24 <UART_CheckIdleState>
 8002c9e:	0003      	movs	r3, r0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	ffffb7ff 	.word	0xffffb7ff

08002cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d000      	beq.n	8002cc6 <HAL_UART_Transmit+0x1a>
 8002cc4:	e096      	b.n	8002df4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_UART_Transmit+0x28>
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e08e      	b.n	8002df6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d109      	bne.n	8002cf8 <HAL_UART_Transmit+0x4c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e07e      	b.n	8002df6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2274      	movs	r2, #116	; 0x74
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Transmit+0x5a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e077      	b.n	8002df6 <HAL_UART_Transmit+0x14a>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2274      	movs	r2, #116	; 0x74
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	2100      	movs	r1, #0
 8002d14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fab2 	bl	8001284 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1dba      	adds	r2, r7, #6
 8002d28:	2150      	movs	r1, #80	; 0x50
 8002d2a:	8812      	ldrh	r2, [r2, #0]
 8002d2c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1dba      	adds	r2, r7, #6
 8002d32:	2152      	movs	r1, #82	; 0x52
 8002d34:	8812      	ldrh	r2, [r2, #0]
 8002d36:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d108      	bne.n	8002d56 <HAL_UART_Transmit+0xaa>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e003      	b.n	8002d5e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2274      	movs	r2, #116	; 0x74
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d66:	e02d      	b.n	8002dc4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	0013      	movs	r3, r2
 8002d72:	2200      	movs	r2, #0
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	f000 fe9d 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e039      	b.n	8002df6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	05d2      	lsls	r2, r2, #23
 8002d92:	0dd2      	lsrs	r2, r2, #23
 8002d94:	b292      	uxth	r2, r2
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e008      	b.n	8002db2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b292      	uxth	r2, r2
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2252      	movs	r2, #82	; 0x52
 8002db6:	5a9b      	ldrh	r3, [r3, r2]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b299      	uxth	r1, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2252      	movs	r2, #82	; 0x52
 8002dc2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2252      	movs	r2, #82	; 0x52
 8002dc8:	5a9b      	ldrh	r3, [r3, r2]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1cb      	bne.n	8002d68 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	0013      	movs	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	f000 fe69 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d001      	beq.n	8002dea <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e005      	b.n	8002df6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b008      	add	sp, #32
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	1dbb      	adds	r3, r7, #6
 8002e0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d000      	beq.n	8002e18 <HAL_UART_Transmit_IT+0x18>
 8002e16:	e06a      	b.n	8002eee <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_UART_Transmit_IT+0x26>
 8002e1e:	1dbb      	adds	r3, r7, #6
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e062      	b.n	8002ef0 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	015b      	lsls	r3, r3, #5
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d109      	bne.n	8002e4a <HAL_UART_Transmit_IT+0x4a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d001      	beq.n	8002e4a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e052      	b.n	8002ef0 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2274      	movs	r2, #116	; 0x74
 8002e4e:	5c9b      	ldrb	r3, [r3, r2]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Transmit_IT+0x58>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e04b      	b.n	8002ef0 <HAL_UART_Transmit_IT+0xf0>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2274      	movs	r2, #116	; 0x74
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1dba      	adds	r2, r7, #6
 8002e6a:	2150      	movs	r1, #80	; 0x50
 8002e6c:	8812      	ldrh	r2, [r2, #0]
 8002e6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1dba      	adds	r2, r7, #6
 8002e74:	2152      	movs	r1, #82	; 0x52
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	2100      	movs	r1, #0
 8002e86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2221      	movs	r2, #33	; 0x21
 8002e8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	015b      	lsls	r3, r3, #5
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d107      	bne.n	8002eaa <HAL_UART_Transmit_IT+0xaa>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_UART_Transmit_IT+0xf8>)
 8002ea6:	669a      	str	r2, [r3, #104]	; 0x68
 8002ea8:	e002      	b.n	8002eb0 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_UART_Transmit_IT+0xfc>)
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2274      	movs	r2, #116	; 0x74
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8002ebe:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b008      	add	sp, #32
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	08003f43 	.word	0x08003f43
 8002efc:	08003e8f 	.word	0x08003e8f

08002f00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	1dbb      	adds	r3, r7, #6
 8002f0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d150      	bne.n	8002fb8 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_UART_Receive_IT+0x24>
 8002f1c:	1dbb      	adds	r3, r7, #6
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e048      	b.n	8002fba <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	015b      	lsls	r3, r3, #5
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d109      	bne.n	8002f48 <HAL_UART_Receive_IT+0x48>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4013      	ands	r3, r2
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2274      	movs	r2, #116	; 0x74
 8002f4c:	5c9b      	ldrb	r3, [r3, r2]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Receive_IT+0x56>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e031      	b.n	8002fba <HAL_UART_Receive_IT+0xba>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2274      	movs	r2, #116	; 0x74
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f72:	f3ef 8310 	mrs	r3, PRIMASK
 8002f76:	613b      	str	r3, [r7, #16]
  return(result);
 8002f78:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	04c9      	lsls	r1, r1, #19
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f383 8810 	msr	PRIMASK, r3
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fa6:	1dbb      	adds	r3, r7, #6
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fe44 	bl	8003c3c <UART_Start_Receive_IT>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	e000      	b.n	8002fba <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b008      	add	sp, #32
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0ab      	sub	sp, #172	; 0xac
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	22a4      	movs	r2, #164	; 0xa4
 8002fd4:	18b9      	adds	r1, r7, r2
 8002fd6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	20a0      	movs	r0, #160	; 0xa0
 8002fe0:	1839      	adds	r1, r7, r0
 8002fe2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	219c      	movs	r1, #156	; 0x9c
 8002fec:	1879      	adds	r1, r7, r1
 8002fee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	18bb      	adds	r3, r7, r2
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a99      	ldr	r2, [pc, #612]	; (800325c <HAL_UART_IRQHandler+0x298>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2298      	movs	r2, #152	; 0x98
 8002ffc:	18bc      	adds	r4, r7, r2
 8002ffe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003000:	18bb      	adds	r3, r7, r2
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003008:	187b      	adds	r3, r7, r1
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2220      	movs	r2, #32
 800300e:	4013      	ands	r3, r2
 8003010:	d00f      	beq.n	8003032 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003012:	183b      	adds	r3, r7, r0
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
 800301a:	d00a      	beq.n	8003032 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003020:	2b00      	cmp	r3, #0
 8003022:	d100      	bne.n	8003026 <HAL_UART_IRQHandler+0x62>
 8003024:	e296      	b.n	8003554 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	0010      	movs	r0, r2
 800302e:	4798      	blx	r3
      }
      return;
 8003030:	e290      	b.n	8003554 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003032:	2398      	movs	r3, #152	; 0x98
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <HAL_UART_IRQHandler+0x7a>
 800303c:	e114      	b.n	8003268 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800303e:	239c      	movs	r3, #156	; 0x9c
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	4013      	ands	r3, r2
 8003048:	d106      	bne.n	8003058 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800304a:	23a0      	movs	r3, #160	; 0xa0
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a83      	ldr	r2, [pc, #524]	; (8003260 <HAL_UART_IRQHandler+0x29c>)
 8003052:	4013      	ands	r3, r2
 8003054:	d100      	bne.n	8003058 <HAL_UART_IRQHandler+0x94>
 8003056:	e107      	b.n	8003268 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003058:	23a4      	movs	r3, #164	; 0xa4
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2201      	movs	r2, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d012      	beq.n	800308a <HAL_UART_IRQHandler+0xc6>
 8003064:	23a0      	movs	r3, #160	; 0xa0
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d00b      	beq.n	800308a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	589b      	ldr	r3, [r3, r2]
 8003080:	2201      	movs	r2, #1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800308a:	23a4      	movs	r3, #164	; 0xa4
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2202      	movs	r2, #2
 8003092:	4013      	ands	r3, r2
 8003094:	d011      	beq.n	80030ba <HAL_UART_IRQHandler+0xf6>
 8003096:	239c      	movs	r3, #156	; 0x9c
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	d00b      	beq.n	80030ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	589b      	ldr	r3, [r3, r2]
 80030b0:	2204      	movs	r2, #4
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ba:	23a4      	movs	r3, #164	; 0xa4
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2204      	movs	r2, #4
 80030c2:	4013      	ands	r3, r2
 80030c4:	d011      	beq.n	80030ea <HAL_UART_IRQHandler+0x126>
 80030c6:	239c      	movs	r3, #156	; 0x9c
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	589b      	ldr	r3, [r3, r2]
 80030e0:	2202      	movs	r2, #2
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030ea:	23a4      	movs	r3, #164	; 0xa4
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	4013      	ands	r3, r2
 80030f4:	d017      	beq.n	8003126 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030f6:	23a0      	movs	r3, #160	; 0xa0
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	4013      	ands	r3, r2
 8003100:	d105      	bne.n	800310e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003102:	239c      	movs	r3, #156	; 0x9c
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2208      	movs	r2, #8
 8003114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2208      	movs	r2, #8
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003126:	23a4      	movs	r3, #164	; 0xa4
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_UART_IRQHandler+0x198>
 8003134:	23a0      	movs	r3, #160	; 0xa0
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	04db      	lsls	r3, r3, #19
 800313e:	4013      	ands	r3, r2
 8003140:	d00c      	beq.n	800315c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	589b      	ldr	r3, [r3, r2]
 8003152:	2220      	movs	r2, #32
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	589b      	ldr	r3, [r3, r2]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d100      	bne.n	8003168 <HAL_UART_IRQHandler+0x1a4>
 8003166:	e1f7      	b.n	8003558 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003168:	23a4      	movs	r3, #164	; 0xa4
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2220      	movs	r2, #32
 8003170:	4013      	ands	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003174:	23a0      	movs	r3, #160	; 0xa0
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2220      	movs	r2, #32
 800317c:	4013      	ands	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	0010      	movs	r0, r2
 8003190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	589b      	ldr	r3, [r3, r2]
 8003198:	2194      	movs	r1, #148	; 0x94
 800319a:	187a      	adds	r2, r7, r1
 800319c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d004      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2228      	movs	r2, #40	; 0x28
 80031b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b4:	d047      	beq.n	8003246 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 fdef 	bl	8003d9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d137      	bne.n	800323c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031cc:	f3ef 8310 	mrs	r3, PRIMASK
 80031d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d4:	2090      	movs	r0, #144	; 0x90
 80031d6:	183a      	adds	r2, r7, r0
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	2301      	movs	r3, #1
 80031dc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	438a      	bics	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fe:	f383 8810 	msr	PRIMASK, r3
}
 8003202:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_UART_IRQHandler+0x2a0>)
 8003212:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	0018      	movs	r0, r3
 800321a:	f7fe f953 	bl	80014c4 <HAL_DMA_Abort_IT>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d01a      	beq.n	8003258 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	0018      	movs	r0, r3
 800322e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e012      	b.n	8003258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f9a5 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	e00d      	b.n	8003258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f9a0 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e008      	b.n	8003258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f99b 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	2100      	movs	r1, #0
 8003254:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003256:	e17f      	b.n	8003558 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	46c0      	nop			; (mov r8, r8)
    return;
 800325a:	e17d      	b.n	8003558 <HAL_UART_IRQHandler+0x594>
 800325c:	0000080f 	.word	0x0000080f
 8003260:	04000120 	.word	0x04000120
 8003264:	08003e61 	.word	0x08003e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	2b01      	cmp	r3, #1
 800326e:	d000      	beq.n	8003272 <HAL_UART_IRQHandler+0x2ae>
 8003270:	e131      	b.n	80034d6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003272:	23a4      	movs	r3, #164	; 0xa4
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d100      	bne.n	8003280 <HAL_UART_IRQHandler+0x2bc>
 800327e:	e12a      	b.n	80034d6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2210      	movs	r2, #16
 8003288:	4013      	ands	r3, r2
 800328a:	d100      	bne.n	800328e <HAL_UART_IRQHandler+0x2ca>
 800328c:	e123      	b.n	80034d6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	4013      	ands	r3, r2
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d000      	beq.n	80032a6 <HAL_UART_IRQHandler+0x2e2>
 80032a4:	e09b      	b.n	80033de <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	217e      	movs	r1, #126	; 0x7e
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d100      	bne.n	80032be <HAL_UART_IRQHandler+0x2fa>
 80032bc:	e14e      	b.n	800355c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2258      	movs	r2, #88	; 0x58
 80032c2:	5a9b      	ldrh	r3, [r3, r2]
 80032c4:	187a      	adds	r2, r7, r1
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d300      	bcc.n	80032ce <HAL_UART_IRQHandler+0x30a>
 80032cc:	e146      	b.n	800355c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	187a      	adds	r2, r7, r1
 80032d2:	215a      	movs	r1, #90	; 0x5a
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d06e      	beq.n	80033c0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e2:	f3ef 8310 	mrs	r3, PRIMASK
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ec:	2301      	movs	r3, #1
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	499a      	ldr	r1, [pc, #616]	; (800356c <HAL_UART_IRQHandler+0x5a8>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331c:	677b      	str	r3, [r7, #116]	; 0x74
 800331e:	2301      	movs	r3, #1
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800334c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	673b      	str	r3, [r7, #112]	; 0x70
 8003350:	2301      	movs	r3, #1
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	f383 8810 	msr	PRIMASK, r3
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	438a      	bics	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003384:	f3ef 8310 	mrs	r3, PRIMASK
 8003388:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800338a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338e:	2301      	movs	r3, #1
 8003390:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2110      	movs	r1, #16
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fe f84a 	bl	8001454 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2258      	movs	r2, #88	; 0x58
 80033c4:	5a9a      	ldrh	r2, [r3, r2]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	215a      	movs	r1, #90	; 0x5a
 80033ca:	5a5b      	ldrh	r3, [r3, r1]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f8dc 	bl	8003594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033dc:	e0be      	b.n	800355c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2258      	movs	r2, #88	; 0x58
 80033e2:	5a99      	ldrh	r1, [r3, r2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	225a      	movs	r2, #90	; 0x5a
 80033e8:	5a9b      	ldrh	r3, [r3, r2]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	208e      	movs	r0, #142	; 0x8e
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	1a8a      	subs	r2, r1, r2
 80033f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	225a      	movs	r2, #90	; 0x5a
 80033f8:	5a9b      	ldrh	r3, [r3, r2]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <HAL_UART_IRQHandler+0x43e>
 8003400:	e0ae      	b.n	8003560 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003402:	183b      	adds	r3, r7, r0
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d100      	bne.n	800340c <HAL_UART_IRQHandler+0x448>
 800340a:	e0a9      	b.n	8003560 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340c:	f3ef 8310 	mrs	r3, PRIMASK
 8003410:	60fb      	str	r3, [r7, #12]
  return(result);
 8003412:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003414:	2488      	movs	r4, #136	; 0x88
 8003416:	193a      	adds	r2, r7, r4
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	2301      	movs	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	494f      	ldr	r1, [pc, #316]	; (8003570 <HAL_UART_IRQHandler+0x5ac>)
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	193b      	adds	r3, r7, r4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003444:	f3ef 8310 	mrs	r3, PRIMASK
 8003448:	61bb      	str	r3, [r7, #24]
  return(result);
 800344a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344c:	2484      	movs	r4, #132	; 0x84
 800344e:	193a      	adds	r2, r7, r4
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	438a      	bics	r2, r1
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	193b      	adds	r3, r7, r4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003496:	2480      	movs	r4, #128	; 0x80
 8003498:	193a      	adds	r2, r7, r4
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2110      	movs	r1, #16
 80034b4:	438a      	bics	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034c6:	183b      	adds	r3, r7, r0
 80034c8:	881a      	ldrh	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0011      	movs	r1, r2
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f860 	bl	8003594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034d4:	e044      	b.n	8003560 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034d6:	23a4      	movs	r3, #164	; 0xa4
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	035b      	lsls	r3, r3, #13
 80034e0:	4013      	ands	r3, r2
 80034e2:	d010      	beq.n	8003506 <HAL_UART_IRQHandler+0x542>
 80034e4:	239c      	movs	r3, #156	; 0x9c
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	03db      	lsls	r3, r3, #15
 80034ee:	4013      	ands	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	0352      	lsls	r2, r2, #13
 80034fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 ff10 	bl	8004324 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003504:	e02f      	b.n	8003566 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003506:	23a4      	movs	r3, #164	; 0xa4
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	4013      	ands	r3, r2
 8003510:	d00f      	beq.n	8003532 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003512:	23a0      	movs	r3, #160	; 0xa0
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	4013      	ands	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01e      	beq.n	8003564 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	0010      	movs	r0, r2
 800352e:	4798      	blx	r3
    }
    return;
 8003530:	e018      	b.n	8003564 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003532:	23a4      	movs	r3, #164	; 0xa4
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2240      	movs	r2, #64	; 0x40
 800353a:	4013      	ands	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_UART_IRQHandler+0x5a2>
 800353e:	23a0      	movs	r3, #160	; 0xa0
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2240      	movs	r2, #64	; 0x40
 8003546:	4013      	ands	r3, r2
 8003548:	d00d      	beq.n	8003566 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0018      	movs	r0, r3
 800354e:	f000 fd56 	bl	8003ffe <UART_EndTransmit_IT>
    return;
 8003552:	e008      	b.n	8003566 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	e006      	b.n	8003566 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	e004      	b.n	8003566 <HAL_UART_IRQHandler+0x5a2>
      return;
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	e002      	b.n	8003566 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	e000      	b.n	8003566 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003564:	46c0      	nop			; (mov r8, r8)
  }

}
 8003566:	46bd      	mov	sp, r7
 8003568:	b02b      	add	sp, #172	; 0xac
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	fffffeff 	.word	0xfffffeff
 8003570:	fffffedf 	.word	0xfffffedf

08003574 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	000a      	movs	r2, r1
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b4:	231e      	movs	r3, #30
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4aaf      	ldr	r2, [pc, #700]	; (8003898 <UART_SetConfig+0x2ec>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4aaa      	ldr	r2, [pc, #680]	; (800389c <UART_SetConfig+0x2f0>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4aa1      	ldr	r2, [pc, #644]	; (80038a0 <UART_SetConfig+0x2f4>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a9d      	ldr	r2, [pc, #628]	; (80038a4 <UART_SetConfig+0x2f8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d127      	bne.n	8003682 <UART_SetConfig+0xd6>
 8003632:	4b9d      	ldr	r3, [pc, #628]	; (80038a8 <UART_SetConfig+0x2fc>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	2203      	movs	r2, #3
 8003638:	4013      	ands	r3, r2
 800363a:	2b03      	cmp	r3, #3
 800363c:	d00d      	beq.n	800365a <UART_SetConfig+0xae>
 800363e:	d81b      	bhi.n	8003678 <UART_SetConfig+0xcc>
 8003640:	2b02      	cmp	r3, #2
 8003642:	d014      	beq.n	800366e <UART_SetConfig+0xc2>
 8003644:	d818      	bhi.n	8003678 <UART_SetConfig+0xcc>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <UART_SetConfig+0xa4>
 800364a:	2b01      	cmp	r3, #1
 800364c:	d00a      	beq.n	8003664 <UART_SetConfig+0xb8>
 800364e:	e013      	b.n	8003678 <UART_SetConfig+0xcc>
 8003650:	231f      	movs	r3, #31
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e065      	b.n	8003726 <UART_SetConfig+0x17a>
 800365a:	231f      	movs	r3, #31
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2202      	movs	r2, #2
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e060      	b.n	8003726 <UART_SetConfig+0x17a>
 8003664:	231f      	movs	r3, #31
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2204      	movs	r2, #4
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	e05b      	b.n	8003726 <UART_SetConfig+0x17a>
 800366e:	231f      	movs	r3, #31
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2208      	movs	r2, #8
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e056      	b.n	8003726 <UART_SetConfig+0x17a>
 8003678:	231f      	movs	r3, #31
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2210      	movs	r2, #16
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e051      	b.n	8003726 <UART_SetConfig+0x17a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a89      	ldr	r2, [pc, #548]	; (80038ac <UART_SetConfig+0x300>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d134      	bne.n	80036f6 <UART_SetConfig+0x14a>
 800368c:	4b86      	ldr	r3, [pc, #536]	; (80038a8 <UART_SetConfig+0x2fc>)
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	23c0      	movs	r3, #192	; 0xc0
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	4013      	ands	r3, r2
 8003696:	22c0      	movs	r2, #192	; 0xc0
 8003698:	0292      	lsls	r2, r2, #10
 800369a:	4293      	cmp	r3, r2
 800369c:	d017      	beq.n	80036ce <UART_SetConfig+0x122>
 800369e:	22c0      	movs	r2, #192	; 0xc0
 80036a0:	0292      	lsls	r2, r2, #10
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d822      	bhi.n	80036ec <UART_SetConfig+0x140>
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	0292      	lsls	r2, r2, #10
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d019      	beq.n	80036e2 <UART_SetConfig+0x136>
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	0292      	lsls	r2, r2, #10
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d81a      	bhi.n	80036ec <UART_SetConfig+0x140>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <UART_SetConfig+0x118>
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	0252      	lsls	r2, r2, #9
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00a      	beq.n	80036d8 <UART_SetConfig+0x12c>
 80036c2:	e013      	b.n	80036ec <UART_SetConfig+0x140>
 80036c4:	231f      	movs	r3, #31
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e02b      	b.n	8003726 <UART_SetConfig+0x17a>
 80036ce:	231f      	movs	r3, #31
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	2202      	movs	r2, #2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e026      	b.n	8003726 <UART_SetConfig+0x17a>
 80036d8:	231f      	movs	r3, #31
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2204      	movs	r2, #4
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e021      	b.n	8003726 <UART_SetConfig+0x17a>
 80036e2:	231f      	movs	r3, #31
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2208      	movs	r2, #8
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e01c      	b.n	8003726 <UART_SetConfig+0x17a>
 80036ec:	231f      	movs	r3, #31
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2210      	movs	r2, #16
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e017      	b.n	8003726 <UART_SetConfig+0x17a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6d      	ldr	r2, [pc, #436]	; (80038b0 <UART_SetConfig+0x304>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d104      	bne.n	800370a <UART_SetConfig+0x15e>
 8003700:	231f      	movs	r3, #31
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	e00d      	b.n	8003726 <UART_SetConfig+0x17a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <UART_SetConfig+0x308>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d104      	bne.n	800371e <UART_SetConfig+0x172>
 8003714:	231f      	movs	r3, #31
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e003      	b.n	8003726 <UART_SetConfig+0x17a>
 800371e:	231f      	movs	r3, #31
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	2210      	movs	r2, #16
 8003724:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	429a      	cmp	r2, r3
 8003730:	d15d      	bne.n	80037ee <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8003732:	231f      	movs	r3, #31
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d015      	beq.n	8003768 <UART_SetConfig+0x1bc>
 800373c:	dc18      	bgt.n	8003770 <UART_SetConfig+0x1c4>
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00d      	beq.n	800375e <UART_SetConfig+0x1b2>
 8003742:	dc15      	bgt.n	8003770 <UART_SetConfig+0x1c4>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <UART_SetConfig+0x1a2>
 8003748:	2b02      	cmp	r3, #2
 800374a:	d005      	beq.n	8003758 <UART_SetConfig+0x1ac>
 800374c:	e010      	b.n	8003770 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374e:	f7fe ffe7 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003752:	0003      	movs	r3, r0
 8003754:	61bb      	str	r3, [r7, #24]
        break;
 8003756:	e012      	b.n	800377e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003758:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <UART_SetConfig+0x30c>)
 800375a:	61bb      	str	r3, [r7, #24]
        break;
 800375c:	e00f      	b.n	800377e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7fe ff55 	bl	800260c <HAL_RCC_GetSysClockFreq>
 8003762:	0003      	movs	r3, r0
 8003764:	61bb      	str	r3, [r7, #24]
        break;
 8003766:	e00a      	b.n	800377e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	61bb      	str	r3, [r7, #24]
        break;
 800376e:	e006      	b.n	800377e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003774:	231e      	movs	r3, #30
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
        break;
 800377c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d100      	bne.n	8003786 <UART_SetConfig+0x1da>
 8003784:	e07b      	b.n	800387e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	005a      	lsls	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0019      	movs	r1, r3
 8003798:	0010      	movs	r0, r2
 800379a:	f7fc fcb5 	bl	8000108 <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d91c      	bls.n	80037e4 <UART_SetConfig+0x238>
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	025b      	lsls	r3, r3, #9
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d217      	bcs.n	80037e4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	200e      	movs	r0, #14
 80037ba:	183b      	adds	r3, r7, r0
 80037bc:	210f      	movs	r1, #15
 80037be:	438a      	bics	r2, r1
 80037c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2207      	movs	r2, #7
 80037ca:	4013      	ands	r3, r2
 80037cc:	b299      	uxth	r1, r3
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	183a      	adds	r2, r7, r0
 80037d2:	8812      	ldrh	r2, [r2, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	183a      	adds	r2, r7, r0
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e04c      	b.n	800387e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80037e4:	231e      	movs	r3, #30
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e047      	b.n	800387e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ee:	231f      	movs	r3, #31
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d015      	beq.n	8003824 <UART_SetConfig+0x278>
 80037f8:	dc18      	bgt.n	800382c <UART_SetConfig+0x280>
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d00d      	beq.n	800381a <UART_SetConfig+0x26e>
 80037fe:	dc15      	bgt.n	800382c <UART_SetConfig+0x280>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <UART_SetConfig+0x25e>
 8003804:	2b02      	cmp	r3, #2
 8003806:	d005      	beq.n	8003814 <UART_SetConfig+0x268>
 8003808:	e010      	b.n	800382c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380a:	f7fe ff89 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800380e:	0003      	movs	r3, r0
 8003810:	61bb      	str	r3, [r7, #24]
        break;
 8003812:	e012      	b.n	800383a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <UART_SetConfig+0x30c>)
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e00f      	b.n	800383a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7fe fef7 	bl	800260c <HAL_RCC_GetSysClockFreq>
 800381e:	0003      	movs	r3, r0
 8003820:	61bb      	str	r3, [r7, #24]
        break;
 8003822:	e00a      	b.n	800383a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	61bb      	str	r3, [r7, #24]
        break;
 800382a:	e006      	b.n	800383a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003830:	231e      	movs	r3, #30
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
        break;
 8003838:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01e      	beq.n	800387e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	085a      	lsrs	r2, r3, #1
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	18d2      	adds	r2, r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0019      	movs	r1, r3
 8003850:	0010      	movs	r0, r2
 8003852:	f7fc fc59 	bl	8000108 <__udivsi3>
 8003856:	0003      	movs	r3, r0
 8003858:	b29b      	uxth	r3, r3
 800385a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0f      	cmp	r3, #15
 8003860:	d909      	bls.n	8003876 <UART_SetConfig+0x2ca>
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	025b      	lsls	r3, r3, #9
 8003868:	429a      	cmp	r2, r3
 800386a:	d204      	bcs.n	8003876 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	e003      	b.n	800387e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003876:	231e      	movs	r3, #30
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800388a:	231e      	movs	r3, #30
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	781b      	ldrb	r3, [r3, #0]
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b008      	add	sp, #32
 8003896:	bd80      	pop	{r7, pc}
 8003898:	efff69f3 	.word	0xefff69f3
 800389c:	ffffcfff 	.word	0xffffcfff
 80038a0:	fffff4ff 	.word	0xfffff4ff
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40004400 	.word	0x40004400
 80038b0:	40004800 	.word	0x40004800
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	007a1200 	.word	0x007a1200

080038bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2201      	movs	r2, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <UART_AdvFeatureConfig+0x144>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	0019      	movs	r1, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2202      	movs	r2, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	d00b      	beq.n	8003908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a43      	ldr	r2, [pc, #268]	; (8003a04 <UART_AdvFeatureConfig+0x148>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2204      	movs	r2, #4
 800390e:	4013      	ands	r3, r2
 8003910:	d00b      	beq.n	800392a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <UART_AdvFeatureConfig+0x14c>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	2208      	movs	r2, #8
 8003930:	4013      	ands	r3, r2
 8003932:	d00b      	beq.n	800394c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <UART_AdvFeatureConfig+0x150>)
 800393c:	4013      	ands	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2210      	movs	r2, #16
 8003952:	4013      	ands	r3, r2
 8003954:	d00b      	beq.n	800396e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <UART_AdvFeatureConfig+0x154>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2220      	movs	r2, #32
 8003974:	4013      	ands	r3, r2
 8003976:	d00b      	beq.n	8003990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <UART_AdvFeatureConfig+0x158>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	4013      	ands	r3, r2
 8003998:	d01d      	beq.n	80039d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <UART_AdvFeatureConfig+0x15c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	035b      	lsls	r3, r3, #13
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d10b      	bne.n	80039d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <UART_AdvFeatureConfig+0x160>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <UART_AdvFeatureConfig+0x164>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	fffdffff 	.word	0xfffdffff
 8003a04:	fffeffff 	.word	0xfffeffff
 8003a08:	fffbffff 	.word	0xfffbffff
 8003a0c:	ffff7fff 	.word	0xffff7fff
 8003a10:	ffffefff 	.word	0xffffefff
 8003a14:	ffffdfff 	.word	0xffffdfff
 8003a18:	ffefffff 	.word	0xffefffff
 8003a1c:	ff9fffff 	.word	0xff9fffff
 8003a20:	fff7ffff 	.word	0xfff7ffff

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	2100      	movs	r1, #0
 8003a32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd fc26 	bl	8001284 <HAL_GetTick>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2208      	movs	r2, #8
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d10c      	bne.n	8003a64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0391      	lsls	r1, r2, #14
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <UART_CheckIdleState+0x8c>)
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f82c 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e021      	b.n	8003aa8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d10c      	bne.n	8003a8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	03d1      	lsls	r1, r2, #15
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <UART_CheckIdleState+0x8c>)
 8003a7c:	9200      	str	r2, [sp, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f000 f818 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003a84:	1e03      	subs	r3, r0, #0
 8003a86:	d001      	beq.n	8003a8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e00d      	b.n	8003aa8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2274      	movs	r2, #116	; 0x74
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	01ffffff 	.word	0x01ffffff

08003ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b094      	sub	sp, #80	; 0x50
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	e0a3      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac8:	3301      	adds	r3, #1
 8003aca:	d100      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x1a>
 8003acc:	e09f      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fd fbd9 	bl	8001284 <HAL_GetTick>
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d13d      	bne.n	8003b60 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
 8003aee:	2301      	movs	r3, #1
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	494c      	ldr	r1, [pc, #304]	; (8003c38 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	f383 8810 	msr	PRIMASK, r3
}
 8003b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b16:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b20:	2301      	movs	r3, #1
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	438a      	bics	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2274      	movs	r2, #116	; 0x74
 8003b58:	2100      	movs	r1, #0
 8003b5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e067      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2204      	movs	r2, #4
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d050      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	401a      	ands	r2, r3
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d146      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8e:	613b      	str	r3, [r7, #16]
  return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f383 8810 	msr	PRIMASK, r3
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4923      	ldr	r1, [pc, #140]	; (8003c38 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bac:	400a      	ands	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bc2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	438a      	bics	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2280      	movs	r2, #128	; 0x80
 8003bfe:	2120      	movs	r1, #32
 8003c00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2274      	movs	r2, #116	; 0x74
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e010      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	425a      	negs	r2, r3
 8003c1e:	4153      	adcs	r3, r2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	001a      	movs	r2, r3
 8003c24:	1dfb      	adds	r3, r7, #7
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d100      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c2c:	e74b      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b014      	add	sp, #80	; 0x50
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	fffffe5f 	.word	0xfffffe5f

08003c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	1dbb      	adds	r3, r7, #6
 8003c48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1dba      	adds	r2, r7, #6
 8003c54:	2158      	movs	r1, #88	; 0x58
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1dba      	adds	r2, r7, #6
 8003c5e:	215a      	movs	r1, #90	; 0x5a
 8003c60:	8812      	ldrh	r2, [r2, #0]
 8003c62:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d10d      	bne.n	8003c92 <UART_Start_Receive_IT+0x56>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <UART_Start_Receive_IT+0x4c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	225c      	movs	r2, #92	; 0x5c
 8003c82:	4943      	ldr	r1, [pc, #268]	; (8003d90 <UART_Start_Receive_IT+0x154>)
 8003c84:	5299      	strh	r1, [r3, r2]
 8003c86:	e02e      	b.n	8003ce6 <UART_Start_Receive_IT+0xaa>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	225c      	movs	r2, #92	; 0x5c
 8003c8c:	21ff      	movs	r1, #255	; 0xff
 8003c8e:	5299      	strh	r1, [r3, r2]
 8003c90:	e029      	b.n	8003ce6 <UART_Start_Receive_IT+0xaa>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10d      	bne.n	8003cb6 <UART_Start_Receive_IT+0x7a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <UART_Start_Receive_IT+0x70>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	225c      	movs	r2, #92	; 0x5c
 8003ca6:	21ff      	movs	r1, #255	; 0xff
 8003ca8:	5299      	strh	r1, [r3, r2]
 8003caa:	e01c      	b.n	8003ce6 <UART_Start_Receive_IT+0xaa>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	225c      	movs	r2, #92	; 0x5c
 8003cb0:	217f      	movs	r1, #127	; 0x7f
 8003cb2:	5299      	strh	r1, [r3, r2]
 8003cb4:	e017      	b.n	8003ce6 <UART_Start_Receive_IT+0xaa>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	055b      	lsls	r3, r3, #21
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10d      	bne.n	8003cde <UART_Start_Receive_IT+0xa2>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <UART_Start_Receive_IT+0x98>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	225c      	movs	r2, #92	; 0x5c
 8003cce:	217f      	movs	r1, #127	; 0x7f
 8003cd0:	5299      	strh	r1, [r3, r2]
 8003cd2:	e008      	b.n	8003ce6 <UART_Start_Receive_IT+0xaa>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	225c      	movs	r2, #92	; 0x5c
 8003cd8:	213f      	movs	r1, #63	; 0x3f
 8003cda:	5299      	strh	r1, [r3, r2]
 8003cdc:	e003      	b.n	8003ce6 <UART_Start_Receive_IT+0xaa>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	225c      	movs	r2, #92	; 0x5c
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	2100      	movs	r1, #0
 8003cec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2222      	movs	r2, #34	; 0x22
 8003cf2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cfa:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	2301      	movs	r3, #1
 8003d00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	430a      	orrs	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	015b      	lsls	r3, r3, #5
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d107      	bne.n	8003d42 <UART_Start_Receive_IT+0x106>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <UART_Start_Receive_IT+0x158>)
 8003d3e:	665a      	str	r2, [r3, #100]	; 0x64
 8003d40:	e002      	b.n	8003d48 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <UART_Start_Receive_IT+0x15c>)
 8003d46:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2274      	movs	r2, #116	; 0x74
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d50:	f3ef 8310 	mrs	r3, PRIMASK
 8003d54:	613b      	str	r3, [r7, #16]
  return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2190      	movs	r1, #144	; 0x90
 8003d72:	0049      	lsls	r1, r1, #1
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b00c      	add	sp, #48	; 0x30
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	000001ff 	.word	0x000001ff
 8003d94:	080041bd 	.word	0x080041bd
 8003d98:	08004055 	.word	0x08004055

08003d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da4:	f3ef 8310 	mrs	r3, PRIMASK
 8003da8:	617b      	str	r3, [r7, #20]
  return(result);
 8003daa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
 8003dae:	2301      	movs	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4925      	ldr	r1, [pc, #148]	; (8003e5c <UART_EndRxTransfer+0xc0>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dda:	623b      	str	r3, [r7, #32]
  return(result);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
 8003de0:	2301      	movs	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d118      	bne.n	8003e42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2110      	movs	r1, #16
 8003e32:	438a      	bics	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f383 8810 	msr	PRIMASK, r3
}
 8003e40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b00e      	add	sp, #56	; 0x38
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fffffedf 	.word	0xfffffedf

08003e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	225a      	movs	r2, #90	; 0x5a
 8003e72:	2100      	movs	r1, #0
 8003e74:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2252      	movs	r2, #82	; 0x52
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff fb7f 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08a      	sub	sp, #40	; 0x28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9a:	2b21      	cmp	r3, #33	; 0x21
 8003e9c:	d14d      	bne.n	8003f3a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2252      	movs	r2, #82	; 0x52
 8003ea2:	5a9b      	ldrh	r3, [r3, r2]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d132      	bne.n	8003f10 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	438a      	bics	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f383 8810 	msr	PRIMASK, r3
}
 8003eda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003edc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f383 8810 	msr	PRIMASK, r3
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f0e:	e014      	b.n	8003f3a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2252      	movs	r2, #82	; 0x52
 8003f2c:	5a9b      	ldrh	r3, [r3, r2]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b299      	uxth	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2252      	movs	r2, #82	; 0x52
 8003f38:	5299      	strh	r1, [r3, r2]
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b00a      	add	sp, #40	; 0x28
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08c      	sub	sp, #48	; 0x30
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f4e:	2b21      	cmp	r3, #33	; 0x21
 8003f50:	d151      	bne.n	8003ff6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2252      	movs	r2, #82	; 0x52
 8003f56:	5a9b      	ldrh	r3, [r3, r2]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d132      	bne.n	8003fc4 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f62:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f64:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f68:	2301      	movs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f383 8810 	msr	PRIMASK, r3
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	438a      	bics	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f383 8810 	msr	PRIMASK, r3
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f90:	f3ef 8310 	mrs	r3, PRIMASK
 8003f94:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f96:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f383 8810 	msr	PRIMASK, r3
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f383 8810 	msr	PRIMASK, r3
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003fc2:	e018      	b.n	8003ff6 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	05d2      	lsls	r2, r2, #23
 8003fd4:	0dd2      	lsrs	r2, r2, #23
 8003fd6:	b292      	uxth	r2, r2
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2252      	movs	r2, #82	; 0x52
 8003fe8:	5a9b      	ldrh	r3, [r3, r2]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b299      	uxth	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2252      	movs	r2, #82	; 0x52
 8003ff4:	5299      	strh	r1, [r3, r2]
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b00c      	add	sp, #48	; 0x30
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004006:	f3ef 8310 	mrs	r3, PRIMASK
 800400a:	60bb      	str	r3, [r7, #8]
  return(result);
 800400c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	2301      	movs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2140      	movs	r1, #64	; 0x40
 8004028:	438a      	bics	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f383 8810 	msr	PRIMASK, r3
}
 8004036:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0018      	movs	r0, r3
 8004048:	f7ff fa94 	bl	8003574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b006      	add	sp, #24
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b090      	sub	sp, #64	; 0x40
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800405c:	203e      	movs	r0, #62	; 0x3e
 800405e:	183b      	adds	r3, r7, r0
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	215c      	movs	r1, #92	; 0x5c
 8004064:	5a52      	ldrh	r2, [r2, r1]
 8004066:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406c:	2b22      	cmp	r3, #34	; 0x22
 800406e:	d000      	beq.n	8004072 <UART_RxISR_8BIT+0x1e>
 8004070:	e095      	b.n	800419e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	213c      	movs	r1, #60	; 0x3c
 8004078:	187b      	adds	r3, r7, r1
 800407a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800407c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800407e:	187b      	adds	r3, r7, r1
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	183b      	adds	r3, r7, r0
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b2d9      	uxtb	r1, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	400a      	ands	r2, r1
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	225a      	movs	r2, #90	; 0x5a
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b299      	uxth	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	225a      	movs	r2, #90	; 0x5a
 80040ae:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	225a      	movs	r2, #90	; 0x5a
 80040b4:	5a9b      	ldrh	r3, [r3, r2]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d178      	bne.n	80041ae <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040bc:	f3ef 8310 	mrs	r3, PRIMASK
 80040c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80040c2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c6:	2301      	movs	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f383 8810 	msr	PRIMASK, r3
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4936      	ldr	r1, [pc, #216]	; (80041b8 <UART_RxISR_8BIT+0x164>)
 80040de:	400a      	ands	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f383 8810 	msr	PRIMASK, r3
}
 80040ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	2301      	movs	r3, #1
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	2b01      	cmp	r3, #1
 8004132:	d12f      	bne.n	8004194 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413a:	f3ef 8310 	mrs	r3, PRIMASK
 800413e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004140:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
 8004144:	2301      	movs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2110      	movs	r1, #16
 800415c:	438a      	bics	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f383 8810 	msr	PRIMASK, r3
}
 800416a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2210      	movs	r2, #16
 8004174:	4013      	ands	r3, r2
 8004176:	2b10      	cmp	r3, #16
 8004178:	d103      	bne.n	8004182 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2210      	movs	r2, #16
 8004180:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2258      	movs	r2, #88	; 0x58
 8004186:	5a9a      	ldrh	r2, [r3, r2]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff fa01 	bl	8003594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004192:	e00c      	b.n	80041ae <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f7fc fb6c 	bl	8000874 <HAL_UART_RxCpltCallback>
}
 800419c:	e007      	b.n	80041ae <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2108      	movs	r1, #8
 80041aa:	430a      	orrs	r2, r1
 80041ac:	619a      	str	r2, [r3, #24]
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b010      	add	sp, #64	; 0x40
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	fffffedf 	.word	0xfffffedf

080041bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b090      	sub	sp, #64	; 0x40
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041c4:	203e      	movs	r0, #62	; 0x3e
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	215c      	movs	r1, #92	; 0x5c
 80041cc:	5a52      	ldrh	r2, [r2, r1]
 80041ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d4:	2b22      	cmp	r3, #34	; 0x22
 80041d6:	d000      	beq.n	80041da <UART_RxISR_16BIT+0x1e>
 80041d8:	e095      	b.n	8004306 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	213c      	movs	r1, #60	; 0x3c
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80041e4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	183a      	adds	r2, r7, r0
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	4013      	ands	r3, r2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	225a      	movs	r2, #90	; 0x5a
 800420a:	5a9b      	ldrh	r3, [r3, r2]
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b299      	uxth	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	225a      	movs	r2, #90	; 0x5a
 8004216:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	225a      	movs	r2, #90	; 0x5a
 800421c:	5a9b      	ldrh	r3, [r3, r2]
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d178      	bne.n	8004316 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004224:	f3ef 8310 	mrs	r3, PRIMASK
 8004228:	617b      	str	r3, [r7, #20]
  return(result);
 800422a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f383 8810 	msr	PRIMASK, r3
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4936      	ldr	r1, [pc, #216]	; (8004320 <UART_RxISR_16BIT+0x164>)
 8004246:	400a      	ands	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004256:	f3ef 8310 	mrs	r3, PRIMASK
 800425a:	623b      	str	r3, [r7, #32]
  return(result);
 800425c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
 8004260:	2301      	movs	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f383 8810 	msr	PRIMASK, r3
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2101      	movs	r1, #1
 8004278:	438a      	bics	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	f383 8810 	msr	PRIMASK, r3
}
 8004286:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004298:	2b01      	cmp	r3, #1
 800429a:	d12f      	bne.n	80042fc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a2:	f3ef 8310 	mrs	r3, PRIMASK
 80042a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80042a8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	2301      	movs	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2110      	movs	r1, #16
 80042c4:	438a      	bics	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2210      	movs	r2, #16
 80042dc:	4013      	ands	r3, r2
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d103      	bne.n	80042ea <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2210      	movs	r2, #16
 80042e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2258      	movs	r2, #88	; 0x58
 80042ee:	5a9a      	ldrh	r2, [r3, r2]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff f94d 	bl	8003594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042fa:	e00c      	b.n	8004316 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0018      	movs	r0, r3
 8004300:	f7fc fab8 	bl	8000874 <HAL_UART_RxCpltCallback>
}
 8004304:	e007      	b.n	8004316 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2108      	movs	r1, #8
 8004312:	430a      	orrs	r2, r1
 8004314:	619a      	str	r2, [r3, #24]
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b010      	add	sp, #64	; 0x40
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	fffffedf 	.word	0xfffffedf

08004324 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}

08004334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <USB_DisableGlobalInt+0x30>)
 800433e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	5a9b      	ldrh	r3, [r3, r2]
 8004346:	b29b      	uxth	r3, r3
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	b292      	uxth	r2, r2
 800434c:	43d2      	mvns	r2, r2
 800434e:	b292      	uxth	r2, r2
 8004350:	4013      	ands	r3, r2
 8004352:	b299      	uxth	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b004      	add	sp, #16
 8004362:	bd80      	pop	{r7, pc}
 8004364:	0000bf80 	.word	0x0000bf80

08004368 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004368:	b084      	sub	sp, #16
 800436a:	b590      	push	{r4, r7, lr}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	2004      	movs	r0, #4
 8004374:	2410      	movs	r4, #16
 8004376:	1900      	adds	r0, r0, r4
 8004378:	2408      	movs	r4, #8
 800437a:	46a4      	mov	ip, r4
 800437c:	44bc      	add	ip, r7
 800437e:	4460      	add	r0, ip
 8004380:	6001      	str	r1, [r0, #0]
 8004382:	6042      	str	r2, [r0, #4]
 8004384:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2240      	movs	r2, #64	; 0x40
 800438a:	2101      	movs	r1, #1
 800438c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	2100      	movs	r1, #0
 8004394:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2244      	movs	r2, #68	; 0x44
 800439a:	2100      	movs	r1, #0
 800439c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2250      	movs	r2, #80	; 0x50
 80043a2:	2100      	movs	r1, #0
 80043a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b003      	add	sp, #12
 80043ae:	bc90      	pop	{r4, r7}
 80043b0:	bc08      	pop	{r3}
 80043b2:	b004      	add	sp, #16
 80043b4:	4718      	bx	r3
	...

080043b8 <__libc_init_array>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	2600      	movs	r6, #0
 80043bc:	4d0c      	ldr	r5, [pc, #48]	; (80043f0 <__libc_init_array+0x38>)
 80043be:	4c0d      	ldr	r4, [pc, #52]	; (80043f4 <__libc_init_array+0x3c>)
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	42a6      	cmp	r6, r4
 80043c6:	d109      	bne.n	80043dc <__libc_init_array+0x24>
 80043c8:	2600      	movs	r6, #0
 80043ca:	f000 f833 	bl	8004434 <_init>
 80043ce:	4d0a      	ldr	r5, [pc, #40]	; (80043f8 <__libc_init_array+0x40>)
 80043d0:	4c0a      	ldr	r4, [pc, #40]	; (80043fc <__libc_init_array+0x44>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	42a6      	cmp	r6, r4
 80043d8:	d105      	bne.n	80043e6 <__libc_init_array+0x2e>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	00b3      	lsls	r3, r6, #2
 80043de:	58eb      	ldr	r3, [r5, r3]
 80043e0:	4798      	blx	r3
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7ee      	b.n	80043c4 <__libc_init_array+0xc>
 80043e6:	00b3      	lsls	r3, r6, #2
 80043e8:	58eb      	ldr	r3, [r5, r3]
 80043ea:	4798      	blx	r3
 80043ec:	3601      	adds	r6, #1
 80043ee:	e7f2      	b.n	80043d6 <__libc_init_array+0x1e>
 80043f0:	08004508 	.word	0x08004508
 80043f4:	08004508 	.word	0x08004508
 80043f8:	08004508 	.word	0x08004508
 80043fc:	0800450c 	.word	0x0800450c

08004400 <memset>:
 8004400:	0003      	movs	r3, r0
 8004402:	1882      	adds	r2, r0, r2
 8004404:	4293      	cmp	r3, r2
 8004406:	d100      	bne.n	800440a <memset+0xa>
 8004408:	4770      	bx	lr
 800440a:	7019      	strb	r1, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	e7f9      	b.n	8004404 <memset+0x4>

08004410 <strncmp>:
 8004410:	b530      	push	{r4, r5, lr}
 8004412:	0005      	movs	r5, r0
 8004414:	1e10      	subs	r0, r2, #0
 8004416:	d008      	beq.n	800442a <strncmp+0x1a>
 8004418:	2400      	movs	r4, #0
 800441a:	3a01      	subs	r2, #1
 800441c:	5d2b      	ldrb	r3, [r5, r4]
 800441e:	5d08      	ldrb	r0, [r1, r4]
 8004420:	4283      	cmp	r3, r0
 8004422:	d101      	bne.n	8004428 <strncmp+0x18>
 8004424:	4294      	cmp	r4, r2
 8004426:	d101      	bne.n	800442c <strncmp+0x1c>
 8004428:	1a18      	subs	r0, r3, r0
 800442a:	bd30      	pop	{r4, r5, pc}
 800442c:	3401      	adds	r4, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f4      	bne.n	800441c <strncmp+0xc>
 8004432:	e7f9      	b.n	8004428 <strncmp+0x18>

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
